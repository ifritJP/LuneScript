// -*- coding: utf-8 -*-

_lune_control default_async_all;

import lns.Util;
import go/github:com.ifritJP.LuneScript.src.lune.base.Tokenizer as LnsTokenizer;
import go/github:com.ifritJP.LuneScript.src.lune.base.Types as LnsTypes;

pub interface CodeTokenizerIF {
   pub fn getToken() mut : &LnsTypes.Token;

   /**
   現在のトークンを pushback する
   */
   pub fn pushback() mut;

   pub fn getPrevToken() : &LnsTypes.Token;
   
   /**
次に getToken() した時に取得できる token を返す。
peekToken() を複数回連続実行しても同じ token を返す。
   */
   pub fn peekToken() mut : &LnsTypes.Token;
}

pub class CodeTokenizer extend (CodeTokenizerIF) {
   /** コードの tokenizer 元 */
   let tokenizer:LnsTokenizer.Tokenizer;
   /** 読み込み済みの token のリスト */
   let mut tokenList:List<&LnsTypes.Token>;
   /**
   tokenList のアクセス位置。
   pushBack したときは、この位置を前後に動かす。
   次の条件のときに、tokenList から token を読み出す。
   1 <= tokenIndex <= #tokenList 
   */ 
   let mut tokenIndex:int;
   /** コメントリスト。 次のコメント以外の token に付加する */
   let mut commentList:__List<&LnsTypes.Token>;

   pub fn __init(tokenizer:LnsTokenizer.Tokenizer) {
      self.tokenizer = tokenizer;
      self.tokenList = [];
      self.commentList = [];
      self.tokenIndex = 1;
   }

   /**
   トークン取得

コメントがある場合は、コメントを読み飛ばして次のトークンを取得する。
   */
   pub fn getToken() mut : &LnsTypes.Token {
      if self.tokenIndex <= #self.tokenList {
         let token = self.tokenList[ self.tokenIndex ];
         self.tokenIndex = self.tokenIndex + 1;
         return token;
      }

      fn process( token:&LnsTypes.Token ) : &LnsTypes.Token {
         let result;
         if #self.commentList == 0 {
            result = token;
         } else {
            let newToken = new LnsTypes.Token(
               token.kind, token.txt, token.pos, token.consecutive, self.commentList );
            self.commentList = [];
            result = newToken;
         }
         self.tokenList.insert( result );
         self.tokenIndex = #self.tokenList + 1;
         return result;
      }
      
      while true {
         let! token = self.tokenizer.getToken() {
            token = LnsTypes.noneToken;
         };
         switch token.kind {
            case .Eof {
               return process(token);
            }
            case .Cmnt {
               self.commentList.insert( token );
            }
            default {
               return process(token);
            }
         } 
      }
   }

   pub fn getPrevToken() : &LnsTypes.Token {
      if self.tokenIndex <= 1 {
         return LnsTypes.noneToken;
      }
      return self.tokenList[ self.tokenIndex - 1 ];
   }

   /**
   現在のトークンを pushback する
   */
   pub fn pushback() mut {
      Util.log( __func__, #self.tokenList, self.tokenIndex );
      if self.tokenIndex <= 1 {
         error( "illegal tokenIndex" );
      }
      self.tokenIndex = self.tokenIndex - 1;
   }

   /**
次に getToken() した時に取得できる token を返す。
peekToken() を複数回連続実行しても同じ token を返す。
   */
   pub fn peekToken() mut : &LnsTypes.Token {
      if self.tokenIndex <= #self.tokenList {
         let token = self.tokenList[ self.tokenIndex ];
         return token;
      }
      let token = self.getToken();
      self.pushback();
      return token;
   }
}

pub proto class CodeGenerator;

/**
Parse 結果の一つの要素。
*/
pub interface CodeCore {
   pub fn outputCode( stream:CodeGenerator );
   pub fn pushback(tokenizer:CodeTokenizerIF);
}

class CodeIndentInfo {
   let endTxt:str {pub};
   let indent:int {pub};
}

class ElementIndentInfo {
   let mut indent:int {pub, local};
   let mut hasToken:bool {pub,local};
}

/**
CodeCore からソースコードを出力する
*/
pub class CodeGenerator {
   let stream:oStream;
   let mut prevToken:&LnsTypes.Token;
   let indentStack:List<&CodeIndentInfo>;
   let indentPairMap:Map<str,str>;
   let baseIndent:int;
   let mut colmun:int;
   let elementIndent:List<ElementIndentInfo>;

   pub fn __init( stream:oStream ) {
      self.stream = stream;
      self.prevToken = LnsTypes.noneToken;
      self.indentStack = [ new CodeIndentInfo( "", 0 ) ];
      self.elementIndent = [ new ElementIndentInfo( 0, false) ];
      self.baseIndent = 3;
      self.colmun = 0;
      self.indentPairMap = {
         "{": "}",
         "`{":"}",
         "[":"]",
         "(":")",
         "(@":")",
         "(=":")",
      };
   }

   fn pushElementIndent() mut {
      self.elementIndent.insert( new ElementIndentInfo( self.colmun + 1, false ) );
   }
   fn popElementIndent() mut {
      self.elementIndent.remove( ## );
   }
   fn peekElementIndent() mut : ElementIndentInfo {
      return self.elementIndent[ #self.elementIndent ];
   }
   fn peekElementIndentRO() : &ElementIndentInfo {
      return self.elementIndent[ #self.elementIndent ];
   }


   fn curIndent( term:bool ) : int {
      let indent;
      let elementIndent = self.peekElementIndentRO();
      if elementIndent.$hasToken {
         indent = elementIndent.$indent;
      } else {
         indent = 0;
      }
      let work = self.indentStack[ #self.indentStack ].$indent;
      if term {
         return work;
      }
      if indent > work {
         return indent;
      }
      return work;
   }
   fn isIndentEnd( token:&LnsTypes.Token ) : bool {
      let endTxt = self.indentStack[ #self.indentStack ].$endTxt;
      return token.txt == endTxt;
   }
   fn popIndent() mut {
      let indentInfo = self.indentStack[ #self.indentStack ];
      Util.log( __func__, indentInfo.$endTxt );
      self.indentStack.remove(##);
   }
   fn pushIndent( endTxt:str, pos:int ) mut {
      Util.log( __func__, endTxt, pos );
      self.indentStack.insert( new CodeIndentInfo( endTxt, pos ) );
   }
   
   pub fn outputElement( elementName:str!, codeCoreList:&List<&CodeCore> ) mut {
      let pushedElementIndent;
      if elementName == "<exp>" {
         pushedElementIndent = true;
         self.pushElementIndent();
      } else {
         pushedElementIndent = false;
      }
      foreach core in codeCoreList {
         core.outputCode( self );
      }
      if pushedElementIndent {
         self.popElementIndent();
      }
   }


   fn processIndentCur( token:&LnsTypes.Token, newLine:bool ) mut : int {
      {
         let indentPos;
         if newLine {
            indentPos = self.curIndent( false ) + self.baseIndent;
         } else {
            indentPos = self.colmun + 1;
         }
         if! let endTxt = self.indentPairMap[ self.prevToken.txt ] {
            self.pushIndent( endTxt, indentPos );
         }
      }
      if self.isIndentEnd( token ) {
         self.popIndent();
         return self.curIndent( true );
      }

      return self.curIndent( false );
   }

   fn writeRaw( txt:str, validToken:bool ) mut {
      if validToken {
         self.peekElementIndent().set_hasToken( true );
      }
      self.colmun = self.colmun + #txt;
      self.stream.write( txt );
   }
   fn writeRawln( num:int ) mut {
      self.colmun = 0;
      self.stream.write( "\n" );
      if num > 1 {
         self.stream.write( "\n" );
      }

      let mut elementIndent = self.peekElementIndent();
      if not elementIndent.$hasToken {
         elementIndent.set_indent( self.curIndent( false ) );
      }
   }
   pub fn writeln() mut {
      self.writeRawln( 0 );
   }

   fn isNewLine( token:&LnsTypes.Token ) : bool {
      if self.prevToken == LnsTypes.noneToken {
         return false;
      }
      let mut prevLineNo = self.prevToken.pos.lineNo;
      switch self.prevToken.kind {
         case .Str {
            if self.prevToken.txt[ 1 ] == ?` {
               __luaLock {
                  apply _ of self.prevToken.txt.gmatch( "\n" ) {
                     prevLineNo = prevLineNo + 1;
                  }
               }
            }
         }
      }
      return prevLineNo ~= token.pos.lineNo;
   }
   
   pub fn outputToken( token:&LnsTypes.Token ) mut {
      foreach comment in token.$commentList {
         self.outputToken( comment );
      }
      if token.kind == .Eof {
         return;
      }
      if self.isNewLine( token ) {
         Util.log( __func__,
                   self.prevToken.kind.$_txt, self.prevToken.pos.lineNo,
                   token.kind.$_txt, token.pos.lineNo );
         self.writeRawln(token.pos.lineNo - self.prevToken.pos.lineNo );
         self.writeRaw( string.rep( " ", self.processIndentCur( token, true ) ), false );
      } else {
         self.processIndentCur( token, false );

         if not token.consecutive and self.prevToken ~= LnsTypes.noneToken {
            self.writeRaw( " ", false );
         }
      }
      if token.kind == .Char {
         switch token.txt {
            case "'", '"', '\\' {
               self.writeRaw( "?\\%s" (token.txt), true );
            }
            default {
               self.writeRaw( "?%s" (token.txt), true );
            }
         }
      } else {
         self.writeRaw( token.txt, token.kind ~= .Cmnt );
      }
      self.prevToken = token;
   }
}

pub alge ParseCodeRet {
   /** EOF */
   Eof,
   /** 不適合 */
   Unmatch,
   /** 省略 */
   Abbr,
   /** 検出 */
   Detect(&CodeCore),
}

/**
`{} を保持する CodeCore。
*/
pub class CodeCoreStat extend (CodeCore) {
   let list:&List<&LnsTypes.Token> {pub};
   pub fn outputCode( stream:CodeGenerator ) {
      foreach token in self.list {
         stream.outputToken( token );
      }
   }
   pub fn pushback(tokenizer:CodeTokenizerIF) {
      foreach _ in self.list {
         tokenizer.pushback();
      }
   }
}

/**
builtin の token を保持する CodeCore。
*/
pub class CodeCoreBuiltin extend (CodeCore) {
   let token:&LnsTypes.Token {pub};
   pub fn outputCode( stream:CodeGenerator ) {
      stream.outputToken( self.token );
   }
   pub fn pushback(tokenizer:CodeTokenizerIF) {
      tokenizer.pushback();
   }
}

/**
token を保持する CodeCore。
*/
pub class CodeCoreToken extend (CodeCore) {
   let token:&LnsTypes.Token {pub};
   pub fn outputCode( stream:CodeGenerator ) {
      stream.outputToken( self.token );
   }
   pub fn pushback(tokenizer:CodeTokenizerIF) {
      Util.log( __func__, self.token.txt );
      tokenizer.pushback();
   }
}

/**
elementName の CodeCore リストを保持する CodeCore。
*/
pub class CodeCoreList extend (CodeCore) {
   let elementName:str! {pub};
   let codeCoreList:&List<&CodeCore>;
   pub fn outputCode( stream:CodeGenerator ) {
      stream.outputElement( self.elementName, self.codeCoreList );
   }
   pub fn pushback(tokenizer:CodeTokenizerIF) {
      Util.log( __func__, self.elementName );
      for index = #self.codeCoreList, 1, -1 {
         let codeCore = self.codeCoreList[ index ];
         codeCore.pushback( tokenizer );
      }
   }
}

pub fn outputCode( codeCore:&CodeCore, stream:CodeGenerator ) {
   codeCore.outputCode( stream );
   stream.writeln();
}


pub interface ParseCodeHookIF {
   pub fn prepare( elementName:str, depth:int, token:&LnsTypes.Token ) mut;
   pub fn process( parseCodeRet:ParseCodeRet, depth:int ) mut : ParseCodeRet;
}
