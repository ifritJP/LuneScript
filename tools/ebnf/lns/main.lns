// -*- coding: utf-8 -*-

import lns.Ebnf;
import lns.Parser;
import lns.Code;
import go/github:com.ifritJP.LuneScript.src.lune.base.Tokenizer as LnsTokenizer;
import go/github:com.ifritJP.LuneScript.src.lune.base.Types as LnsTypes;



let ebnfCtrl = Parser.analyze_ebnf( Ebnf.EbnfTokenizer.create() );
ebnfCtrl.dump();


fn createTokenizer() : LnsTokenizer.Tokenizer {
   let lnsCode = ```
Depend.setup( fn(ver:int) {
   LuaVer.setCurVer( ver );
});
```;
   return LnsTokenizer.StreamTokenizer.create(
      LnsTypes.TokenizerSrc.LnsCode( lnsCode, "test", nil ), false, nil, nil );
}

fn createTokenizerFromFile( path:str ) : LnsTokenizer.Tokenizer {
   return LnsTokenizer.StreamTokenizer.create(
      LnsTypes.TokenizerSrc.LnsPath( nil, path, "test", nil), false, nil, nil );
}


// let mut codeTokenizer = createTokenizer();
// let mut codeTokenizer = createTokenizerFromFile( "lns/main.lns" );
// let mut codeTokenizer = createTokenizerFromFile( "lns/Ebnf.lns" );
// let mut codeTokenizer = createTokenizerFromFile( "../../src/test/testGo.lns" );
let mut codeTokenizer = createTokenizerFromFile( "../../src/lune/base/front.lns" );


ebnfCtrl.parse(
   "<code>", new Code.CodeTokenizer( codeTokenizer ) );
