// -*- coding: utf-8 -*-

import lns.Ebnf;
import lns.Parser;
import lns.Code;
import lns.Util;
import lns.Formatter;
import go/github:com.ifritJP.LuneScript.src.lune.base.Tokenizer as LnsTokenizer;
import go/github:com.ifritJP.LuneScript.src.lune.base.Types as LnsTypes;
import go/github:com.ifritJP.LuneScript.src.lune.base.Depend as LnsDepend;
import go/github:com.ifritJP.LuneScript.src.lune.base.Util as LnsUtil;

fn createTokenizer() : LnsTokenizer.Tokenizer {
   let lnsCode = ```
{
   if val.val2
 {
   }




   else {
}


}
let val = [ 
  a

];
match hoge {

   case .a  {

}
}

switch hoge {
    case .a {
}
    case .b,
.c ___LNS___
{ 

}
```;
   return LnsTokenizer.StreamTokenizer.create(
      LnsTypes.TokenizerSrc.LnsCode( lnsCode, "test", nil ), true, nil, nil );
}

fn createTokenizerFromFile( path:str ) : LnsTokenizer.Tokenizer {
   return LnsTokenizer.StreamTokenizer.create(
      LnsTypes.TokenizerSrc.LnsPath( nil, path, "test", nil), true, nil, nil );
}


class Option {
   let inpath:str {pub};
   let lineNo:(int,int,bool)! {pub};
   let outpath:str {pub};
   let ebnfPath:str! {pub};
   let debugFlag:bool {pub};
}


fn format( option:&Option ) : bool
{
   let mut tokenizer;
   switch option.$inpath {
      case "" {
         tokenizer = createTokenizer();
      }
      case "@-" {
         let lnsCode = io.stdin.read( "*a" ) or "";
         tokenizer = LnsTokenizer.StreamTokenizer.create(
            LnsTypes.TokenizerSrc.LnsCode( lnsCode, "test", nil ),
            true, nil, nil );
      }
      default {
         tokenizer = createTokenizerFromFile( option.$inpath );
      }
   }
   
   //let mut tokenizer = createTokenizer();
   // let mut tokenizer = createTokenizerFromFile( "lns/main.lns" );
   // let mut tokenizer = createTokenizerFromFile( "lns/Ebnf.lns" );
   // let mut tokenizer = createTokenizerFromFile( "../../src/test/testGo.lns" );
   // let mut tokenizer = createTokenizerFromFile( "../../src/lune/base/front.lns" );
   // let mut tokenizer = createTokenizerFromFile( "../../src/lune/base/Nodes.lns" );

   let mut codeTokenizer:Code.CodeTokenizerIF = new Code.CodeTokenizer( tokenizer );
   let hookIf:Code.ParseCodeHookIF;
   if! let lineNo = option.$lineNo {
      let targetLineNo, endLineNo, useEbnf = lineNo...;
      
      let mut codePicker = Formatter.CodePicker.createFrom(
         codeTokenizer, targetLineNo, endLineNo );

      if not useEbnf {
         let mut parser =
            new Formatter.SimpleParser( codePicker, targetLineNo, endLineNo );
         parser.analyze();
         return true;
      }

      
      let mut hook = new Formatter.ParseCodeHook(
         codeTokenizer, targetLineNo, endLineNo );
      codeTokenizer = hook;
      hookIf = hook;
   } else {
      hookIf = new Code.DummyParseCodeHook();
   }

   let ebnfCtrl = Parser.analyze_ebnf( Ebnf.EbnfTokenizer.create( option.$ebnfPath ) );
   if option.$debugFlag {
      ebnfCtrl.dump();
   }
   _match ebnfCtrl.parse( "<code>", codeTokenizer, hookIf ) {
      case .Eof {
         Util.log( "eof" );
      }
      case .Unmatch {
         Util.log( "unmatch" );
      }
      case .Abbr {
         let pos = codeTokenizer.getToken().pos;
         Util.log( "illegal", pos.lineNo, pos.column );
      }
      case .Detect( codeCore ) {
         Util.log( "outputCode" );
         if! let mut fileObj = io.open( option.$outpath, "w" ) {
            let mut stream = new LnsUtil.memStream();
            Code.outputCode( codeCore, new Code.CodeGenerator( stream, codeTokenizer ) );
            fileObj.write( stream.$txt );
            fileObj.close();
            Util.log( "" );
            let token = codeTokenizer.getToken();
            let pos = token.pos;
            Util.log( "%d:%d" (pos.lineNo, pos.column), token.kind.$_txt );
            return true;
         }
      }
   }
   return false;
}

fn usage( mess:str ) : __ {
   print( mess );
   print( "" );
   print( "usage: command [-log] [-ebnf path] [-prof] [-i lineno] inpath outpath" );
   os.exit( 1 );
}

pub fn __main( argList:&_List<str> ) : int {
   let optList:List<str> = [];
   let mut ebnfPath:str! = nil;
   let mut index = 1;
   let mut prof = false;
   let mut debugFlag = false;
   let mut region:(int,int,bool)! = nil;

   fn getNext() : str {
      if index > #argList {
         usage( "illegal option" );
      }
      let arg = argList[ index ];
      index = index + 1;
      return arg;
   }
   fn convInt( txt:str, mess:str ) : int {
      if! let num = tonumber( txt## ) {
         return num@@int;
      } else {
         usage( mess );
      }
   }
   
   while index <= #argList {
      let arg = getNext();
      switch arg {
         case "-log" {
            debugFlag = true;
            Util.setLog( true );
         }
         case "-prof" {
            prof = true;
         }
         case "-ebnf" {
            ebnfPath = getNext();
         }
         case "-i", "-I" {
            let nextArg = getNext();
            let pre = nextArg.gsub( ":.*", "" );
            let post = nextArg.gsub( ".*:", "" );
            let startLineNo = convInt( pre, "%s is not number" (pre) );
            let endLineNo = convInt( post, "%s is not number" (post) );
            region = (= startLineNo, endLineNo, arg == "-I" );
         }
         default {
            optList.insert( arg );
         }
      }
   }

   if #optList < 3 {
      usage( "illegal argument" );
   }


   let mut exitCode = 1;
   LnsDepend.profile(
      prof, 
      fn() {               
         if format( new Option( optList[ 2 ], region,
                                optList[ 3 ], ebnfPath, debugFlag ) ) {
            exitCode = 0;
         }
      }, "prof" );
      
   return exitCode;
}
