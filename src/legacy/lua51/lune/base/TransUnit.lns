/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

subfile use lune.base.TransUnitDecl;
subfile use lune.base.TransUnitExp;
subfile use lune.base.TransUnitStatementList;

import lune.base.Parser;
import lune.base.Util;
import lune.base.Ast;
import lune.base.Nodes;
import lune.base.Writer;
import lune.base.frontInterface;
import lune.base.LuaVer;
import lune.base.Option;
import lune.base.Code;
import lune.base.Log;
import lune.base.LuneControl;

_lune_control ignore_symbol_;


enum DeclClassMode {
   Class,
   Interface,
   Module
}

enum DeclFuncMode {
   Func,
   Class,
   Module,
   Glue,
}

enum ExpSymbolMode {
   Symbol,
   Fn,
   Field,
   FieldNil,
   Get,
   GetNil,
}

pub enum AnalyzeMode {
   Compile,
   Diag,
   Complete,
}


/**
初期値を持たないシンボルの型を確定させるための処理を行なう。

ブロック毎にこのインスタンスを生成し、ブロック終了時にシンボルの型を確定する。
*/
class TentativeSymbol {
   pri let mut oldSymbolSet:Set<&Ast.SymbolInfo>!;
   pri let mut symbolSet:Set<&Ast.SymbolInfo>;
   pri let mut parent:TentativeSymbol!;
   pri let mut scope:&Ast.Scope;
   pri let mut skipFlag:bool;
   pri let loopFlag:bool;

   pub fn __init( parent:TentativeSymbol!, scope:&Ast.Scope, loopFlag:bool ) {
      self.symbolSet = (@);
      self.oldSymbolSet = nil;
      self.parent = parent;
      self.scope = scope;
      self.skipFlag = false;
      self.loopFlag = loopFlag;
   }

   pub fn checkAndExclude( mut symbolInfo:&Ast.SymbolInfo ) mut : bool {
      symbolInfo = symbolInfo.getOrg();
      if self.symbolSet.has( symbolInfo ) {
         self.symbolSet.del( symbolInfo );
         return true;
      }
      return false;
   }

   pub fn regist( symbolInfo:&Ast.SymbolInfo ) mut : bool {
      self.symbolSet.add( symbolInfo.getOrg() );
      symbolInfo.set_hasValueFlag( true );

      if self.$scope.isInnerOf( symbolInfo.$scope ) {
         if not symbolInfo.$mutable {
            let mut work = self;
            while true {
               if! work.parent {
                  if work.scope == symbolInfo.$scope {
                     break;
                  }
                  if work.loopFlag {
                     // loop 内で immutable な変数へのセットはサポートしない
                     return false;
                  }
                  work = _exp;
               }
               else {
                  break;
               }
            }
         }
      }

      return true;
   }

   pub fn skip() mut {
      foreach symbolInfo in self.symbolSet {
         symbolInfo.set_hasValueFlag( false );
      }
      self.skipFlag = true;
   }

   fn merge( finishFlag:bool ) mut {
      if self.skipFlag {
         self.skipFlag = false;
         if! let other = self.oldSymbolSet {
            self.symbolSet = other.clone();
         }
         if finishFlag {
            foreach symbolInfo in self.symbolSet {
               symbolInfo.set_hasValueFlag( true );
            }
         }
         return;
      }
      if! let other = self.oldSymbolSet {
         let mut mergedSet = self.symbolSet.clone().and( other );
         if finishFlag {
            foreach symbolInfo in self.symbolSet.clone().or( other ).sub( mergedSet ) {
               symbolInfo.set_hasValueFlag( false );
            }
         }
         else {
            foreach symbolInfo in self.symbolSet.clone().or( other ) {
               symbolInfo.set_hasValueFlag( false );
            }
         }
         self.symbolSet = mergedSet;
      }
      else {
         if not finishFlag {
            foreach symbolInfo in self.symbolSet {
               symbolInfo.set_hasValueFlag( false );
            }
         }
      }
   }

   pub fn finish( complete:bool ) mut : TentativeSymbol! {
      self.merge( true );
      if! let mut parent = self.parent {
         if complete {
            foreach symbolInfo in self.symbolSet {
               if symbolInfo.$hasValueFlag {
                  if parent.scope.isInnerOf( symbolInfo.$scope ) {
                     parent.symbolSet.add( symbolInfo );
                  }
               }
            }
         }
         else {
            foreach symbolInfo in self.symbolSet {
               symbolInfo.set_hasValueFlag( false );
            }
         }
         return parent;
      }
      return nil;
   }

   pub fn newSet( scope:&Ast.Scope ) mut {
      self.merge( false );
      self.oldSymbolSet = self.symbolSet;
      self.symbolSet = (@);
      self.scope = scope;
   }
}

form EvalMacroCallback();

enum AnalyzingState {
   Other,
   /** コンストラクタ */
   Constructor,
   /** class の __init ブロック */
   InitBlock,
   /** class の static method */
   ClassMethod,
   /** その他の 関数, メソッド */
   Func,
}

form checkImplicitCastCallback( dstType:&Ast.TypeInfo, expNode:&Nodes.Node ): &Nodes.Node!;

pub class TransUnit {

   /** 解析状態 */
   pri let mut analyzingStateQueue:List<AnalyzingState>;

   pri let mut importModuleInfo: frontInterface.ImportModuleInfo;

   /** true の場合は mut 制御が有効 */
   pri let mut validMutControl: bool;

   /** モジュール名 */
   pri let mut moduleName: str;
   pri let mut moduleType: &Ast.TypeInfo;

   pri let mut globalScope: Ast.Scope;
   pri let mut topScope: Ast.Scope;
   /** モジュールの最上位スコープ */
   pri let mut moduleScope: Ast.Scope;

   /** 解析中の scope */
   pri let mut scope: Ast.Scope;
   /** */
   pri let mut tentativeSymbol:TentativeSymbol;
   /** クラスの TypeId -> NamespaceInfo */
   pri let mut typeId2ClassMap: Map<int,&Nodes.NamespaceInfo>;

   /** クラスの型情報 -> そのクラスを宣言しているノード */
   pri let mut typeInfo2ClassNode: Map<&Ast.TypeInfo,Nodes.DeclClassNode>;
   /** パーサー */
   pri let mut parser: Parser.Parser;
   /** push バックしたトークンリスト */
   pri let mut pushbackList: List<&Parser.Token>;
   /** 現在のトークン */
   pri let mut currentToken: &Parser.Token;
   /** 解析済みトークンリスト */
   pri let mut usedTokenList: List<&Parser.Token>;
   /** 解析エラーメッセージ */
   pri let mut errMessList: str[] { pub };
   /** 解析警告ーメッセージ */
   pri let mut warnMessList: str[] { pub };
   /** マクロを展開する際にマクロを評価する MacroEval のオブジェクト */
   pri let macroEval: Nodes.MacroEval;
   /** マクロの TypeId -> マクロ情報 */
   pri let mut typeId2MacroInfo: Map<int,Nodes.MacroInfo>;
   /** マクロのモード */
   pri let mut macroMode: Nodes.MacroMode;
   /** マクロをコールしている行番号 */
   pri let mut macroCallLineNo: int;
   /** macro-expand 内で利用できるシンボルと値の紐付けマップ */
   pri let mut symbol2ValueMapForMacro: Map<str,Nodes.MacroValInfo>;
   /** macro-statement の最上位スコープ */
   pri let mut macroScope: Ast.Scope!;

   /** インポートしているモジュールの TypeInfo -> シンボル情報 */
   pri let mut importModule2ModuleInfo: Map<&Ast.TypeInfo,&Nodes.ModuleInfo>;
   pri let mut importModuleName2ModuleInfo: Map<str,&Nodes.ModuleInfo>;
   pri let mut importModule2ModuleInfoCurrent: Map<&Ast.TypeInfo,&Nodes.ModuleInfo>;

   /** subfile 名のリスト */
   pri let mut subfileList: str[];

   /** __func__ シンボルを持つ関数 TypeInfo の set */
   pri let mut has__func__Symbol: Set<&Ast.TypeInfo>;

   /** 解析モード */
   pri let analyzeMode: AnalyzeMode;
   /** 解析対象位置 */
   pri let analyzePos: &Parser.Position;
   /** 解析対象モジュール */
   pri let analyzeModule: str;

   pri let mut helperInfo:Nodes.LuneHelperInfo;

   /** provide ノード */
   pri let mut provideNode: Nodes.ProvideNode!;
   /** NodeKind -> Node[]  */
   pri let mut nodeManager: Nodes.NodeManager;

   /** ループ系制御構文(for 等)の Scope */
   pri let mut loopScopeQueue: List<&Ast.Scope>;

   /**
プロトタイプだけの関数のタイプ Map。
解析終了時に、この  Map に残っているとエラー。

関数の TypeInfo → Position.
   */
   pri let mut protoFuncMap:Map<&Ast.TypeInfo,&Parser.Position>;
   /**
   プロトタイプ宣言しているクラス。
   解析終了時に、この  Map に残っているとエラー。
   */
   pri let mut protoClassMap:Map<&Ast.TypeInfo,&Parser.Position>;

   /**
トランスコンパイル先の lua バージョン
   */
   pri let targetLuaVer:&LuaVer.LuaVerInfo;

   pri let moduleId:frontInterface.ModuleId;

   /** true の場合、 _ で始まるシンボル名チェックをしない */
   pri let mut ignoreToCheckSymbol_:bool;

   pri let ctrl_info: &Option.TransCtrlInfo;

   pri let mut useModuleMacroSet:Set<&Ast.TypeInfo>;

   pub fn __init( moduleId:&frontInterface.ModuleId,
                  importModuleInfo:frontInterface.ImportModuleInfo,
                  macroEval: Nodes.MacroEval, analyzeModule:str!, mode:AnalyzeMode!,
                  pos:&Parser.Position!, targetLuaVer:&LuaVer.LuaVerInfo,
                  ctrl_info: &Option.TransCtrlInfo )
   {
      self.protoClassMap = {};
      self.analyzingStateQueue = [];
      self.macroCallLineNo = 0;
      self.useModuleMacroSet = (@);
      self.ctrl_info = ctrl_info;
      self.ignoreToCheckSymbol_ = false;
      self.moduleId = moduleId;
      self.helperInfo = new Nodes.LuneHelperInfo(
         false, false, false, false, false, false, false );
      self.targetLuaVer = targetLuaVer;
      self.importModuleInfo = importModuleInfo;
      self.protoFuncMap = {};
      self.loopScopeQueue = [];
      self.has__func__Symbol = (@);
      self.nodeManager = new Nodes.NodeManager();
      self.importModuleName2ModuleInfo = {};
      self.importModule2ModuleInfoCurrent = {};
      self.importModule2ModuleInfo = {};
      self.macroScope = nil;
      self.validMutControl = true;
      self.moduleName = "";
      self.moduleType = Ast.headTypeInfo;
      self.parser = new Parser.DummyParser();
      self.subfileList = [];
      self.pushbackList = [];
      self.usedTokenList = [];

      // self.scope = Ast.rootScope;
      // self.topScope = Ast.rootScope;
      // self.moduleScope = Ast.rootScope;
      self.globalScope = new Ast.Scope( Ast.rootScope, false, nil ## );

      self.scope = new Ast.Scope( self.globalScope, true, nil ## );
      self.topScope = self.scope;
      self.moduleScope = self.scope;

      self.tentativeSymbol = new TentativeSymbol( nil, self.globalScope, false );

      self.typeId2ClassMap = {};
      self.typeInfo2ClassNode = {};
      self.currentToken = Parser.getEofToken();
      self.errMessList = [];
      self.warnMessList = [];
      self.macroEval = macroEval;
      self.typeId2MacroInfo = {};
      self.macroMode = .None;
      self.symbol2ValueMapForMacro = {};
      self.analyzeMode = unwrap mode default AnalyzeMode.Compile;
      self.analyzePos = unwrap pos default new Parser.Position( 0, 0 );
      self.analyzeModule = unwrap analyzeModule default "";
      self.provideNode = nil;
   }

   fn error( mess: str ) mut : __;

   pri fn pushAnalyzingState( state:AnalyzingState ) mut {
      self.analyzingStateQueue.insert( state );
   }

   pri fn popAnalyzingState() mut {
      if #self.analyzingStateQueue == 0 {
         self.error( "underflow analyzingStateQueue" );
      }
      self.analyzingStateQueue.remove(##);
   }

   pri fn inAnalyzingState( state:AnalyzingState ): bool {
      // foreach workstate in self.analyzingStateQueue {
      //    if workstate == state {
      //       return true;
      //    }
      // }
      if #self.analyzingStateQueue > 0 {
         return self.analyzingStateQueue[ #self.analyzingStateQueue ] == state;
      }
      return false;
   }

   pri fn addErrMess( pos: &Parser.Position, mess: str ) mut {
      self.errMessList.insert(
         "%s:%d:%d: error: %s" ( self.parser.getStreamName(),
                                 pos.lineNo, pos.column, mess ) );
   }

   pri fn addWarnMess( pos: &Parser.Position, mess: str ) mut {
      self.warnMessList.insert(
         "%s:%d:%d: warning: %s" ( self.parser.getStreamName(),
                                   pos.lineNo, pos.column, mess ) );
   }

   // pri fn pushScope( classFlag: bool, inheritScope: Ast.Scope!,
   //                   ifScopeList:List<Ast.Scope>! ) mut : Ast.Scope
   pri fn pushScope( classFlag: bool, baseInfo: &Ast.TypeInfo!,
                     interfaceList: &List<&Ast.TypeInfo>! ) mut: Ast.Scope
   {
      // self.scope = new Ast.Scope( self.scope, classFlag, inheritScope, ifScopeList );
      self.scope = Ast.TypeInfo.createScope(
         self.scope, classFlag, baseInfo, interfaceList );
      return self.scope;
   }

   pri fn popScope() mut {
      self.scope = self.scope.get_parent();
   }

   pri fn prepareTentativeSymbol( scope:&Ast.Scope, loopFlag:bool ) mut {
      self.tentativeSymbol = new TentativeSymbol( self.tentativeSymbol, scope, loopFlag );
   }

   pri fn finishTentativeSymbol( complete:bool ) mut {
      self.tentativeSymbol = unwrap self.tentativeSymbol.finish( complete );
   }

   pri fn mergeTentativeSymbol( scope:&Ast.Scope ) mut {
      self.tentativeSymbol.newSet( scope );
   }


   pri fn getCurrentClass() : &Ast.TypeInfo {
      let typeInfo = Ast.headTypeInfo;
      let mut scope = self.scope;
      repeat {
         if! scope.$ownerTypeInfo {
            if _exp.$kind == .Class or _exp.$kind == .Module or _exp.$kind == .IF {
               return _exp;
            }
         }
         scope = scope.$parent;
      } scope.isRoot();
      return typeInfo;
   }


   pri fn getCurrentNamespaceTypeInfo() : &Ast.TypeInfo {
      // let typeInfo = Ast.headTypeInfo;
      // let mut scope = self.scope;
      // repeat {
      //    if! scope.$ownerTypeInfo {
      //       return _exp;
      //    }
      //    scope = scope.$parent;
      // } scope.isRoot();
      // return typeInfo;
      return self.scope.getNamespaceTypeInfo();
   }

   pri fn getCurrentNamespaceScope(): Ast.Scope {
      return unwrap self.getCurrentNamespaceTypeInfo().$scope;
   }

   pri fn pushModule( externalFlag: bool, name:str, mutable: bool ) mut : &Ast.TypeInfo
   {
      let mut typeInfo:&Ast.TypeInfo = Ast.headTypeInfo;

      let modName;
      if name.find( "^@" ## ) {
         modName = name;
      }
      else {
         modName = "@%s" (name);
      }
      
      if! self.scope.getTypeInfoChild( modName ) {
         typeInfo = _exp;
         self.scope = unwrap Ast.getScope( typeInfo );
      }
      else {
         let parentInfo = self.getCurrentNamespaceTypeInfo();
         let mut parentScope = self.scope;
         let mut scope = self.pushScope( true ## );
         typeInfo = Ast.NormalTypeInfo.createModule(
            scope, parentInfo, externalFlag, modName, mutable );

         parentScope.addClass( modName, typeInfo );
      }
      if not self.typeId2ClassMap[ typeInfo.get_typeId() ] {
         let namespace = new Nodes.NamespaceInfo( modName, self.scope, typeInfo );
         self.typeId2ClassMap[ typeInfo.get_typeId() ] = namespace;
      }
      return typeInfo;
   }

   pri fn popModule() mut {
      self.popScope();
   }


   /**
指定クラスの Scope を push し、TypeInfo を取得する。

クラスが生成済みの場合は baseInfo, interfaceList に nil を指定する。
   */
   pri fn pushClass(
      classFlag:bool, abstractFlag: bool, baseInfo: &Ast.TypeInfo!,
      interfaceList: &List<&Ast.TypeInfo>!,
      genTypeList: &List<&Ast.AlternateTypeInfo>, externalFlag: bool, name:str,
      accessMode:Ast.AccessMode, defNamespace: Nodes.NamespaceInfo! ) mut : &Ast.TypeInfo
   {
      let mut typeInfo:&Ast.TypeInfo = Ast.headTypeInfo;
      if! self.scope.getTypeInfoChild( name ) {
         // 宣言済み
         typeInfo = _exp;

         if typeInfo.$abstractFlag ~= abstractFlag {
            self.addErrMess( self.currentToken.pos,
                             "mismatch class abstract for prototpye" );
         }
         if typeInfo.$accessMode ~= accessMode {
            self.addErrMess( self.currentToken.pos,
                             "mismatch class accessmode(%s) for prototpye accessmode(%s)"
                             (accessMode.$_txt, typeInfo.$accessMode.$_txt));
         }
         when! baseInfo {
            if typeInfo.$baseTypeInfo ~= baseInfo {
               self.addErrMess(
                  self.currentToken.pos,
                  "mismatch class base class(%s) for prototpye base class(%s)"
                  (baseInfo.getTxt(##), typeInfo.$baseTypeInfo.getTxt(##)));
            }
         }
         when! interfaceList {
            if #typeInfo.$interfaceList == #interfaceList {
               foreach ifType, index in typeInfo.$interfaceList {
                  if ifType ~= interfaceList[ index ] {
                     self.addErrMess(
                        self.currentToken.pos,
                        "mismatch class interface(%s) for prototpye interface(%s)"
                        (ifType.getTxt(##), interfaceList[ index ]));
                  }
               }
            }
         }



         self.scope = unwrap Ast.getScope( typeInfo );
         switch ( typeInfo.$kind ) {
            case .Class {
               if not classFlag {
                  self.addErrMess(
                     self.currentToken.pos,
                     "define interface already -- %s" (name) );
                  Util.printStackTrace();
               }
            }
            case .IF {
               if classFlag {
                  self.addErrMess(
                     self.currentToken.pos,
                     "define class already -- %s" (name) );
                  Util.printStackTrace();
               }
            }
         }
      }
      else {
         let parentInfo = self.getCurrentNamespaceTypeInfo();

         let mut parentScope = self.scope;
         let mut scope = self.pushScope( true, baseInfo, interfaceList );
         typeInfo = Ast.NormalTypeInfo.createClass(
            classFlag, abstractFlag, scope, baseInfo, interfaceList, genTypeList,
            parentInfo, externalFlag, accessMode, name );

         parentScope.addClass( name, typeInfo );
      }
      foreach genType in genTypeList {
         self.scope.addAlternate( accessMode, genType.$txt, genType );
      }

      let! mut namespace = defNamespace {
         namespace = new Nodes.NamespaceInfo( name, self.scope, typeInfo );
      };
      self.typeId2ClassMap[ typeInfo.get_typeId() ] = namespace;
      return typeInfo;
   }

   pri fn popClass() mut {
      self.popScope();
   }

   pri fn pushbackStr( name: str, statement: str );
   pri fn analyzeDecl( accessMode: Ast.AccessMode, staticFlag:
                       bool, firstToken: &Parser.Token,
                       token: &Parser.Token ): Nodes.Node!;
   pri fn analyzeDeclVar(
      mode:Nodes.DeclVarMode,
      accessMode: Ast.AccessMode, firstToken: &Parser.Token ): Nodes.Node;
   pri fn analyzeDeclFunc(
      declFuncMode: DeclFuncMode, abstractFlag: bool,
      overrideFlag: bool, accessMode: Ast.AccessMode, staticFlag: bool,
      mut classTypeInfo: &Ast.TypeInfo!,
      firstToken: &Parser.Token, name: &Parser.Token! ) : Nodes.Node;
   pri fn analyzeDeclClass(
      abstractFlag:bool, classAccessMode: Ast.AccessMode,
      classToken: &Parser.Token, mode:DeclClassMode ): Nodes.DeclClassNode;
   pri fn analyzeExp( allowNoneType:bool, skipOp2Flag: bool, opLevel: int!,
                      expectType:&Ast.TypeInfo! ): Nodes.Node;
   pri fn analyzeStatement( termTxt: str! ): Nodes.Node!;
   pri fn analyzeExpSymbol(
      firstToken: &Parser.Token, token: &Parser.Token,
      mode: ExpSymbolMode, prefixExp: &Nodes.Node!, skipFlag: bool ): Nodes.Node;
   pri fn analyzeExpList( allowNoneType:bool, skipOp2Flag: bool, expNode: &Nodes.Node!,
                          expectTypeList: &List<&Ast.TypeInfo>!, contExpect: bool! ): Nodes.ExpListNode;
   pri fn analyzeIfUnwrap( firstToken: &Parser.Token ) mut : Nodes.IfUnwrapNode;
   pri fn getTokenNoErr() mut : &Parser.Token;
   pri fn analyzeRefTypeWithSymbol(
      accessMode: Ast.AccessMode, allowDDD:bool,
      refFlag: bool, mutFlag: bool, symbolNode:&Nodes.Node ) mut: Nodes.RefTypeNode;

   pri fn checkAlgeComp( token:&Parser.Token, algeTypeInfo: &Ast.AlgeTypeInfo );


   fn evalMacroOp(
      firstToken: &Parser.Token, macroTypeInfo: &Ast.TypeInfo,
      expList: &Nodes.ExpListNode!, evalMacroCallback:EvalMacroCallback ) mut;
   fn prepareExpCall(
      position:&Parser.Position, funcTypeInfo:&Ast.TypeInfo,
      genericTypeList:&List<&Ast.TypeInfo>, genericsClass:&Ast.TypeInfo ) mut:
      Map<&Ast.TypeInfo,&Ast.TypeInfo>, &Nodes.ExpListNode!;

   pri fn addLocalVar(
      pos:&Parser.Position, argFlag:bool, canBeLeft:bool,
      name:str, typeInfo: &Ast.TypeInfo, mutable:Ast.MutMode, allowShadow:bool! ) mut:
      &Ast.SymbolInfo
   {
      if not allowShadow {
         if self.scope.getSymbolTypeInfo( name, self.scope, self.moduleScope ) {
            self.addErrMess( pos, "shadowing variable -- %s" (name) );
         }
      }
      return self.scope.addLocalVar( argFlag, canBeLeft, name, typeInfo, mutable );
   }


   fn checkImplicitCast(
      alt2typeMap:Map<&Ast.TypeInfo,&Ast.TypeInfo>,
      dstTypeList:&List<&Ast.TypeInfo>, expListNode:&Nodes.ExpListNode,
      callback:checkImplicitCastCallback ) mut : Nodes.ExpListNode!;
}


let mut op2levelMap:Map<str,int> = {};
let mut op1levelMap:Map<str,int> = {};

/** 最高優先度 */
let mut opTopLevel = 0;

{
   let mut opLevelBase = 0;
   fn regOpLevel( opnum: int, opList: str[@] ) {
      opLevelBase = opLevelBase + 1;
      if opnum == 1 {
         foreach op in opList {
            op1levelMap[ op ] = opLevelBase;
         }
      }
      else {
         foreach op in opList {
            op2levelMap[ op ] = opLevelBase;
         }
      }
   }
   regOpLevel( 2, [@ "=" ] );
   regOpLevel( 2, [@ "or" ] );
   regOpLevel( 2, [@ "and" ] );
   regOpLevel( 2, [@ "<", ">", "<=", ">=", "~=", "==" ] );
   regOpLevel( 2, [@ "|" ] );
   regOpLevel( 2, [@ "~" ] );
   regOpLevel( 2, [@ "&" ] );
   regOpLevel( 2, [@ "|<<", "|>>" ] );
   regOpLevel( 2, [@ ".." ] );
   regOpLevel( 2, [@ "+", "-" ] );
   regOpLevel( 2, [@ "*", "/", "//", "%" ] );
   regOpLevel( 1, [@ "`", ",,", ",,,", ",,,," ] );
   regOpLevel( 1, [@ "not", "#", "-", "~" ] );
   regOpLevel( 1, [@ "^" ] );

   opTopLevel = opLevelBase + 1;
}


let mut quotedChar2Code:Map<str,int> = {};
quotedChar2Code[ 'a' ] = 7;    // \a
quotedChar2Code[ 'b' ] = 8;    // \b
quotedChar2Code[ 't' ] = 9;    // \t
quotedChar2Code[ 'n' ] = 10;   // \t
quotedChar2Code[ 'v' ] = 11;   // \v
quotedChar2Code[ 'f' ] = 12;   // \f
quotedChar2Code[ 'r' ] = 13;   // \r
quotedChar2Code[ '\\' ] = ?\\; // \\
quotedChar2Code[ '"' ] = ?\";  // "
quotedChar2Code[ "'" ] = ?\';  // '

pub fn TransUnit.createModifier(
   typeInfo:&Ast.TypeInfo, mutMode: Ast.MutMode ) : &Ast.TypeInfo
{
   if not self.validMutControl {
      return typeInfo;
   }
   return Ast.NormalTypeInfo.createModifier( typeInfo, mutMode );
}

pub class _MetaInfo {
   pub let __formatVersion:str;
   pub let __buildId:str;
   pub let __typeId2ClassInfoMap: Map<int,Map<str,stem>>;
   pub let __typeInfoList: Map<str,stem>[];
   pub let __varName2InfoMap: Map<str,Map<str,stem>>;
   pub let __funcName2InfoMap: Map<str,stem>;
   pub let __moduleTypeId: int;
   pub let __moduleSymbolKind: int;
   pub let __moduleMutable: bool;
   pub let __dependModuleMap: Map<str,Map<str,stem>>;
   pub let __dependIdMap: Map<int,int[]>;
   pub let __macroName2InfoMap: Map<int,stem>;
}

class MacroMetaArgInfo extend (Mapping) {
   pub let name:str;
   pub let typeId:int;
}
class MacroMetaInfo extend (Mapping) {
   pub let name:str;
   pub let argList:&List<MacroMetaArgInfo>;
   pub let symList:&List<MacroMetaArgInfo>;
   pub let stmtBlock:str!;
   pub let tokenList:&List<&List<stem>>;
}

proto abstract class _TypeInfo extend (Mapping);

class ImportParam {
   pub let transUnit:&TransUnit;
   pub let mut typeId2Scope:Map<int,Ast.Scope>;
   pub let mut typeId2TypeInfo:Map<int,&Ast.TypeInfo>;
   pub let metaInfo:_MetaInfo;
   pub let scope:Ast.Scope;
   pub let moduleTypeInfo: &Ast.TypeInfo;

   pri let typeId2AtomMap:Map<int,&_TypeInfo>;
}

abstract class _TypeInfo extend (Mapping) {
   pub let skind: Ast.SerializeKind;
   pub let parentId: int;
   pub let typeId: int;
   pub fn __init() {
      self.parentId = Ast.rootTypeId;
      self.typeId = Ast.rootTypeId;
      self.skind = .Normal;
   }

   /**
このインスタンスから TypeInfo を生成する。

@param param 作業情報
@return Ast.TypeInfo! 生成した型情報。 失敗した場合は nil。
@return str! エラー情報。成功した場合は nil。
   */
   pub abstract fn createTypeInfo( param:ImportParam ): &Ast.TypeInfo!, str!;
}

pub fn ImportParam.getTypeInfo(typeId:int) mut :&Ast.TypeInfo!, str! {
   if! let typeInfo = self.typeId2TypeInfo[ typeId ] {
      return typeInfo, nil;
   }
   if! let atom = self.typeId2AtomMap[ typeId ] {
      let typeInfo, mess = atom.createTypeInfo( self );
      when! typeInfo {
         self.typeId2TypeInfo[ typeId ] = typeInfo;
      }
      return typeInfo, mess;
   }
   return nil, nil;
}

class _TypeInfoNilable extend _TypeInfo {
   pub let nilable:bool;
   pub let orgTypeId:int;

   pub override fn createTypeInfo( param:ImportParam ): &Ast.TypeInfo!, str!
   {
      //let orgTypeInfo = unwrap param.typeId2TypeInfo[ self.orgTypeId ];
      let orgTypeInfo = unwrap param.getTypeInfo( self.orgTypeId );
      let newTypeInfo = orgTypeInfo.get_nilableTypeInfo();
      param.typeId2TypeInfo[ self.typeId ] = newTypeInfo;
      return newTypeInfo,nil;
   }
}


class _TypeInfoAlias extend _TypeInfo {
   pri let rawTxt:str;
   pri let srcTypeId:int;

   pub override fn createTypeInfo( param:ImportParam ): &Ast.TypeInfo!, str!
   {
      let srcTypeInfo = unwrap param.getTypeInfo( self.srcTypeId );
      let newTypeInfo = Ast.NormalTypeInfo.createAlias(
         self.rawTxt, true, .Pub, param.moduleTypeInfo, srcTypeInfo );
      param.typeId2TypeInfo[ self.typeId ] = newTypeInfo;

      let! mut parentScope = param.typeId2Scope[ self.parentId ] {
         return nil, "not found parentScope %s %s" ( self.parentId, self.rawTxt );
      };
      parentScope.addAliasForType( self.rawTxt, newTypeInfo );


      return newTypeInfo,nil;
   }
}


class _TypeInfoDDD extend _TypeInfo {
   pub let itemTypeId:int;

   pub override fn createTypeInfo( param:ImportParam ): &Ast.TypeInfo!, str!
   {
      //let itemTypeInfo = unwrap param.typeId2TypeInfo[ self.itemTypeId ];
      let itemTypeInfo = unwrap param.getTypeInfo( self.itemTypeId );
      let newTypeInfo = Ast.NormalTypeInfo.createDDD( itemTypeInfo, true );
      param.typeId2TypeInfo[ self.typeId ] = newTypeInfo;
      return newTypeInfo,nil;
   }
}


class _TypeInfoAlternate extend _TypeInfo {
   pub let txt:str;
   pub let accessMode:Ast.AccessMode;
   pub let baseId:int;
   pub let ifList:&List<int>;
   pub let belongClassFlag:bool;
   pub let altIndex:int;

   pub override fn createTypeInfo( param:ImportParam ):
      &Ast.TypeInfo!, str!
   {
      let baseInfo = unwrap param.getTypeInfo( self.baseId );
      let mut interfaceList:List<&Ast.TypeInfo> = [];
      foreach ifTypeId in self.ifList {
         //interfaceList.insert( unwrap param.typeId2TypeInfo[ ifTypeId ] );
         interfaceList.insert( unwrap param.getTypeInfo( ifTypeId ) );
      }
      let newTypeInfo = Ast.NormalTypeInfo.createAlternate(
         self.belongClassFlag, self.altIndex,
         self.txt, self.accessMode, param.moduleTypeInfo, baseInfo, interfaceList );
      param.typeId2TypeInfo[ self.typeId ] = newTypeInfo;
      return newTypeInfo, nil;
   }
}

class _TypeInfoGeneric extend _TypeInfo {
   pub let genSrcTypeId:int;
   pub let genTypeList:&List<int>;

   pub override fn createTypeInfo( param:ImportParam ):
      &Ast.TypeInfo!, str!
   {
      let genSrcTypeInfo = unwrap param.getTypeInfo( self.genSrcTypeId );
      let mut genTypeList:List<&Ast.TypeInfo> = [];
      foreach typeId in self.genTypeList {
         genTypeList.insert( unwrap param.getTypeInfo( typeId ) );
      }
      let newTypeInfo = Ast.NormalTypeInfo.createGeneric(
         genSrcTypeInfo, genTypeList, param.moduleTypeInfo );
      param.typeId2TypeInfo[ self.typeId ] = newTypeInfo;
      return newTypeInfo, nil;
   }
}

class _TypeInfoBox extend _TypeInfo {
   pub let accessMode:Ast.AccessMode;
   pub let boxingType:int;

   pub override fn createTypeInfo( param:ImportParam ):
      &Ast.TypeInfo!, str!
   {
      let boxingType = unwrap param.getTypeInfo( self.boxingType );
      let newTypeInfo = Ast.NormalTypeInfo.createBox( self.accessMode, boxingType );
      param.typeId2TypeInfo[ self.typeId ] = newTypeInfo;
      return newTypeInfo, nil;
   }
}


class _TypeInfoModifier extend _TypeInfo {
   pub let srcTypeId:int;
   pub let mutMode:Ast.MutMode;

   pub override fn createTypeInfo( param:ImportParam ):
      &Ast.TypeInfo!, str!
   {
      //let! srcTypeInfo = param.typeId2TypeInfo[ self.srcTypeId ] {
      let! srcTypeInfo = param.getTypeInfo( self.srcTypeId ) {
         return nil, "not found srcType -- %d, %d" ( self.parentId, self.srcTypeId );
      };
      let newTypeInfo = param.transUnit.createModifier( srcTypeInfo, self.mutMode );
      param.typeId2TypeInfo[ self.typeId ] = newTypeInfo;
      return newTypeInfo, nil;
   }
}

class _TypeInfoModule extend _TypeInfo {
   pub let txt:str;

   pub override fn createTypeInfo( param:ImportParam ): &Ast.TypeInfo!, str!
   {
      let mut parentInfo:&Ast.TypeInfo = Ast.headTypeInfo;
      if self.parentId ~= Ast.rootTypeId {
         //let! workTypeInfo = param.typeId2TypeInfo[ self.parentId ] {
         let! workTypeInfo = param.getTypeInfo( self.parentId ) {
            Util.err( "not found parentInfo %s %s"
                      ( self.parentId, self.txt ) );
         };
         parentInfo = workTypeInfo;
      }
      let! mut parentScope = param.typeId2Scope[ self.parentId ] {
         return nil, "not found parentScope %s %s" ( self.parentId, self.txt );
      };

      let mut newTypeInfo = parentScope.getTypeInfoChild( self.txt );
      if! newTypeInfo {
         param.typeId2Scope[ self.typeId ] = Ast.getScope( _exp );
         if not _exp.$scope {
            return nil, "not found scope %s %s %s %s %s" ( parentScope, self.parentId,
                                                           self.typeId,
                                                           self.txt, _exp.getTxt(##) );
         }
         param.typeId2TypeInfo[ self.typeId ] = _exp;
      }
      else {
         let mut scope = new Ast.Scope( parentScope, true, nil ## );

         let mut mutable = false;
         if self.typeId == param.metaInfo.__moduleTypeId {
            mutable = param.metaInfo.__moduleMutable;
         }
         let workTypeInfo = Ast.NormalTypeInfo.createModule(
            scope, parentInfo, true, self.txt, mutable );

         newTypeInfo = workTypeInfo;
         param.typeId2Scope[ self.typeId ] = scope;
         param.typeId2TypeInfo[ self.typeId ] = workTypeInfo;
         parentScope.addClass( self.txt, workTypeInfo );
      }
      return newTypeInfo, nil;
   }
}

class _TypeInfoNormal extend _TypeInfo {
   pub let abstractFlag: bool;
   pub let baseId:int;
   pub let txt:str;
   pub let staticFlag:bool;
   pub let accessMode:Ast.AccessMode;
   pub let kind:Ast.TypeInfoKind;
   pub let mutMode: Ast.MutMode;
   pub let ifList: int[];
   pub let itemTypeId: int[];
   pub let argTypeId: int[];
   pub let retTypeId: int[];
   pub let children: int[];

   pub override fn createTypeInfo( param:ImportParam ): &Ast.TypeInfo!, str!
   {
      let mut newTypeInfo:&Ast.TypeInfo! = nil;
      if self.parentId ~= Ast.rootTypeId or
         not Ast.builtInTypeIdSet[ self.typeId ] or
         self.kind == Ast.TypeInfoKind.List or
         self.kind == Ast.TypeInfoKind.Array or
         self.kind == Ast.TypeInfoKind.Map or
         self.kind == Ast.TypeInfoKind.Set
      {
         let mut parentInfo:&Ast.TypeInfo = Ast.headTypeInfo;
         if self.parentId ~= Ast.rootTypeId {
            //let! workTypeInfo = param.typeId2TypeInfo[ self.parentId ] {
            let! workTypeInfo = param.getTypeInfo( self.parentId ) {
               return nil, "not found parentInfo %s %s" ( self.parentId, self.txt );
            };
            parentInfo = workTypeInfo;
         }

         let mut itemTypeInfo:List<&Ast.TypeInfo> = [];
         foreach typeId in self.itemTypeId {
            //itemTypeInfo.insert( unwrap param.typeId2TypeInfo[ typeId ] );
            itemTypeInfo.insert( unwrap param.getTypeInfo( typeId ) );
         }
         let mut argTypeInfo:List<&Ast.TypeInfo> = [];
         foreach typeId, index in self.argTypeId {
            //if! let argType = param.typeId2TypeInfo[ typeId ] {
            let argType, mess = param.getTypeInfo( typeId );
            when! argType {
               argTypeInfo.insert( argType );
            }
            else {
               let errmess = "not found arg (index:%d) -- %s.%s, %d, %d. %s"
                   ( index, parentInfo.getTxt(##), self.txt, typeId,
                     #self.argTypeId, mess );
               return nil, errmess;
            }
         }
         let mut retTypeInfo:List<&Ast.TypeInfo> = [];
         foreach typeId in self.retTypeId {
            //retTypeInfo.insert( unwrap param.typeId2TypeInfo[ typeId ] );
            retTypeInfo.insert( unwrap param.getTypeInfo( typeId ) );
         }

         //let baseInfo = unwrap param.typeId2TypeInfo[ self.baseId ];
         let baseInfo = unwrap param.getTypeInfo( self.baseId );
         let mut interfaceList:List<&Ast.TypeInfo> = [];
         foreach ifTypeId in self.ifList {
            //interfaceList.insert( unwrap param.typeId2TypeInfo[ ifTypeId ] );
            interfaceList.insert( unwrap param.getTypeInfo( ifTypeId ) );
         }

         let! mut parentScope = param.typeId2Scope[ self.parentId ] {
            return nil, "not found parentScope %s %s" ( self.parentId, self.txt );
         };

         if self.txt ~= "" {
            newTypeInfo = parentScope.getTypeInfoChild( self.txt );
         }
         if newTypeInfo and ( self.kind == Ast.TypeInfoKind.Class or
                              self.kind == Ast.TypeInfoKind.IF )
         {
            if! newTypeInfo {
               param.typeId2Scope[ self.typeId ] = Ast.getScope( _exp );
               if not _exp.$scope {
                  Util.err( "not found scope %s %s %s %s %s"
                            ( parentScope, self.parentId,
                              self.typeId,
                              self.txt, _exp.getTxt(##) ) );
               }
               param.typeId2TypeInfo[ self.typeId ] = _exp;
            };
         }
         else {
            if self.kind == Ast.TypeInfoKind.Class or
               self.kind == Ast.TypeInfoKind.IF
            {
               let baseScope = unwrap param.typeId2Scope[ self.baseId ];

               let mut scope = new Ast.Scope(
                  parentScope, true, baseScope ## );

               let mut altTypeList:List<&Ast.AlternateTypeInfo> = [];
               foreach itemType in itemTypeInfo {
                  altTypeList.insert( unwrap (itemType@@@Ast.AlternateTypeInfo) );
               }

               let workTypeInfo = Ast.NormalTypeInfo.createClass(
                  self.kind == Ast.TypeInfoKind.Class, self.abstractFlag,
                  scope, baseInfo, interfaceList, altTypeList,
                  parentInfo, true, .Pub, self.txt );
               newTypeInfo = workTypeInfo;
               param.typeId2Scope[ self.typeId ] = scope;


               param.typeId2TypeInfo[ self.typeId ] = workTypeInfo;

               parentScope.addClass( self.txt, workTypeInfo );
            }
            else {
               let mut scope:Ast.Scope! = nil;

               if self.kind == Ast.TypeInfoKind.Func or
                  self.kind == Ast.TypeInfoKind.Method
               {
                  scope = new Ast.Scope( parentScope, false, nil ## );
               }


               let typeInfoKind = self.kind;
               let accessMode = self.accessMode;
               let workTypeInfo = Ast.NormalTypeInfo.create(
                  accessMode,
                  self.abstractFlag, scope, baseInfo,
                  interfaceList, parentInfo, self.staticFlag, typeInfoKind,
                  self.txt, itemTypeInfo, argTypeInfo, retTypeInfo, self.mutMode );
               newTypeInfo = workTypeInfo;

               param.typeId2TypeInfo[ self.typeId ] = workTypeInfo;

               switch self.kind {
                  case .Func, .Method, .Macro, .Form, .FormFunc {
                     let mut symbolKind = Ast.SymbolKind.Fun;
                     switch self.kind {
                        case .Method {
                           symbolKind = Ast.SymbolKind.Mtd;
                        }
                        case .Macro {
                           symbolKind = Ast.SymbolKind.Mac;
                        }
                        case .Form, .FormFunc {
                           symbolKind = Ast.SymbolKind.Typ;
                        }
                     }
                     let mut workParentScope =
                        unwrap param.typeId2Scope[ self.parentId ];
                     workParentScope.add(
                        symbolKind, false, self.kind == .Func,
                        self.txt, workTypeInfo, accessMode,
                        self.staticFlag, .IMut, true );
                     param.typeId2Scope[ self.typeId ] = scope;
                  }
               }
            }
         }
      }
      else {
         newTypeInfo = param.scope.getTypeInfo( self.txt, param.scope, false );
         if not newTypeInfo {
            foreach val, key in self._toMap() {
               Util.errorLog( "error: illegal self %s:%s" ( key, val ) );
            }
         }
         param.typeId2TypeInfo[ self.typeId ] = unwrap newTypeInfo;
      }
      return newTypeInfo, nil;
   }
}

class _TypeInfoEnum extend _TypeInfo {
   pub let txt:str;
   pub let accessMode:Ast.AccessMode;
   pub let valTypeId:int;
   pub let enumValList: Map<str,stem>;

   pub override fn createTypeInfo( param:ImportParam ): &Ast.TypeInfo!, str!
   {
      let accessMode = unwrap Ast.AccessMode._from( self.accessMode );
      //let parentInfo = unwrap param.typeId2TypeInfo[ self.parentId ];
      let parentInfo = unwrap param.getTypeInfo( self.parentId );
      let mut name2EnumValInfo:Map<str,Ast.EnumValInfo> = {};
      let mut parentScope = unwrap Ast.getScope( parentInfo );
      let mut scope = new Ast.Scope( parentScope, true, nil ## );

      param.typeId2Scope[ self.typeId ] = scope;
      let valTypeInfo = unwrap param.getTypeInfo( self.valTypeId );
      let mut enumTypeInfo = Ast.NormalTypeInfo.createEnum(
         scope, parentInfo, true, accessMode, self.txt, valTypeInfo );
      let newTypeInfo = enumTypeInfo;
      param.typeId2TypeInfo[ self.typeId ] = enumTypeInfo;

      fn getEnumLiteral( val:stem ) : Ast.EnumLiteral! {
         switch valTypeInfo {
            case Ast.builtinTypeInt {
               return Ast.EnumLiteral.Int( val@@int );
            }
            case Ast.builtinTypeReal {
               return Ast.EnumLiteral.Real( val@@real );
            }
            case Ast.builtinTypeString {
               return Ast.EnumLiteral.Str( val@@str );
            }
         }
         return nil;
      }
      foreach valData, valName in self.enumValList {
         let! val = getEnumLiteral( valData ) {
            return nil, "unknown enum val type -- %s" (valTypeInfo.getTxt(##));
         };
         enumTypeInfo.addEnumValInfo( new Ast.EnumValInfo( valName, val ) );
         scope.addEnumVal( valName, enumTypeInfo );
      }
      parentScope.addEnum( accessMode, self.txt, enumTypeInfo );
      return newTypeInfo, nil;
   }
}

class _TypeInfoAlgeVal extend (Mapping) {
   pub let name:str;
   pub let typeList:&List<int>;
}

class _TypeInfoAlge extend _TypeInfo {
   pub let txt:str;
   pub let accessMode:Ast.AccessMode;
   pub let algeValList: &List<&_TypeInfoAlgeVal>;

   pub override fn createTypeInfo( param:ImportParam ): &Ast.TypeInfo!, str!
   {
      let accessMode = unwrap Ast.AccessMode._from( self.accessMode );
      //let parentInfo = unwrap param.typeId2TypeInfo[ self.parentId ];
      let parentInfo = unwrap param.getTypeInfo( self.parentId );
      let mut name2AlgeValInfo:Map<str,Ast.AlgeValInfo> = {};
      let mut parentScope = unwrap Ast.getScope( parentInfo );
      let mut scope = new Ast.Scope( parentScope, true, nil ## );

      param.typeId2Scope[ self.typeId ] = scope;
      let mut algeTypeInfo = Ast.NormalTypeInfo.createAlge(
         scope, parentInfo, true, accessMode, self.txt );
      let newTypeInfo = algeTypeInfo;
      param.typeId2TypeInfo[ self.typeId ] = algeTypeInfo;
      foreach valInfo in self.algeValList {
         let mut typeInfoList:List<&Ast.TypeInfo> = [];
         foreach orgTypeId in valInfo.typeList {
            //typeInfoList.insert( unwrap param.typeId2TypeInfo[ orgTypeId ] );
            typeInfoList.insert( unwrap param.getTypeInfo( orgTypeId ) );
         }
         let algeVal = new Ast.AlgeValInfo( valInfo.name, typeInfoList );
         scope.addAlgeVal( valInfo.name, algeTypeInfo );
         algeTypeInfo.addValInfo( algeVal );
      }
      parentScope.addAlge( accessMode, self.txt, algeTypeInfo );
      return newTypeInfo, nil;
   }
}


macro _DefBuiltinFuncType( class2symMapList:List<Map<str,Map<str,Map<str,List<str>>>>> )
{
   {
      let mut defMemberList:List<stat> = [];
      let mut initMemberList:List<stat> = [];
      let mut declProcessList:List<stat> = [];
      let mut caseList:List<stat> = [];
      foreach class2symMap in class2symMapList {
         forsort symbolMap, genClassName in class2symMap {
            let className = genClassName.gsub( "<.*", "" );
            let mut subcaseList:List<stat> = [];
            
            forsort symbolInfo, funcName in symbolMap {
               //let symbolName = (unwrap symbolInfo.field)[1];
               let symbolName = "%s_%s" ( className ~= "" and className.lower() or "lune",
                                          funcName );
               defMemberList.insert( `{
                  pub let mut ,,,symbolName:&Ast.TypeInfo;
               } );
               initMemberList.insert( `{
                  self.,,,symbolName = Ast.headTypeInfo;
               });
               subcaseList.insert( `{
                  case ,,funcName ~~{
                     builtinFunc. ,,,symbolName = typeInfo;
                  }
               });
            }
            declProcessList.insert( `{
               fn ,,,"process_%s" (className) ~~ () {
                  switch fieldName {
                     ,,subcaseList
                  }
               }
            });
            caseList.insert( `{
               case ,,className {
                  ,,,"process_%s" (className) ~~ ();
               }
            });
         }
      }
   }
   /**
builtin 関数の TypeInfo を保持するクラス。
   */
   pub class BuiltinFuncType {
      ,,defMemberList;

      pub fn __init() {
         ,,initMemberList;
      }
   }

   let mut builtinFunc = new BuiltinFuncType();

   pub fn getBuiltinFunc() : &BuiltinFuncType {
      return builtinFunc;
   }
   
   fn setupBuiltinTypeInfo( name:str, fieldName:str, typeInfo:&Ast.TypeInfo ) {
      ,,declProcessList;

      switch name {
         ,,caseList
      }
   }

   fn getBuiltInInfo(): &List<&Map<str,&Map<str,&Map<str,&List<str>>>>> {
      return ,,class2symMapList;
   }
}


_DefBuiltinFuncType( [
   {
      "": {
         "type": { "arg": [ "&stem!" ], "ret": ["str"] },
         "error": { "arg": [ "str" ], "ret": [ "__" ] },
         "print": { "arg": [ "&..." ], "ret": [] },
         "tonumber": { "arg": [ "str", "int!" ], "ret": ["real!"] },
         "tostring": { "arg": [ "&stem" ], "ret": ["str"] },
         "load": { "arg": [ "str", "str!", "str!", "stem!" ], "ret": ["form!", "str!"] },
         "loadfile": { "arg": [ "str" ], "ret": ["form!", "str!"] },
         "require": { "arg": [ "str" ], "ret": ["stem!"] },
         "collectgarbage": { "arg": [ ], "ret": [] },
         "_fcall": { "arg": [ "form", "&..." ], "ret": [""] },
         "_load": { "arg": [ "str", "stem!" ], "ret": ["form!", "str!"] },
         "_kind": { "arg": [ "stem!" ], "ret":[ "int" ] },
      },
   },
   {
      "iStream": {
         "__attrib": { "type": [ "interface" ] },
         "read": { "type": [ "mut" ], "arg": [ "stem!" ], "ret": [ "str!" ] },
         "close": { "type": [ "mut" ], "arg": [], "ret": [] },
      },
   },
   {
      "oStream": {
         "__attrib": { "type": [ "interface" ] },
         "write": { "type": [ "mut" ], "arg": [ "str" ], "ret": [ "stem!", "str!"] },
         "close": { "type": [ "mut" ], "arg": [], "ret": [] },
         "flush": { "type": [ "mut" ], "arg": [], "ret": [] },
      },
   },
   {
      "luaStream": {
         "__attrib": { "inplements": [ "iStream", "oStream" ] },
         "read": { "type": [ "mut" ], "arg": [ "stem!" ], "ret": [ "str!" ] },
         "write": { "type": [ "mut" ], "arg": [ "str" ], "ret": [ "stem!", "str!" ] },
         "close": { "type": [ "mut" ], "arg": [], "ret": [] },
         "flush": { "type": [ "mut" ], "arg": [], "ret": [] },
         "seek": { "type": [ "mut" ], "arg": [ "str", "int"], "ret": [ "int!", "str!" ] },
      },
   },
   {
      "Mapping": {
         "__attrib": { "type": [ "interface" ] },
         "_toMap": { "type": [ "method" ], "arg": [], "ret": [ ] },
      },
   },
   {
      "io": {
         "stdin": { "type": [ "member" ], "typeInfo": [ "iStream" ] },
         "stdout": { "type": [ "member" ], "typeInfo": [ "oStream" ] },
         "stderr": { "type": [ "member" ], "typeInfo": [ "oStream" ] },
         "open": { "arg": [ "str", "str!" ], "ret": ["luaStream!"] },
         "popen": { "arg": [ "str" ], "ret": ["luaStream!"] },
      },
   },
   {
      "package": {
         "path": { "type": [ "member" ], "typeInfo": [ "str" ] },
         "searchpath": { "arg": [ "str", "str" ], "ret": ["str!"] },
      },
   },
   {

      "os": {
         "clock": { "arg": [], "ret": ["real"] },
         "exit": { "arg": [ "int!" ], "ret": [ "__" ] },
         "remove": {"arg": [ "str" ], "ret": [ "bool!", "str!"] },
         "date": {"arg": [ "str!", "stem!" ], "ret": [ "stem!"] },
         "time": {"arg": [ "stem!" ], "ret": [ "stem!"] },
         "difftime": {"arg": [ "stem", "stem" ], "ret": [ "int"] },
         "rename": {"arg": [ "str", "str" ], "ret": [ "stem!", "str!"] },
      },
   },
   {
      "string": {
         "find": { "arg": [ "str", "str", "int!", "bool!" ], "ret": ["int!", "int!"] },
         "byte": { "arg": [ "str", "int!", "int!" ], "ret": ["int"] },
         "format": { "arg": [ "str", "..." ], "ret": ["str"] },
         "rep": { "arg": [ "str", "int" ], "ret": ["str"] },
         "gmatch": { "arg": [ "str", "str" ], "ret": ["form", "stem!", "stem!"] },
         "gsub": { "arg": [ "str", "str", "str" ], "ret": ["str", "int"] },
         "sub": { "arg": [ "str", "int", "int!" ], "ret": ["str"] },
         "dump": { "arg": [ "form", "bool!" ], "ret": ["str"] },
         "lower": { "arg": [ "str" ], "ret": ["str"] },
         "upper": { "arg": [ "str" ], "ret": ["str"] },
         "reverse": { "arg": [ "str" ], "ret": ["str"] },
      },
   },
   {
      "str": {
         "find": { "type": [ "method" ], "arg": [ "str", "int!", "bool!" ], "ret": ["int!", "int!"] },
         "byte": { "type": [ "method" ], "arg": [ "int!","int!" ], "ret": ["int"] },
         "format": { "type": [ "method" ], "arg": [ "&..." ], "ret": ["str"] },
         "rep": { "type": [ "method" ], "arg": [ "int" ], "ret": ["str"] },
         "gmatch": { "type": [ "method" ], "arg": [ "str" ], "ret": ["form", "stem!", "stem!"] },
         "gsub": { "type": [ "method" ], "arg": [ "str", "str" ], "ret": ["str", "int"] },
         "sub": { "type": [ "method" ], "arg": [ "int", "int!" ], "ret": ["str"] },
         "lower": { "type": [ "method" ], "arg": [ ], "ret": ["str"] },
         "upper": { "type": [ "method" ], "arg": [ ], "ret": ["str"] },
         "reverse": { "type": [ "method" ], "arg": [ ], "ret": ["str"] },
      },
   },
   {
      "List<T>": {
         "insert": { "type": [ "mut" ], "arg": [ "&T" ], "ret": [""] },
         "remove": { "type": [ "mut" ], "arg": [ "int!" ], "ret": ["T!"] },
         "unpack": { "type": [ "method" ], "arg": [ ], "ret": ["..."] },
         "sort": { "type": [ "mut" ], "arg": [ "form!" ], "ret": [] },
      },
   },
   {
      "Array<T>": {
         "unpack": { "type": [ "method" ], "arg": [ ], "ret": ["..."] },
         "sort": { "type": [ "mut" ], "arg": [ "form!" ], "ret": [] },
      },
   },
   {
      "Set<T>": {
         "add": { "type": [ "mut" ], "arg": [ "T" ], "ret": [] },
         "del": { "type": [ "mut" ], "arg": [ "T" ], "ret": [] },
         "has": { "type": [ "method" ], "arg": [ "T" ], "ret": [ "bool" ] },
         "and": { "type": [ "mut" ], "arg": [ "&Set<T>" ], "ret": [ "Set<T>" ] },
         "or": { "type": [ "mut" ], "arg": [ "&Set<T>" ], "ret": [ "Set<T>" ] },
         "sub": { "type": [ "mut" ], "arg": [ "&Set<T>" ], "ret": [ "Set<T>" ] },
         "clone": { "type": [ "method" ], "arg": [], "ret": [ "Set<T>" ] },
         "len": { "type": [ "method" ], "arg": [], "ret": [ "int" ] },
      },
   },
   {
      "math": {
         "random": { "arg": [ "int!", "int!" ], "ret": ["real"] },
         "randomseed": { "arg": [ "int!" ], "ret": [] },
      }
   },
   {
      "debug": {
         "getinfo": { "arg": ["int"], "ret": ["stem!"] },
         "getlocal": { "arg": ["int", "int"], "ret": ["str!", "stem!"] },
      },
   },
   {
      "Nilable": {
         "val": { "type": [ "method" ], "arg": [ ], "ret": [ "_T!" ] },
      }
   }
] );
   
pub fn isStrFormFunc( typeInfo:&Ast.TypeInfo ):bool {
   if typeInfo.equals( builtinFunc.string_format ## ) {
      return true;
   }
   return false;
}


let mut readyBuiltin = false;

fn TransUnit.registBuiltInScope() mut {
   if readyBuiltin {
      return;
   }
   readyBuiltin = true;

   let builtInInfo = getBuiltInInfo();

   fn getTypeInfo( mut typeName:str ) : &Ast.TypeInfo {

      switch typeName {
         case "_T" {
            return Ast.builtinTypeBox.$boxingType;
         }
         case "_T!" {
            return Ast.builtinTypeBox.$boxingType.$nilableTypeInfo;
         }
      }

      fn getTypeInfoFromScope(
         scope:&Ast.Scope, symbol:str, genTyeList:List<&Ast.TypeInfo> ) :
         &Ast.TypeInfo!
      {
         let! typeInfo = scope.getTypeInfo( symbol, scope, false ) {
            return nil;
         };
         return typeInfo;
      }

      let mut mutable = true;
      if typeName.find( "^&" ## ) {
         mutable = false;
         typeName = typeName.gsub( "^&", "" );
      }
      let mut genTypeList:List<&Ast.TypeInfo> = [];
      let index, endIndex = typeName.find( "[%w]+<" ## );
      when! index, endIndex {
         let mut genTypeName = typeName.sub( endIndex ## );
         if! let tailIndex = genTypeName.find( "[,>]" ## ) {
            let genType = getTypeInfo( genTypeName.sub( 2, tailIndex - 1 ) );
            genTypeList.insert( genType );
         }
         typeName = typeName.sub( 1, endIndex - 1 );
      }


      let mut typeInfo:&Ast.TypeInfo = Ast.headTypeInfo;
      if typeName.find( "!$" ## ) {
         let orgTypeName = typeName.gsub( "!$", "" );
         if! getTypeInfoFromScope( self.scope, orgTypeName, genTypeList ) {
            typeInfo = _exp;
         }
         else {
            Util.err( "not found builtin -- %s" (orgTypeName) );
         }
         typeInfo = typeInfo.$nilableTypeInfo;
      }
      else {
         if! getTypeInfoFromScope( self.scope, typeName, genTypeList ) {
            typeInfo = _exp;
         }
         else {
            Util.err( "not found builtin -- %s" (typeName) );
         }
      }
      if mutable {
         return typeInfo;
      }
      typeInfo = self.createModifier( typeInfo, .IMut );
      return typeInfo;
   }

   fn processField( name:str, fieldName:str, info:&Map<str,&List<str>>,
                    parentInfo:&Ast.TypeInfo )
   {
      if self.targetLuaVer.isSupport( "%s.%s" (name, fieldName) ) {
         if info.type$[1] == "member" {
            self.scope.addMember(
               fieldName,
               getTypeInfo( unwrap info.typeInfo$[1] ), .Pub, true, .Mut );
         }
         else {
            let mut argTypeList: List<&Ast.TypeInfo> = [];
            foreach argType in unwrap info[ "arg" ] {
               argTypeList.insert( getTypeInfo( argType ) );
            }

            let mut retTypeList: List<&Ast.TypeInfo> = [];
            foreach retType in unwrap info[ "ret" ] {
               let retTypeInfo = getTypeInfo( retType );
               retTypeList.insert( retTypeInfo );
            }

            let funcType = info.type$[1];
            let methodFlag = funcType == "method" or funcType == "mut";
            let mutable = funcType == "mut";

            self.pushScope( false ## );

            let typeInfo = Ast.NormalTypeInfo.createFunc(
               false, true, self.scope,
               methodFlag and Ast.TypeInfoKind.Method or Ast.TypeInfoKind.Func,
               parentInfo, false, true, not methodFlag, .Pub,
               fieldName, nil, argTypeList, retTypeList, mutable );

            self.popScope();

            Ast.builtInTypeIdSet[ typeInfo.get_typeId() ] = typeInfo;
            if typeInfo.$nilableTypeInfo ~= Ast.headTypeInfo {
               Ast.builtInTypeIdSet[ typeInfo.$nilableTypeInfo.$typeId ] = typeInfo.$nilableTypeInfo;
            }
            self.scope.add(
               methodFlag and Ast.SymbolKind.Mtd or Ast.SymbolKind.Fun,
               not methodFlag, not methodFlag,
               fieldName, typeInfo, .Pub, not methodFlag,
               mutable and Ast.MutMode.Mut or Ast.MutMode.IMut, true );

            setupBuiltinTypeInfo( name, fieldName, typeInfo );
         }
      }
   }

   self.scope = Ast.rootScope;

   let mut builtinModuleName2Scope:Map<str,Ast.Scope> = {};

   let mapType = Ast.NormalTypeInfo.createMap(
      .Pub, Ast.headTypeInfo, Ast.builtinTypeString, Ast.builtinTypeStem, .Mut );
   self.scope.addVar( .Global, "_ENV", mapType, .IMutRe, true );
   self.scope.addVar( .Global, "_G", mapType, .IMutRe, true );
   self.scope.addVar( .Global, "_VERSION", Ast.builtinTypeString, .IMut, true );
   self.scope.addVar( .Global, "__mod__", Ast.builtinTypeString, .IMut, true );
   self.scope.addVar( .Global, "__line__", Ast.builtinTypeInt, .IMut, true );
   //self.scope.addVar( .Global, "__func__", Ast.builtinTypeString, false, true );

   foreach builtinClassInfo in builtInInfo {
      foreach name2FieldInfo, className in builtinClassInfo {
         let mut name = className;
         let mut genTypeList:List<&Ast.AlternateTypeInfo> = [];
         if className.find( "<" ## ) {
            name = "";
            apply token of className.gmatch( "[^<>,%s]+" ) {
               if #name == 0 {
                  name = token;
               }
               else {
                  genTypeList.insert(
                     Ast.NormalTypeInfo.createAlternate(
                        true, #genTypeList + 1,
                        token, .Pri, self.moduleType ## ) );
               }
            }
         }
         let mut parentInfo:&Ast.TypeInfo = Ast.headTypeInfo;
         if name ~= "" {
            let mut classFlag = true;
            if name2FieldInfo$.__attrib$.type$[1] == "interface" {
               classFlag = false;
            }
            let mut interfaceList:List<&Ast.TypeInfo> = [];
            if! name2FieldInfo$.__attrib$.inplements {
               foreach ifname in _exp {
                  let ifType = getTypeInfo( ifname );
                  interfaceList.insert( ifType );
               }
            }
            parentInfo = self.pushClass(
               classFlag, false, nil, interfaceList, genTypeList, true, name, .Pub ## );
            Ast.builtInTypeIdSet[ parentInfo.get_typeId() ] = parentInfo;
            Ast.builtInTypeIdSet[ parentInfo.$nilableTypeInfo.$typeId ] =
               parentInfo.$nilableTypeInfo;
         }
         if not builtinModuleName2Scope[ name ]
         {
            if name ~= "" and getTypeInfo( name ) {
               builtinModuleName2Scope[ name ] = self.scope;
            }

            // typeid が一定になるようにソートする
            forsort info, fieldName in name2FieldInfo {
               switch fieldName {
                  case "__attrib" {
                  }
                  default {
                     processField( name, fieldName, info, parentInfo );
                  }
               }
            }
         }
         if name ~= "" {
            self.popClass();
         }
      }
   }

   self.scope = self.topScope;
}

fn TransUnit.error( mess: str ) mut : __ {
   let mut pos:&Parser.Position = new Parser.Position( 0, 0 );
   let mut txt = "";
   if self.currentToken ~= Parser.getEofToken() {
      pos = self.currentToken.pos;
      txt = self.currentToken.txt;
   }
   else {
      if #self.usedTokenList > 0 {
         let token = self.usedTokenList[ #self.usedTokenList ];
         pos = token.pos;
         txt = token.txt;
      }
   }
   self.addErrMess(pos, mess);
   // Util.err( "%s:%d:%d: error:(%s) %s"
   //           ( self.parser.getStreamName(),
   //             pospos.lineNo, pos.column, txt, mess ) );

   foreach mess in self.errMessList {
      Util.errorLog( mess );
   }
   foreach mess in self.warnMessList {
      Util.errorLog( mess );
   }
   if self.macroMode ~= .None {
      print( "------ near code -----" );
      let mut code = "";
      for index = #self.usedTokenList - 20, #self.usedTokenList {
         if index > 1 {
            code = "%s %s" ( code, self.usedTokenList[ index ].txt );
         }
      }
      print( code .. self.currentToken.txt );
      print( "------" );
   }
   
   Util.err( "has error" );
}

fn TransUnit.createNoneNode( pos: &Parser.Position ) mut : Nodes.Node {
   //return self.createNode( nodeKindNone, pos, [ builtinTypeNone ], {} );
   return Nodes.NoneNode.create( self.nodeManager, pos, [ Ast.builtinTypeNone ] );
}

fn TransUnit.pushbackToken( token: &Parser.Token ) mut {
   if token ~= Parser.getEofToken() {
      self.pushbackList.insert( token );
   }
   self.currentToken = self.usedTokenList[ #self.usedTokenList ];
}

fn expandVal( tokenList:List<&Parser.Token>, val: stem!, pos: &Parser.Position ): str! {
   when! val {
      switch type( val ) {
         case "boolean" {
            let token = "%s" (val);
            let kind = Parser.TokenKind.Kywd;
            tokenList.insert( new Parser.Token( kind, token, pos, false ## ) );
         }
         case "number" {
            let num = "%g" (val@@real);
            let mut kind = Parser.TokenKind.Int;
            if string.find( num, ".", 1, true ) {
               kind = Parser.TokenKind.Real;
            }
            tokenList.insert( new Parser.Token( kind, num, pos, false ## ) );
         }
         case "string" {
            tokenList.insert(
               new Parser.Token(
                  Parser.TokenKind.Str, '[[%s]]' (val ), pos, false ## ) );
            // val 中に \n 等の制御コードが入ると正常に処理されない。
            // val 内の制御コードを \xXX に変換する必要がある。
         }
         // case "table" {
         //    tokenList.insert(
         //       new Parser.Token( Parser.TokenKind.Dlmt, "{", pos, false ## ) );
         //    foreach item, key in val@@stem![] {
         //       tokenList.insert(
         //          new Parser.Token( Parser.TokenKind.Dlmt, "[", pos, false ## ) );

         //       if! let mess = expandVal( tokenList, key, pos ) {
         //          return mess;
         //       }

         //       tokenList.insert(
         //          new Parser.Token( Parser.TokenKind.Dlmt, "]", pos, false ## ) );

         //       tokenList.insert(
         //          new Parser.Token( Parser.TokenKind.Dlmt, "=", pos, false ## ) );
               
         //       if! let mess = expandVal( tokenList, item, pos ) {
         //          return mess;
         //       }
         //       tokenList.insert(
         //          new Parser.Token( Parser.TokenKind.Dlmt, ",", pos, false ## ) );
         //    }
         //    tokenList.insert(
         //       new Parser.Token( Parser.TokenKind.Dlmt, "}", pos, false ## ) );
         // }
         default {
            return "not support ,, List -- %s" ( type( val ) );
         }
      }
   }
   return nil;
}

fn TransUnit.newPushback( tokenList: List<&Parser.Token> ) mut {
   for index = #tokenList, 1, -1  {
      self.pushbackList.insert( tokenList[ index ] );
   }
   self.currentToken = self.usedTokenList[ #self.usedTokenList ];
}

fn TransUnit.expandMacroVal( mut token:&Parser.Token ) mut : &Parser.Token
{
   let tokenTxt = token.txt;
   if tokenTxt == ',,' or tokenTxt == ',,,' or tokenTxt == ',,,,' {
      let mut nextToken = self.getTokenNoErr();

      let! macroVal = self.symbol2ValueMapForMacro[ nextToken.txt ] {
         self.error( "unknown macro val %s" (nextToken.txt) );
      };

      if tokenTxt == ',,' {
         //Util.errorLog( "nextToken: %s" ( nextToken.txt ) );
         if macroVal.typeInfo.equals( Ast.builtinTypeSymbol ## ) {
            let txtList = (unwrap macroVal.val)@@str[];
            for index = #txtList, 1, -1 {
               nextToken = new Parser.Token(
                  nextToken.kind, txtList[ index ], nextToken.pos, false ## );
               self.pushbackToken( nextToken );
            }
         }
         elseif macroVal.typeInfo.equals( Ast.builtinTypeStat ## ) {
            self.pushbackStr( "macroVal %s" (nextToken.txt),
                              (unwrap macroVal.val)@@str );
         }
         elseif macroVal.typeInfo.get_kind() == .Array or
            macroVal.typeInfo.get_kind() == .List
         {
            if macroVal.typeInfo.$itemTypeInfoList[ 1 ].equals( Ast.builtinTypeStat ##) {
               let strList = (unwrap macroVal.val)@@str[];
               for index = #strList, 1, -1 {
                  self.pushbackStr(
                     "macroVal %s[%d]" (nextToken.txt, index),
                     strList[ index ] );
               }
            }
            else {
               let mut tokenList: List<&Parser.Token> = [];

               if! let argNode = macroVal.argNode {
                  if not argNode.setupLiteralTokenList( tokenList ) {
                     self.error( "illegal macro val ,, -- %s" (nextToken.txt) );
                  }
               }
               else {
                  self.error( "not support ,, -- %s" (nextToken.txt) );
               }

               self.newPushback( tokenList );
            }
         }
         elseif macroVal.typeInfo.get_kind() == .Enum {
            let enumTypeInfo = unwrap macroVal.typeInfo@@@Ast.EnumTypeInfo;
            let fullname = macroVal.typeInfo.getFullName(
               self.importModule2ModuleInfoCurrent, true );
            let mut nameList:List<str> = [];
            apply name of fullname.gmatch( "[^%.]+" ) {
               nameList.insert( name );
            }
            let enumValInfo = unwrap enumTypeInfo.$val2EnumValInfo[ unwrap macroVal.val ];
            nextToken = new Parser.Token(
               .Symb, enumValInfo.$name, nextToken.pos, false ## );
            self.pushbackToken( nextToken );
            for index = #nameList, 1, -1 {
               nextToken = new Parser.Token( .Dlmt, ".", nextToken.pos, false ## );
               self.pushbackToken( nextToken );
               nextToken = new Parser.Token(
                  .Symb, nameList[ index ], nextToken.pos, false ## );
               self.pushbackToken( nextToken );
            }
         }
         else {
            let mut tokenList: List<&Parser.Token> = [];

            if! let argNode = macroVal.argNode {
               if not argNode.setupLiteralTokenList( tokenList ) {
                  self.error( "illegal macro val ,, -- %s" (nextToken.txt) );
               }
            }
            else {
               expandVal( tokenList, macroVal.val, nextToken.pos );
            }

            self.newPushback( tokenList );
         }
      }
      elseif tokenTxt == ',,,' {
         if macroVal.typeInfo.equals( Ast.builtinTypeString ## ) {
            nextToken = new Parser.Token(
               nextToken.kind, (unwrap macroVal.val)@@str, nextToken.pos, false ## );
            self.pushbackToken( nextToken );
         }
      }
      elseif tokenTxt == ',,,,' {
         if macroVal.typeInfo.equals( Ast.builtinTypeSymbol ## ) {
            let txtList = (unwrap macroVal.val)@@str[];
            let mut newToken = "";
            foreach txt in txtList {
               newToken = "%s%s" (newToken, txt);
            }
            nextToken = new Parser.Token(
               Parser.TokenKind.Str, "'%s'" (newToken), nextToken.pos, false ## );
            self.pushbackToken( nextToken );
         }
         elseif macroVal.typeInfo.equals( Ast.builtinTypeStat ## ) {
            nextToken = new Parser.Token(
               Parser.TokenKind.Str,
               "'%s'" (unwrap macroVal.val), nextToken.pos, false ##);
            self.pushbackToken( nextToken );
         }
         else {
            self.error( "not support this symbol -- %s%s"
                        (tokenTxt, nextToken.txt) );
         }
      }
      nextToken = self.getTokenNoErr();

      token = nextToken;
   }
   return token;
}

fn TransUnit.getTokenNoErr() mut : &Parser.Token {
   if #self.pushbackList > 0 {
      if self.currentToken ~= Parser.getEofToken() {
         self.usedTokenList.insert( self.currentToken );
      }
      self.currentToken = self.pushbackList[ #self.pushbackList ];
      self.pushbackList.remove(##);
      return self.currentToken;
   }

   let mut commentList:List<&Parser.Token> = [];
   let mut token:&Parser.Token! = nil;
   while true {
      token = self.parser.getToken();
      if! token {
         if _exp.kind ~= Parser.TokenKind.Cmnt {
            break;
         }
         commentList.insert( _exp );
      }
      else {
         break;
      }
   }

   if! token {
      if self.macroMode == .Expand {
         token = self.expandMacroVal( _exp );
      }
   }
   // if! token {
   //    _exp.set_commentList( commentList );
   // }

   self.usedTokenList.insert( self.currentToken );
   self.currentToken = unwrap token default Parser.getEofToken();

   return self.currentToken;
}



fn TransUnit.getToken( allowEof:bool! ) mut : &Parser.Token {
   let token = self.getTokenNoErr();
   if token == Parser.getEofToken() {
      if allowEof {
         return Parser.getEofToken();
      }
      self.error( "EOF" );
   };

   // if self.macroMode == "expand"  {
   //     Util.errorLog( "getToken %s" (token.txt) );
   // }

   self.currentToken = token;
   return token;
}

fn TransUnit.pushback() mut {
   if self.currentToken ~= Parser.getEofToken() {
      self.pushbackList.insert( self.currentToken );
   }
   self.currentToken = self.usedTokenList[ #self.usedTokenList ];
   self.usedTokenList.remove(##);
}

fn TransUnit.pushbackStr( name: str, statement: str ) mut {
   let mut memStream = new Parser.TxtStream( statement );
   let mut parser = new Parser.StreamParser( memStream, name, false );

   let mut list:List<&Parser.Token> = [];
   while true {
      if! parser.getToken() {
         list.insert( _exp );
      }
      else {
         break;
      }
   }
   for index = #list, 1, -1  {
      self.pushbackToken( list[ index ] );
   }
}

enum SymbolMode {
   /** _ で始まるシンボル */
   Must_,
   /** _ で始まってはいけないシンボル */
   MustNot_,
}

let specialSymbolMap = {
   "__init":true,
   "__free":true,
   "__":true,
   "_exp":true,
};

fn TransUnit.checkSymbol( token: &Parser.Token, mode:SymbolMode ) mut : &Parser.Token {
   if token.kind ~= Parser.TokenKind.Symb and
      token.kind ~= Parser.TokenKind.Kywd and
      token.kind ~= Parser.TokenKind.Type
   {
      self.addErrMess( token.pos, "illegal symbol -- '%s'" ( token.txt) );
   }
   let frontChar = token.txt[1];
   if mode == .Must_ and frontChar ~= ?_ {
      self.addErrMess(
         token.pos, "macro name must begin with '_' -- '%s'" ( token.txt ) );
   }
   elseif mode == .MustNot_ and frontChar == ?_ {
      if not self.ignoreToCheckSymbol_ {
         if not specialSymbolMap[ token.txt ] {
            self.addErrMess(
               token.pos, "symbol must not begin with '_' -- '%s'" ( token.txt ) );
         }
      }
   }
   elseif token.txt == "self" {
      self.addErrMess( token.pos, "this symbol is special keyword -- %s" (token.txt) );
   }
   return token;
}

fn TransUnit.getSymbolToken(mode:SymbolMode) mut : &Parser.Token {
   return self.checkSymbol( self.getToken(##), mode );
}


fn TransUnit.checkToken( token: &Parser.Token, txt: str ) mut : &Parser.Token {
   if token.txt ~= txt {
      self.error( "not found -- %s" ( txt ) );
   }
   return token;
}

fn TransUnit.checkNextToken( txt: str ) mut : &Parser.Token {
   return self.checkToken( self.getToken(##), txt );
}

/**
次のトークンが、スペースの空きがなく、連続したトークンであるか確認する。

@return &Parser.Token 次のトークン
@return bool 連続したトークンだった場合 true
*/
fn TransUnit.getContinueToken() mut : &Parser.Token, bool {
   let token = self.getToken(##);
   return token, token.consecutive;

   // let! prevToken = self.currentToken {
   //    return self.getToken(), false;
   // };
   // let token = self.getToken();

   // if prevToken.pos.lineNo ~= token.pos.lineNo or
   //    prevToken.pos.column + #prevToken.txt ~= token.pos.column
   // {
   //    return token, false;
   // }

   // return token, true;
}


fn TransUnit.analyzeStatementList(
   stmtList: List<&Nodes.Node>, termTxt: str! ) mut : &Nodes.Node!
{
   let mut breakKind = Nodes.BreakKind.None;
   if #stmtList > 0 {
      breakKind = stmtList[ #stmtList ].getBreakKind( .Normal );
   }

   let mut lastStatement:&Nodes.Node! = nil;
   while true {
      let statement = self.analyzeStatement( termTxt );
      if! statement {
         if breakKind ~= .None {
            self.addErrMess( _exp.$pos,
                             "This statement is not reached -- %s" (breakKind.$_txt) );
         }
         stmtList.insert( _exp );
         lastStatement = statement;
         breakKind = _exp.getBreakKind( .Normal );
      }
      else {
         break;
      }
   }
   return lastStatement;
}

fn TransUnit.analyzeStatementListSubfile( stmtList: List<&Nodes.Node> ) mut : &Nodes.Node! {
   let statement = self.analyzeStatement(##);

   if! statement {
      if _exp.$kind ~= Nodes.NodeKind.$Subfile {
         self.error( "subfile must have 'subfile' declaration at top." );
      }
   }
   else {
      self.error( "subfile must have 'subfile' declaration at top." );
   }

   return self.analyzeStatementList( stmtList ## );
}

fn TransUnit.analyzeLuneControl(
   firstToken: &Parser.Token ) mut : Nodes.LuneControlNode!
{
   let mut node:Nodes.LuneControlNode! = nil;
   let nextToken = self.getToken(##);
   switch ( nextToken.txt ) {
      case LuneControl.Pragma.disable_mut_control {
         self.validMutControl = false;
      }
      case LuneControl.Pragma.ignore_symbol_ {
         self.ignoreToCheckSymbol_ = true;
      }
      case LuneControl.Pragma.load__lune_module {
         node = Nodes.LuneControlNode.create(
            self.nodeManager, firstToken.pos, [ Ast.builtinTypeNone ],
            LuneControl.Pragma.load__lune_module );
      }
      default {
         self.addErrMess( nextToken.pos, "unknown option -- %s" (nextToken.txt) );
      }
   }
   self.checkNextToken( ";" );
   return node;
}

enum TentativeMode {
   Ignore,
   Loop,
   Simple,
   Start,
   Merge,
   Finish,
}

fn TransUnit.analyzeBlock(
   blockKind: Nodes.BlockKind,
   tentativeMode:TentativeMode, scope: Ast.Scope! ) mut : Nodes.BlockNode
{
   let token = self.checkNextToken( "{" );

   if not scope {
      self.pushScope( false ## );
   }
   let blockScope = self.scope;

   switch tentativeMode {
      case .Simple, .Start, .Ignore, .Loop {
         self.prepareTentativeSymbol( self.scope, tentativeMode == .Loop );
      }
      case .Merge, .Finish {
         self.mergeTentativeSymbol( self.scope );
      }
   }

   let mut loopFlag = false;
   switch blockKind {
      case .For, .Apply, .While, .Repeat, .Foreach {
         loopFlag = true;
         self.loopScopeQueue.insert( self.scope );
      }
   }

   let mut stmtList:List<&Nodes.Node> = [];
   self.analyzeStatementList( stmtList, "}" );

   self.checkNextToken( "}" );

   if loopFlag {
      self.loopScopeQueue.remove(##);
   }

   if not scope {
      self.popScope();
   }

   // let node = self.createNode( nodeKindBlock, token.pos, [ builtinTypeNone ],
   //                          { "kind": blockKind, "stmtList": stmtList } );
   let mut node = Nodes.BlockNode.create(
      self.nodeManager, token.pos, [ Ast.builtinTypeNone ],
      blockKind, blockScope, stmtList );

   if node.getBreakKind( .Normal ) ~= .None {
      self.tentativeSymbol.skip();
   }

   switch tentativeMode {
      case .Simple, .Finish {
         self.finishTentativeSymbol( true );
      }
      case .Ignore, .Loop {
         self.finishTentativeSymbol( false );
      }
   }

   return node;
}


pub class ExtMacroInfo extend Nodes.MacroInfo {
   pri let mut name:str {pub};
   pri let mut argList:&List<&Nodes.MacroArgInfo>;
   pri let mut tokenList:&List<&Parser.Token>;

   pub override fn getArgList():&List<&Nodes.MacroArgInfo> {
      return self.argList;
   }
   pub override fn getTokenList():&List<&Parser.Token>{
      return self.tokenList;
   }

   pub fn __init( name:str, func: form,
                  symbol2MacroValInfoMap: Map<str,Nodes.MacroValInfo>,
                  argList:&List<&Nodes.MacroArgInfo>,
                  tokenList:&List<&Parser.Token> )
   {
      super( func, symbol2MacroValInfoMap );
      self.name = name;
      self.argList = argList;
      self.tokenList = tokenList;
   }
}


/**
modulePath で指定されたモジュールからメタ情報を読み込み、型情報を反映する。

@param modulePath モジュール名。 例: 'hoge.foo.bar'
@return 読み込んだメタ情報
@return メタ情報内の typeId -> TypeInfo の Map
@return インポート後の typeId -> メタ情報内の typeId の Map
*/
class DependModuleInfo {
   let id:int;
   let metaTypeId2TypeInfoMap:Map<int,&Ast.TypeInfo>;

   pub fn getTypeInfo( metaTypeId:int ):&Ast.TypeInfo {
      return unwrap self.metaTypeId2TypeInfoMap[ metaTypeId ];
   }
}


fn TransUnit.processImport( modulePath:str ) mut :
   &_MetaInfo, &Map<int,&Ast.TypeInfo>, &Nodes.ModuleInfo
{
   Log._log( .Info, `{ return "%s start" ( modulePath); } );

   if not self.importModuleInfo.add( modulePath ) {
      self.error( "recursive import: %s -> %s"
                  ( self.importModuleInfo.getFull(), modulePath ) );
   }


   if! let moduleInfo = self.importModuleName2ModuleInfo[ modulePath ] {
      if! let metaInfoStem = frontInterface.loadMeta( self.importModuleInfo, modulePath )
      {
         Log._log( .Info, `{ return "%s already" (modulePath); } );

         let metaInfo = metaInfoStem@@=_MetaInfo;
         let typeId2TypeInfo = moduleInfo.$importId2localTypeInfoMap;
         let moduleTypeInfo = unwrap typeId2TypeInfo[ metaInfo.__moduleTypeId ];
         self.importModuleInfo.remove();
         return metaInfo, typeId2TypeInfo, moduleInfo;
      }
      self.error( "failed to load meta -- " .. modulePath );
   }

   let mut nameList:str[] = [];
   apply txt of string.gmatch( modulePath, '[^%.]+' ) {
      nameList.insert( txt );
   }

   let! metaInfoStem = frontInterface.loadMeta( self.importModuleInfo, modulePath ) {
      self.error( "failed to load meta -- " .. modulePath );
   };
   let metaInfo = metaInfoStem@@=_MetaInfo;
   Log._log( .Info, `{ return "%s processing" (modulePath); } );


   // 依存するモジュールのメタ情報を読み込み
   let mut dependLibId2DependInfo:Map<int,DependModuleInfo> = {};
   forsort dependInfo, dependName in metaInfo.__dependModuleMap {
      if dependInfo.use {
         let workModuleInfo, metaTypeId2TypeInfoMap =
            self.processImport( dependName );
         let typeId = (unwrap dependInfo.typeId)@@int;
         dependLibId2DependInfo[ typeId ] =
            new DependModuleInfo( typeId, metaTypeId2TypeInfoMap );
      }
   }

   // 型情報の登録

   // meta情報内の typeId -> typeInfo
   let mut typeId2TypeInfo: Map<int,&Ast.TypeInfo> = {};
   typeId2TypeInfo[ Ast.rootTypeId ] = Ast.headTypeInfo;
   let mut typeId2Scope: Map<int,Ast.Scope> = {};
   typeId2Scope[ Ast.rootTypeId ] = self.scope;


   // 依存するモジュールの typeInfo と、 meta 情報内の typeId との紐付け
   foreach dependIdInfo, typeId in metaInfo.__dependIdMap {
      let dependInfo = unwrap dependLibId2DependInfo[ dependIdInfo[ 1 ] ];
      let typeInfo = dependInfo.getTypeInfo( dependIdInfo[ 2 ] );
      typeId2TypeInfo[ typeId ] = typeInfo;
      if! Ast.getScope( typeInfo ) {
         typeId2Scope[ typeId ] = _exp;
      }
   }

   let mut moduleTypeInfo:&Ast.TypeInfo = Ast.headTypeInfo;
   foreach moduleName, index in nameList {
      let mut mutable = false;
      if index == #nameList {
         mutable = metaInfo.__moduleMutable;
      }
      moduleTypeInfo = self.pushModule( true, moduleName, mutable );
   }
   foreach moduleName in nameList {
      self.popModule();
   }

   //self.moduleName2Info[ modulePath ] = metaInfo;

   foreach symbolInfo in Ast.sym2builtInTypeMap {
      typeId2TypeInfo[ symbolInfo.$typeInfo.get_typeId() ] = symbolInfo.$typeInfo;
   }
   foreach builtinTypeInfo in Ast.builtInTypeIdSet {
      typeId2TypeInfo[ builtinTypeInfo.$typeId ] = builtinTypeInfo;
   }


   let mut newId2OldIdMap: Map<&Ast.TypeInfo,int> = {};

   let mut _typeInfoList:List<_TypeInfo> = [];
   let mut id2atomMap:Map<int,_TypeInfo> = {};
   let mut _typeInfoNormalList:List<_TypeInfoNormal> = [];
   foreach atomInfo in metaInfo.__typeInfoList {
      if! let skind = atomInfo.skind {
         let mut actInfo:_TypeInfo! = nil;
         let mut mess:str! = nil;
         let kind = unwrap Ast.SerializeKind._from( skind@@int );
         switch kind {
            case .Enum {
               actInfo = _TypeInfoEnum._fromMap( atomInfo );
            }
            case .Alge {
               actInfo = _TypeInfoAlge._fromMap( atomInfo );
               self.helperInfo.useAlge = true;
            }
            case .Module {
               actInfo = _TypeInfoModule._fromMap( atomInfo );
            }
            case .Normal {
               if! _TypeInfoNormal._fromMap( atomInfo ) {
                  _typeInfoNormalList.insert( _exp );
                  actInfo = _exp;
               }
            }
            case .Nilable {
               actInfo = _TypeInfoNilable._fromMap( atomInfo );
            }
            case .Alias {
               actInfo = _TypeInfoAlias._fromMap( atomInfo );
            }
            case .DDD {
               actInfo, mess = _TypeInfoDDD._fromMap( atomInfo );
            }
            case .Alternate {
               actInfo, mess = _TypeInfoAlternate._fromMap( atomInfo );
            }
            case .Generic {
               actInfo, mess = _TypeInfoGeneric._fromMap( atomInfo );
            }
            case .Modifier {
               actInfo = _TypeInfoModifier._fromMap( atomInfo );
            }
            case .Box {
               actInfo = _TypeInfoBox._fromMap( atomInfo );
            }
            default {
               Util.err( "unknown skind -- %d" (skind@@int) );
            }
         }
         when! actInfo {
            _typeInfoList.insert( actInfo );
            id2atomMap[ actInfo.typeId ] = actInfo;
         }
         else {
            foreach val, key in atomInfo {
               Util.errorLog( "table: %s:%s" (key,val) );
            }
            when! mess {
               Util.errorLog( mess );
            }
            Util.err( "_TypeInfo.%s._fromMap error" (kind.$_txt) );
         }
      }
   }


   let mut orgId2MacroTypeInfo:Map<int,&Ast.TypeInfo> = {};

   // 初めに child 以外で TypeInfo を登録
   let mut importParam = new ImportParam(
      self, typeId2Scope, typeId2TypeInfo, metaInfo, self.scope,
      moduleTypeInfo, id2atomMap );
   foreach atomInfo in _typeInfoList {
      let newTypeInfo, errMess = atomInfo.createTypeInfo( importParam );
      if! errMess {
         Util.err( "%s: %s" ( modulePath, _exp ) );
      }
      when! newTypeInfo {
         if newTypeInfo.$kind == .Macro {
            orgId2MacroTypeInfo[ atomInfo.typeId ] = newTypeInfo;
         }
         if newTypeInfo.$kind == .Set {
            self.helperInfo.useSet = true;
         }
         if newTypeInfo.$accessMode == .Global {
            switch newTypeInfo.$kind {
               case .IF, .Class {
                  self.globalScope.addClass( newTypeInfo.$rawTxt, newTypeInfo );
               }
               case .Func {
                  self.globalScope.addFunc(
                     newTypeInfo, .Global, newTypeInfo.$staticFlag,
                     Ast.TypeInfo.isMut( newTypeInfo) );
               }
               case .Enum {
                  self.globalScope.addEnum( .Global, newTypeInfo.$rawTxt, newTypeInfo );
               }
               case .Nilable {
                  ; // nop
               }
               default {
                  Util.err( "%s: not support kind -- %s"
                            (__func__, newTypeInfo.$kind.$_txt) );
               }
            }
         }
      }
   }

   // 次に child を登録
   foreach atomInfo in _typeInfoNormalList {
      if #atomInfo.children > 0 {
         let mut scope = unwrap typeId2Scope[ atomInfo.typeId ];
         foreach childId in atomInfo.children {
            let! typeInfo = typeId2TypeInfo[ childId ] {
               Util.err( "not found childId -- %s, %d, %s(%d)"
                         (modulePath, childId, atomInfo.txt, atomInfo.typeId ) );
            };
            let mut symbolKind = Ast.SymbolKind.Typ;
            let mut addFlag = true;
            switch typeInfo.$kind {
               case .Func {
                  symbolKind = .Fun;
               }
               case .Form, .FormFunc {
                  symbolKind = .Typ;
               }
               case .Method {
                  symbolKind = .Mtd;
               }
               case .Class, .Module
               {
                  symbolKind = .Typ;
               }
               case .Enum {
                  addFlag = false;
               }
            }

            if addFlag {
               scope.add(
                  symbolKind, false,
                  typeInfo.$kind == .Func,
                  typeInfo.getTxt(##), typeInfo, typeInfo.$accessMode,
                  typeInfo.$staticFlag, typeInfo.$mutMode, true );
            }
         }
      }
   }

   // インポート後の TypeId と インポート前の TypeId の紐付け
   foreach typeInfo, typeId in typeId2TypeInfo {
      newId2OldIdMap[ typeInfo ] = typeId;
   }

   // メンバーの登録
   fn registMember( classTypeId: int ) {
      if metaInfo.__dependIdMap[ classTypeId ] {
         return;
      }
      let mut classTypeInfo = unwrap typeId2TypeInfo[ classTypeId ];

      switch ( classTypeInfo.$kind ) {
         case .Class {
            self.pushClass( true, classTypeInfo.$abstractFlag,
                            nil, nil, [], true, classTypeInfo.getTxt(##), .Pub ## );
            if! metaInfo.__typeId2ClassInfoMap[ classTypeId ] {
               let classInfo = _exp;
               foreach fieldInfo, fieldName in classInfo@@Map<str,Map<str,stem>> {
                  if! let typeId = fieldInfo.typeId {
                     let fieldTypeInfo = unwrap typeId2TypeInfo[ typeId@@int ];
                     let symbolInfo = self.scope.addMember(
                        fieldName, fieldTypeInfo,
                        unwrap Ast.AccessMode._from( (unwrap fieldInfo.accessMode)@@int ),
                        fieldInfo.staticFlag and true or false,
                        unwrap Ast.MutMode._from( (unwrap fieldInfo.mutMode)@@int ) );
                  }
                  else {
                     self.error( "not found fieldInfo.typeId" );
                  }
               }
            }
            else {
               self.error( "not found class -- %s: %d, %s"
                           (modulePath, classTypeId, classTypeInfo.getTxt(##)) );
            }
         }
         case .Module {
            self.pushModule( true, classTypeInfo.getTxt(##),
                             Ast.TypeInfo.isMut( classTypeInfo ) );
         }
      }

      foreach child in classTypeInfo.get_children() {
         if child.get_kind() == .Class or
            child.get_kind() == .Module or
            child.get_kind() == .IF
         {
            let oldId = newId2OldIdMap[ child ];
            if oldId {
               registMember( unwrap oldId );
            }
         }
      }

      if classTypeInfo.$kind == .Class {
         self.popClass();
      }
      elseif classTypeInfo.$kind == .Module {
         self.popModule();
      }
   }
   foreach atomInfo in _typeInfoList {
      if atomInfo.parentId == Ast.rootTypeId and
         ( atomInfo.skind == .Normal or atomInfo.skind == .Module )
      {
         registMember( atomInfo.typeId );
      }
   }


   foreach moduleName, index in nameList {
      let mut mutable = false;
      if index == #nameList {
         mutable = metaInfo.__moduleMutable;
      }
      self.pushModule( true, moduleName, mutable );
   }


   // 変数登録
   foreach varInfo, varName in metaInfo.__varName2InfoMap {
      if! let typeId = varInfo.typeId {
         self.scope.addStaticVar(
            false, true, varName, unwrap typeId2TypeInfo[ typeId@@int ],
            varInfo.mutable and Ast.MutMode.Mut or Ast.MutMode.IMut );
      }
      else {
         self.error( "illegal varInfo.typeId" );
      }
   }

   // マクロ登録
   foreach macroInfoStem, orgTypeId in metaInfo.__macroName2InfoMap {
      let macroInfo, err = MacroMetaInfo._fromStem( macroInfoStem );
      when! macroInfo {
         let macroTypeInfo = unwrap orgId2MacroTypeInfo[ orgTypeId ];

         let mut argList:List<&Nodes.MacroArgInfo> = [];
         let mut argNameList:List<str> = [];
         let mut symbol2MacroValInfoMap:Map<str,Nodes.MacroValInfo> = {};
         foreach argInfo in macroInfo.argList {
            let argTypeInfo = unwrap typeId2TypeInfo[ argInfo.typeId ];
            argList.insert( new Nodes.MacroArgInfo( argInfo.name, argTypeInfo ) );
            argNameList.insert( argInfo.name );
            // symbol2MacroValInfoMap[ argInfo.name ] =
            //    new Nodes.MacroValInfo( nil, argTypeInfo );
         }
         foreach symInfo in macroInfo.symList {
            let symTypeInfo = unwrap typeId2TypeInfo[ symInfo.typeId ];
            symbol2MacroValInfoMap[ symInfo.name ] =
               new Nodes.MacroValInfo( nil, symTypeInfo, nil );
         }


         let mut tokenList:List<&Parser.Token> = [];
         let mut lineNo = 0;
         let mut column = 1;
         foreach tokenInfo in macroInfo.tokenList {
            let txt = tokenInfo[2]@@str;
            if txt == "\n" {
               lineNo = lineNo + 1;
               column = 1;
            }
            else {
               tokenList.insert(
                  new Parser.Token(
                     unwrap Parser.TokenKind._from( tokenInfo[1]@@int ),
                     txt, new Parser.Position( lineNo, column ), false ## ) );
               column = column + #txt + 1;
            }
         }


         self.typeId2MacroInfo[ macroTypeInfo.$typeId ] =
            new ExtMacroInfo(
               macroInfo.name,
               self.macroEval.evalFromCode(
                  macroInfo.name, argNameList, macroInfo.stmtBlock ),
               symbol2MacroValInfoMap, argList, tokenList );
      }
      else {
         Util.errorLog( "macro load fail -- %s" (unwrap err default "") );
      }
   }


   foreach moduleName in nameList {
      self.popModule();
   }


   //dumpScope( self.rootScope, "" );

   let moduleInfo = new Nodes.ModuleInfo(
      modulePath, nameList[#nameList], newId2OldIdMap,
      frontInterface.ModuleId.createIdFromTxt( metaInfo.__buildId ) );
   self.importModule2ModuleInfo[ moduleTypeInfo ] = moduleInfo;
   self.importModuleName2ModuleInfo[ modulePath ] = moduleInfo;

   self.importModuleInfo.remove();

   Log._log( .Info, `{ return "%s complete" (modulePath); } );

   return metaInfo, typeId2TypeInfo, moduleInfo;
}

fn TransUnit.analyzeImport( token: &Parser.Token ) mut : Nodes.Node {
   // if self.moduleScope ~= self.scope {
   //    self.error( "'import' must call at top scope." );
   // }

   let mut backupScope = self.scope;
   // スコープをルートに変更
   self.scope = self.topScope;

   let mut moduleToken = self.getToken(##);
   let mut modulePath = moduleToken.txt;
   let mut nextToken:&Parser.Token = moduleToken;

   while true {
      nextToken = self.getToken(##);
      if nextToken.txt == "." {
         nextToken = self.getToken(##);
         moduleToken = nextToken;
         modulePath = "%s.%s" ( modulePath, moduleToken.txt );
      }
      else {
         break;
      }
   }

   Ast.switchIdProvier( .Ext );

   let metaInfo, typeId2TypeInfo, moduleInfo = self.processImport( modulePath );

   Ast.switchIdProvier( .Base );


   // スコープを元に戻す
   //self.scope = self.moduleScope;
   self.scope = backupScope;


   let mut assignName = moduleToken;
   if nextToken.txt == "as" {
      assignName = self.getSymbolToken( .MustNot_ );
      nextToken = self.getToken(##);
   }

   // モジュールの末尾のシンボルでスコープに登録する。
   // 例えば hoge.foo.bar をインポートした場合、 bar をスコープに登録する
   let moduleTypeInfo = unwrap typeId2TypeInfo[ metaInfo.__moduleTypeId ];
   self.importModule2ModuleInfoCurrent[ moduleTypeInfo ] =
      moduleInfo.assign( assignName.txt );

   let moduleSymbolKind = unwrap Ast.SymbolKind._from( metaInfo.__moduleSymbolKind );
   self.scope.add(
      moduleSymbolKind, false, false, assignName.txt,
      moduleTypeInfo, .Local, true,
      metaInfo.__moduleMutable and Ast.MutMode.Mut or Ast.MutMode.IMut, true );

   self.checkToken( nextToken, ";" );


   // if self.moduleScope ~= self.scope {
   //    self.error( "illegal top scope." );
   // }


   return Nodes.ImportNode.create(
      self.nodeManager, token.pos, [ Ast.builtinTypeNone ],
      modulePath, assignName.txt, moduleTypeInfo );
}


fn TransUnit.analyzeSubfile( token: &Parser.Token ) mut : Nodes.SubfileNode {
   if self.scope ~= self.moduleScope {
      self.error( "'module' must be top scope." );
   }


   let mode = self.getToken(##);

   let mut moduleName = "";
   while true {
      let nextToken = self.getToken(##);
      if nextToken.txt == ";" {
         break;
      }
      if moduleName == "" {
         moduleName = nextToken.txt;
      }
      else {
         moduleName = "%s%s" (moduleName, nextToken.txt);
      }
   }
   let mut usePath:str! = nil;
   if moduleName == "" {
      self.addErrMess( token.pos, "illegal subfile" );
   }
   else {
      if mode.txt == "use" {
         usePath = moduleName;
         if frontInterface.searchModule( moduleName ) {
            self.subfileList.insert( moduleName );
         }
         else {
            self.addErrMess(
               token.pos, "not found subfile -- %s" ( moduleName ) );
         }
      }
      elseif mode.txt == "owner" {
         if self.moduleName ~= moduleName {
            self.addErrMess(
               token.pos,
               "illegal owner module -- %s, %s"
               ( moduleName, self.moduleName ) );
         }
      }
      else {
         self.addErrMess( mode.pos, "illegal module mode -- %s" ( mode.txt ) );
      }
   }
   return Nodes.SubfileNode.create(
      self.nodeManager, token.pos, [ Ast.builtinTypeNone ], usePath );
}

fn TransUnit.analyzeIf( token: &Parser.Token ) mut : Nodes.Node {
   let mut nextToken, continueFlag = self.getContinueToken();
   if continueFlag and nextToken.txt == "!" {
      return self.analyzeIfUnwrap( token );
   }
   self.pushback();

   let mut list:Nodes.IfStmtInfo[] = [];
   let ifExp = self.analyzeExp( false, false ## );
   list.insert( new Nodes.IfStmtInfo( .If, ifExp,
                                      self.analyzeBlock( .If, .Start ## ) ) );

   fn checkCond( condExp:&Nodes.Node ) {
      switch condExp.$expType.$kind {
         case .Nilable, .Stem {
            ;
         }
         case .Prim {
            if not condExp.$expType.equals( Ast.builtinTypeBool ## ) {
               self.addErrMess(
                  condExp.$pos, "This exp never be false -- %s"
                  ( condExp.$expType.getTxt(##)) );
            }
         }
         default {
            self.addErrMess(
               condExp.$pos, "This exp never be false -- %s"
               ( condExp.$expType.getTxt(##)) );
         }
      }
   }
   checkCond( ifExp );

   nextToken = self.getToken( true );
   if nextToken.txt == "elseif" {
      while nextToken.txt == "elseif" {
         let condExp = self.analyzeExp( false, false ## );
         list.insert( new Nodes.IfStmtInfo( .ElseIf, condExp,
                                            self.analyzeBlock( .Elseif, .Merge ## ) ));
         checkCond( condExp );
         nextToken = self.getToken( true );
      }
   }

   if nextToken.txt == "else" {
      list.insert( new Nodes.IfStmtInfo(
         .Else, self.createNoneNode( nextToken.pos ),
         self.analyzeBlock( .Else, .Finish ## ) ));
   }
   else {
      self.finishTentativeSymbol( false );
      self.pushback();
   }

   return Nodes.IfNode.create(
      self.nodeManager, token.pos, [ Ast.builtinTypeNone ], list );
}


fn TransUnit.analyzeSwitch( firstToken: &Parser.Token ) mut : Nodes.SwitchNode {
   let exp = self.analyzeExp( false, false ## );

   self.checkNextToken( "{" );

   let mut caseList: Nodes.CaseInfo[] = [];

   let mut nextToken = self.getToken(##);
   let mut firstFlag = true;
   while ( nextToken.txt == "case" ) {
      self.checkToken( nextToken, "case" );
      let condexpList = self.analyzeExpList( false, false, nil, [ exp.$expType ], true );
      let condBock = self.analyzeBlock(
         .Switch, firstFlag and TentativeMode.Start or TentativeMode.Merge ## );
      if firstFlag {
         firstFlag = false;
      }
      caseList.insert( new Nodes.CaseInfo( condexpList, condBock ) );
      nextToken = self.getToken(##);
   }

   let mut defaultBlock: Nodes.BlockNode! = nil;
   if nextToken.txt == "default" {
      defaultBlock = self.analyzeBlock(
         .Default, firstFlag and TentativeMode.Simple or TentativeMode.Finish ## );
   }
   else {
      if not firstFlag {
         self.finishTentativeSymbol( false );
      }
      self.pushback();
   }
   self.checkNextToken( "}" );

   return Nodes.SwitchNode.create(
      self.nodeManager, firstToken.pos, [ Ast.builtinTypeNone ],
      exp, caseList, defaultBlock );
}


fn TransUnit.analyzeMatch( firstToken: &Parser.Token ) mut : Nodes.MatchNode {
   let exp = self.analyzeExp( false, false ## );

   let! algeTypeInfo = exp.$expType.$srcTypeInfo@@@Ast.AlgeTypeInfo {
      self.error( "match must have alge value" );
   };

   self.checkNextToken( "{" );

   let mut caseList: List<&Nodes.MatchCase> = [];

   let mut nextToken = self.getToken(##);
   let mut firstFlag = true;
   while ( nextToken.txt == "case" ) {
      self.checkNextToken( "." );
      let valNameToken = self.getToken(##);

      self.checkAlgeComp( valNameToken, algeTypeInfo );

      let! valInfo = algeTypeInfo.getValInfo( valNameToken.txt ) {
         self.error( "not found val -- %s" (valNameToken.txt) );
      };
      let mut valParamNameList:List<str> = [];
      nextToken = self.getToken(##);
      let mut blockScope = self.pushScope( false ## );
      if nextToken.txt == "(" {
         foreach paramType in valInfo.$typeList {
            let paramName = self.getSymbolToken( .MustNot_ );
            if self.scope.getTypeInfo( paramName.txt, self.scope, true ) {
               self.addErrMess( paramName.pos,
                                "shadowing variable -- %s" (paramName.txt) );
            }

            let mut workType = paramType;
            if Ast.TypeInfo.isMut( paramType ) and
               not Ast.TypeInfo.isMut( exp.$expType )
            {
               workType = self.createModifier( workType, .IMut );
            }
            blockScope.addLocalVar( true, false, paramName.txt, workType, .IMut );
            valParamNameList.insert( paramName.txt );
            nextToken = self.getToken(##);
            if nextToken.txt ~= "," {
               break;
            }
         }
         self.checkToken( nextToken, ")" );
      }
      else {
         self.pushback();
      }
      if #valParamNameList ~= #valInfo.$typeList {
         self.addErrMess( valNameToken.pos,
                          "unmatch param -- %d != %d"
                          (#valParamNameList, #valInfo.$typeList ) );
      }
      let block = self.analyzeBlock(
         .Match, firstFlag and TentativeMode.Start or TentativeMode.Merge, blockScope );
      if firstFlag {
         firstFlag = false;
      }
      self.popScope();
      let matchCase = new Nodes.MatchCase( valInfo, valParamNameList, block );

      caseList.insert( matchCase );
      nextToken = self.getToken(##);
   }
   let mut defaultBlock:&Nodes.Node! = nil;
   if nextToken.txt == "default" {
      defaultBlock = self.analyzeBlock(
         .Block, firstFlag and TentativeMode.Simple or TentativeMode.Finish ## );
      nextToken = self.getToken(##);
   }
   else {
      self.finishTentativeSymbol( false );
   }
   self.checkToken( nextToken, "}" );

   return Nodes.MatchNode.create(
      self.nodeManager, firstToken.pos, [ Ast.builtinTypeNone ],
      exp, algeTypeInfo, caseList, defaultBlock );
}



fn TransUnit.analyzeWhile( token: &Parser.Token ) mut : Nodes.WhileNode {
   return Nodes.WhileNode.create(
      self.nodeManager, token.pos, [ Ast.builtinTypeNone ],
      self.analyzeExp( false, false## ), self.analyzeBlock( .While, .Loop ## ) );
}

fn TransUnit.analyzeRepeat( token: &Parser.Token ) mut : Nodes.RepeatNode {
   let mut scope = self.pushScope( false## );
   let mut node = Nodes.RepeatNode.create(
      self.nodeManager, token.pos, [ Ast.builtinTypeNone ],
      self.analyzeBlock( .Repeat, .Simple, scope ), self.analyzeExp( false, false## ) );
   self.popScope();

   self.checkNextToken( ";" );
   return node;
}

fn TransUnit.analyzeFor( firstToken: &Parser.Token ) mut : Nodes.ForNode {

   let mut scope = self.pushScope( false## );

   let val = self.getToken(##);
   if val.kind ~= Parser.TokenKind.Symb {
      self.error( "not symbol" );
   }
   self.checkNextToken( "=" );
   let exp1 = self.analyzeExp( false, false## );
   if not Ast.isNumberType( exp1.$expType ) {
      self.addErrMess( exp1.$pos,
                       "exp1 is not number -- %s" (exp1.$expType.getTxt(##)) );
   }
   let symbolInfo = self.addLocalVar(
      exp1.$pos, false, true, val.txt, exp1.$expType, .IMut## );
   self.checkNextToken( "," );
   let exp2 = self.analyzeExp( false, false## );
   if not Ast.isNumberType( exp2.$expType ) {
      self.addErrMess( exp2.$pos,
                       "exp2 is not number -- %s" (exp2.$expType.getTxt(##)) );
   }
   let token = self.getToken(##);
   let mut exp3:Nodes.Node! = nil;
   if token.txt == "," {
      exp3 = self.analyzeExp( false, false## );
      if! exp3 {
         if not Ast.isNumberType( _exp.$expType ) {
            self.addErrMess( _exp.$pos,
                             "exp is not number -- %s" (_exp.$expType.getTxt(##)) );
         }
      }

   }
   else {
      self.pushback();
   }

   let mut node = Nodes.ForNode.create(
      self.nodeManager, firstToken.pos, [ Ast.builtinTypeNone ],
      self.analyzeBlock( .For, .Loop, scope ), symbolInfo, exp1, exp2, exp3 );
   self.popScope();

   return node;
}

fn TransUnit.analyzeApply( token: &Parser.Token ) mut : Nodes.ApplyNode {
   let mut scope = self.pushScope( false## );
   let mut varList:List<&Parser.Token> = [];
   let mut nextToken:&Parser.Token = Parser.getEofToken();
   repeat {
      let var = self.getSymbolToken( .MustNot_ );
      if var.kind ~= Parser.TokenKind.Symb {
         self.error( "illegal symbol" );
      }
      varList.insert( var );
      nextToken = self.getToken(##);
   } nextToken.txt ~= ",";
   self.checkToken( nextToken, "of" );

   let exp = self.analyzeExp( false, false## );

   let expTypeList = exp.$expTypeList;
   if #expTypeList < 3 {
      self.addErrMess( exp.$pos, "apply must have 3 values -- %s" (#expTypeList) );
   }


   let mut itemTypeList:List<&Ast.TypeInfo> = [];
   let mut defaultItemType = Ast.builtinTypeStem_;
   if! let callNode = exp@@@Nodes.ExpCallNode {
      let callFuncType = callNode.$func.$expType;
      if callFuncType.equals( builtinFunc.str_gmatch ## ) or
         callFuncType.equals( builtinFunc.string_gmatch ## )
      {
         itemTypeList.insert( Ast.builtinTypeString );
         defaultItemType = Ast.builtinTypeString.$nilableTypeInfo;
      }
      else {
         if #callFuncType.$retTypeInfoList == 0 {
            self.addErrMess( exp.$pos, "apply value must return iterator function." );
         }
         let iteFunc = callFuncType.$retTypeInfoList[ 1 ];
         foreach itemType, index in iteFunc.$retTypeInfoList {
            let mut workType = itemType;
            if index == 1 {
               if itemType.$nilable {
                  workType = workType.$nonnilableType;
               }
            }
            itemTypeList.insert( workType );
         }
      }
   }
   foreach var, index in varList {
      let mut itemType = defaultItemType;
      if index <= #itemTypeList {
         itemType = itemTypeList[ index ];
      }
      self.addLocalVar( var.pos, false, true, var.txt, itemType, .IMut## );
   }

   let block = self.analyzeBlock( .Apply, .Loop, scope );
   self.popScope();

   return Nodes.ApplyNode.create(
      self.nodeManager, token.pos, [ Ast.builtinTypeNone ], varList, exp, block );
}

fn TransUnit.analyzeForeach( token: &Parser.Token, sortFlag: bool ) mut : Nodes.Node {
   let mut scope = self.pushScope( false## );
   let mut mainSymbol:&Parser.Token = Parser.getEofToken();
   let mut valSymbol:&Parser.Token! = nil;
   let mut subSymbol:&Parser.Token! = nil;
   let mut nextToken:&Parser.Token = Parser.getEofToken();
   for index = 1, 2 {
      let symbol = self.getToken(##);
      if symbol.kind ~= Parser.TokenKind.Symb {
         self.error( "illegal symbol" );
      }
      if index == 1 {
         mainSymbol = symbol;
         valSymbol = symbol;
      }
      else {
         subSymbol = symbol;
      }
      nextToken = self.getToken(##);
      if nextToken.txt ~= "," {
         break;
      }
   }
   self.checkToken( nextToken, "in" );

   let exp = self.analyzeExp( false, false## );
   
   let itemTypeInfoList = exp.$expType.get_itemTypeInfoList();
   if exp.$expType.get_kind() == .Map {
      self.addLocalVar(
         exp.$pos, true, true, mainSymbol.txt, itemTypeInfoList[ 2 ], .IMut## );
      if! subSymbol {
         self.addLocalVar(
            _exp.$pos, true, true, _exp.txt, itemTypeInfoList[ 1 ], .IMut## );
      }
   }
   elseif exp.$expType.get_kind() == .Set {
      when! subSymbol {
         self.addErrMess( subSymbol.pos, "Set can't use index" );
      }
      valSymbol = nil;
      subSymbol = mainSymbol;
      self.scope.addLocalVar(
         true, true, mainSymbol.txt, itemTypeInfoList[ 1 ], .IMut );
   }
   elseif exp.$expType.get_kind() == .List or
      exp.$expType.get_kind() == .Array
   {
      if sortFlag {
         self.addErrMess( exp.$pos, "'%s' doesn't support forsort."
                          (exp.$expType.get_kind().$_txt) );
      }
      self.scope.addLocalVar(
         true, true, mainSymbol.txt, itemTypeInfoList[ 1 ], .IMut );
      if! subSymbol {
         self.addLocalVar(
            _exp.pos, true, false, _exp.txt, Ast.builtinTypeInt, .IMut## );
      }
      else {
         self.scope.addLocalVar( true, false, "__index", Ast.builtinTypeInt, .IMut );
      }
   }
   else {
      self.error( "unknown kind type of exp for foreach-- %s(%d:%d)"
         (exp.$expType.getTxt(##), exp.$pos.lineNo, exp.$pos.column) );
   }


   let mut seqSym:str! = nil;
   if! let refNode = exp@@@Nodes.ExpRefNode {
      // foreach の sequential データを保持する変数は imut にする。
      let seqSymbol = refNode.$symbolInfo;
      if seqSymbol.$mutable or Ast.TypeInfo.isMut( seqSymbol.$typeInfo ) {
         let typeInfo;
         if Ast.TypeInfo.isMut( seqSymbol.$typeInfo ) {
            typeInfo = self.createModifier( seqSymbol.$typeInfo, .IMut );
         }
         else {
            typeInfo = seqSymbol.$typeInfo;
         }
         scope.addLocalVar(
            seqSymbol.$kind == .Arg, false, seqSymbol.$name, typeInfo, .IMut );
         seqSym = seqSymbol.$name;
      }
   }
   
   let block = self.analyzeBlock( .Foreach, .Loop, scope );

   when! seqSym {
      scope.remove( seqSym );
   }

   self.popScope();

   if sortFlag {
      return Nodes.ForsortNode.create(
         self.nodeManager, token.pos, [ Ast.builtinTypeNone ],
         mainSymbol, subSymbol, exp, block, sortFlag );
   }
   else {
      return Nodes.ForeachNode.create(
         self.nodeManager, token.pos, [ Ast.builtinTypeNone ],
         valSymbol, subSymbol, exp, block );
   }
}

fn TransUnit.analyzeProvide( firstToken: &Parser.Token ) mut : Nodes.ProvideNode {
   let token = self.getSymbolToken( .MustNot_ );
   let symbolNode = self.analyzeExpSymbol( firstToken, token, .Symbol, nil, true );
   self.checkNextToken( ";" );

   let symbolInfoList = symbolNode.getSymbolInfo();
   if #symbolInfoList ~= 1 {
      self.error( "'provide' must be symbol." );
   }
   let symbolInfo = symbolInfoList[ 1 ];


   let mut node = Nodes.ProvideNode.create(
      self.nodeManager, firstToken.pos, [ Ast.builtinTypeNone ], symbolInfo );
   if self.provideNode {
      self.addErrMess( firstToken.pos, "multiple provide" );
   }
   self.provideNode = node;


   if symbolInfo.$accessMode ~= .Pub {
      self.addErrMess( firstToken.pos,
                       "provide variable must be 'pub'.  -- %s"
                       (symbolInfo.$accessMode));
   }

   return node;
}
