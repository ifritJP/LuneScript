let mut g_val = 100;
{
   let func:form;
   let func2:form;
   {
      let mut val = 1;
      print( "hoge", val );
      func = fn () {
         print( val );
      };
      func2 = fn () {
         val = val + 1;
      };
      val = 2;
   }
   func();
   func2();
   func();
}
{
   let func:form;
   let func2:form;
   {
      let mut val = "a1";
      print( "hoge", val );
      func = fn () {
         print( val );
      };
      func2 = fn () {
         val = "a3";
      };
      val = "a2";
   }
   func();
   func2();
   func();
}
{
   fn funcL(): int, int {
      return 1, 2;
   }

   class Test {
      static let val:int;
      __init {
         Test.val = 1;
      }
      pub static fn funcS(): int, int {
         return Test.val, 2;
      }
      pub fn func(): int, int {
         return 1, 2;
      }
   }
   fn sub( val1:int, val2:int ) {
      print( val1, val2 );
   }
   print( "---" );
   sub( Test.funcS()** );
   sub( Test.funcS() + 1, 0 );
   sub( Test.funcS(), 0 );
   sub( ( Test.funcS() ), 0 );
   sub( ( Test.funcS() ) + 1, 0 );


   print( "---" );
   print( Test.funcS()** );
   print( Test.funcS() + 1, 0 );
   print( Test.funcS(), 0 );
   print( ( Test.funcS() ), 0 );
   print( ( Test.funcS() ) + 1, 0 );
   print( 0, Test.funcS()** );


   print( "---" );
   let test = new Test();
   sub( test.func()** );
   sub( test.func() + 1, 0 );
   sub( test.func(), 0 );
   sub( ( test.func() ), 0 );
   sub( ( test.func() ) + 1, 0 );
} 
{
   fn func(): int, int, int {
      return 1, 2, 3;
   }
   fn sub2( val1:int, ... ) {
      print( val1, ... );
   }
   sub2( func(), 1 );


   print( func()@@real + 10 );
   print( -func() + 10 );
   print( ~func() + 10 );
   print( func(), 10 );
   print( ( func() ) );
   print( func()** );

   sub2( func()@@int + 10 ## );
   sub2( func()@@int + 10 );
   sub2( -func() + 10 ## );
   sub2( ~func() + 10 ## );
   sub2( func(), 10 );
   sub2( ( func() ) ## );
   sub2( func()** );
}
{
   alge Test {
      Val1,
      Val2,
      Val3( val:int ),
      Val4( val1:int, val2:str ),
   }

   fn func( test:Test ) {
      print( test == .Val1 );
      match test {
         case .Val1 {
            print( ".Val1" );
         }
         case .Val2 {
            print( ".Val2" );
         }
         case .Val3( arg ) {
            print( ".Val3", arg );
         }
         case .Val4( arg1, arg2 ) {
            print( ".Val4", arg1, arg2 );
         }
      }
   }

   func( Test.Val1 );
   func( Test.Val2 );
   func( Test.Val3( 3 ) );
   func( Test.Val4( 3, "val" ) );
}
{
   form FF( val:int, ... );
   fn func( val:int, ... ) {
      print( val, ... );
   }
   fn func2( ... ) {
      print( ... );
   }
   form FF3( ...<&stem!> );

   fn ret(): int, int, int {
      return 1, 2, 3;
   }
   fn sub( ff:FF ) {
      ff( ret()** );
      ff( 0, ret()** );
      ff( -1, 0, ret()** );
   }
   fn sub2( ff:form ) {
      ff( 1 );
      ff( ret()** );
      ff( 0, ret()** );
      ff( -1, 0, ret()** );
   }
   fn sub3( ff:FF3 ) {
      ff( ret()** );
      ff( 0, ret()** );
      ff( -1, 0, ret()** );
   }
   sub( func );
   sub2( func2 );
   sub3( print );
}
{
   let val = 1000;
   let mut val3 = 0;
   class Test1 {
      static let val:int;
      __init {
         Test1.val = 100 + val;
         val3 = 10;
      }
      pub static fn func(): int {
         return Test1.val;
      }
   }
   fn func() {
      let val2 = 10000;
      class Test2 {
         static let val:int;
         __init {
            Test2.val = 200 + val2;
         }
         pub static fn func(): int {
            return Test2.val + Test1.func();
         }
      }
      print( Test2.func(), val3 );
   }
   func();
}
{
   fn func(): int, int, int {
      return 1, 2, 3;
   }
   fn func2(): str, int, int {
      return "1", 2, 3;
   }
   fn sub( val1:int, val2:int, val3:int ) {
      print( val1, val2, val3 );
   }
   fn sub2( val1:int, ... ) {
      print( val1, ... );
   }
   fn sub3( val1:str, ... ) {
      print( val1, ... );
   }
   print( func() + 1 );
   print( (func()) + 1 );
   print( func()** );
   sub( func()** );
   sub2( func()** );
   sub2( func(), 1 );
   sub3( func2(), 1 );
   let work1, work2 = func();
   print( work1, work2 );
}
{
   fn func( arg:int ) {
      class Test {
         let val:int;
         pub fn func(): int {
            return self.val;
         }
      }
      let test = new Test( arg );
      print( test.func() );
   }
   fn func2( arg:int ) {
      class Test {
         let val:int;
         pub fn func(): int {
            return self.val + 100;
         }
      }
      let test = new Test( arg );
      print( test.func() );
   }
   func(1);
   func2(2);
   func(3);
}
{
   interface IF {
      pub fn func();
   }
   class TestA extend (IF) {
      pub fn func() {
         print( "TestA" );
      }
   }
   class TestB extend (IF) {
      pub fn func() {
         print( "TestB" );
      }
   }

   class Hoge<T> {
      let mut val:T {pub,pub};
   }

   {
      let test:Hoge<&IF> = new Hoge( new TestA() );
      test.$val.func();
   }
   {
      let test:Hoge<&IF> = new Hoge( new TestB() );
      test.$val.func();
   }
}
{
   interface IF {
      pub fn func();
   }

   class Test extend (IF) {
      pub fn sub() {
         print( "sub" );
      }
      pub fn func() {
         print( "hoge" );
      }
   }

   class Hoge<T> {
      let val:&T;
      pub fn func(): &T {
         return self.val;
      }
   }

   fn func( obj:&IF ) {
      obj.func();
   }

   let test = new Test();
   let hoge = new Hoge(test);
   let list:List<&IF> = [ test ];
   let list2 = [ 1 ];
   print( list2[ 1 ] );
   func( test );
   func( list[ 1 ] );
   func( hoge.func() );
   foreach item in list {
      item.func();
   }
}
{
   class Test {
      let mut val:int {pub,pub};
      let mut val2:str {pub,pub};
      pub fn func( val:int ): int {
         return self.val + val;
      }
      pub fn sub( val:str ): str {
         return self.val2;
      }
   }

   let mut test = new Test(1, "abc" );
   print( test.$val, test.func( 10 ), test.sub( "xyz" ) );
   test.set_val( 2 );
   test.set_val2( "ABC" );
   print( test.$val, test.func( 20 ), test.sub( "XYZ" ) );

   class Val {
      let test:Test {pub};
      let val3:int {pub};
      pub fn __init( test1:Test ) {
         self.test = test1;
         self.val3 = 1;
      }
   }
   let val = new Val( test );
   print( val.$test.$val, val.$test.$val2 );

   class Sub extend Test {
   }

   let sub = new Sub( 10, "xyz" );
   print( sub.$val, sub.$val2 );
}
{
   enum Test {
      Val1 = "abc",
      Val2 = "xyz",
   }

   let val = Test.Val1;
   print( val );
   foreach item in Test.$_allList {
      print( item, item.$_txt );
   }
}
{
   enum Test {
      Val1 = 1,
      Val2,
   }

   let val = Test.Val1;
   print( val + 10 );
   foreach item in Test.$_allList {
      print( item, item.$_txt );
   }
}
{
   fn func( val:int! ): int {
      return unwrap val default 10;
   }
   print( func( 1 ) + 1 );
   print( func( nil ) + 1 );
}
{
   fn func( val:real! ): real {
      return unwrap val default 10.0;
   }
   print( func( 1.0 ) + 1 );
   print( func( nil ) + 1 );
}
{
   fn func( val:str! ): str {
      return unwrap val default "abc";
   }
   print( func( "xyz" ) );
   print( func( nil ) );
}
{
   fn func( val: int ) {
      fn comp( val1:int, val2:int ): bool {
         return val1 == val2;
      }

      if comp( val, 0 ) {
         print( "case 0" );
      }
      elseif comp( val, 1 ) {
         print( "case 1" );
      }
      else {
         print( "default" );
      }
   }
   func( 0 );
   func( 1 );
   func( 2 );
}
{
   print( nil or false or 1 );
   print( nil or 2 or 3 );
   print( 4 or 5 );
   print( nil or false );

   print( 1 and 2 and 3 and nil );
   print( 1 and 2 and 3 );
   print( 1 and false and 2 );   
}
{
   let val = "abc";
   fn func( val2:str ) {
      forsort item in (@ g_val, 3.5, 1, 2, 0 ) {
         print( item );
      }
      forsort item, key in { val: g_val, val2: 3.5, "999": 1, "888": 2, "777": 3 } {
         print( key, item );
      }
   }
   func( "xyz" );
}
{
   let val = 10;
   fn func( val2:str ) {
      foreach list in [ [ val, g_val ], [ 3.5, val2 ] ] {
         foreach item in list {
            print( item );
         }
      }
      foreach list in [ (@ val, g_val ), (@ 3.5, val2 ) ] {
         foreach item in list {
            print( item );
         }
      }
      foreach list in [ { val: g_val }, { 3.5: val2 } ] {
         foreach item, key in list {
            print( key, item );
         }
      }
   }
   func( "xyz" );
}
{
   fn func(...<int!>) {
      print( ... );
      print( 10, ... );
      print( 10, ..., 100 );
   }
   func( 1, nil, 2 );
}
{
   let form1;
   {
      let mut val = "abc";
      fn func1(): form {
         return fn () {
            print( val );
         };
      }
      form1 = func1();
      print( val );
      val = "xyz";
   }
   form1();
}
{
   form formfunc(val:int, val2:real);
   let form1:formfunc;
   {
      let mut val1 = "abc";
      form1 = fn(val:int, val2:real) {
         val1 = "xyz";
         print( val1, val, val2 );
      };
      print( val1 );
   }
   form1( 10, 20.1 );
}

{
   let mut val1 = "abc";
   fn func() {
      val1 = "xyz";
   }
   func();
   print( val1 );
}

let mut g_val2 = "ABC";
{
   let val1;
   {
      let val2;
      {
         let val3 = "abc";
         val2 = val3;
         g_val2 = "XYZ";
      }
      val1 = val2;
   }
   print( val1, g_val2 );
}

fn func1( val:int ):int {
   return val + 1;
}


fn func2( val:int, val2:real ):int, real {
   let test1, test2 = 1, g_val;
   return val + test1, val2 + test2;
}

fn func3( val:int, val2:real, val3:bool ):int, real, bool {
   let test1, test2 = func2( 1, 2.0 );
   return val + test1, val2 + test2, not val3;
}

{
   let mut val1 = "abc";
   let mut val2 = 1;
   let mut val3 = 1;
   fn test1() {
      val1 = "xyz";
      val2 = val2 + 10;
      g_val2 = "XYZ";
   }
   val2 = val2 + 100;
   val3 = val3 + 20;
   test1();
   g_val = g_val + 100;
   print( "closure:", val1, val2, val3, g_val, g_val2 );
}


{
   print( g_val, g_val2 );

   print( func1( 1 ) );
   print( func2( 1, 10.5 )** );
   print( func2( 2, 10.5 ), "AB");
   print( ( func2( 2, 10.5 ) ), "ABC");
   print( func2( 2, 10.5 ) + 1 );
   print( func3( 3, 10.1, true ) ** );
   print( "Hello world.", 1, 1.2, false, nil);
}
