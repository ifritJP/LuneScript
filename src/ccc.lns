let mut g_val = 100;
{
   print( nil or false or 1 );
   print( nil or 2 or 3 );
   print( 4 or 5 );
   print( nil or false );

   print( 1 and 2 and 3 and nil );
   print( 1 and 2 and 3 );
   print( 1 and false and 2 );   
}
{
   let val = "abc";
   fn func( val2:str ) {
      forsort item in (@ g_val, 3.5, 1, 2, 0 ) {
         print( item );
      }
      forsort item, key in { val: g_val, val2: 3.5, "999": 1, "888": 2, "777": 3 } {
         print( key, item );
      }
   }
   func( "xyz" );
}
{
   let val = 10;
   fn func( val2:str ) {
      foreach list in [ [ val, g_val ], [ 3.5, val2 ] ] {
         foreach item in list {
            print( item );
         }
      }
      foreach list in [ (@ val, g_val ), (@ 3.5, val2 ) ] {
         foreach item in list {
            print( item );
         }
      }
      foreach list in [ { val: g_val }, { 3.5: val2 } ] {
         foreach item, key in list {
            print( key, item );
         }
      }
   }
   func( "xyz" );
}
{
   fn func(...<int!>) {
      print( ... );
      print( 10, ... );
      print( 10, ..., 100 );
   }
   func( 1, nil, 2 );
}
{
   let form1;
   {
      let mut val = "abc";
      fn func1(): form {
         return fn () {
            print( val );
         };
      }
      form1 = func1();
      print( val );
      val = "xyz";
   }
   form1();
}
{
   form formfunc(val:int, val2:real);
   let form1:formfunc;
   {
      let mut val1 = "abc";
      form1 = fn(val:int, val2:real) {
         val1 = "xyz";
         print( val1, val, val2 );
      };
      print( val1 );
   }
   form1( 10, 20.1 );
}

{
   let mut val1 = "abc";
   fn func() {
      val1 = "xyz";
   }
   func();
   print( val1 );
}

let mut g_val2 = "ABC";
{
   let val1;
   {
      let val2;
      {
         let val3 = "abc";
         val2 = val3;
         g_val2 = "XYZ";
      }
      val1 = val2;
   }
   print( val1, g_val2 );
}

fn func1( val:int ):int {
   return val + 1;
}


fn func2( val:int, val2:real ):int, real {
   let test1, test2 = 1, g_val;
   return val + test1, val2 + test2;
}

fn func3( val:int, val2:real, val3:bool ):int, real, bool {
   let test1, test2 = func2( 1, 2.0 );
   return val + test1, val2 + test2, not val3;
}

{
   let mut val1 = "abc";
   let mut val2 = 1;
   let mut val3 = 1;
   fn test1() {
      val1 = "xyz";
      val2 = val2 + 10;
      g_val2 = "XYZ";
   }
   val2 = val2 + 100;
   val3 = val3 + 20;
   test1();
   g_val = g_val + 100;
   print( "closure:", val1, val2, val3, g_val, g_val2 );
}


{
   print( g_val, g_val2 );

   print( func1( 1 ) );
   print( func2( 1, 10.5 )** );
   print( func2( 2, 10.5 ), "AB");
   print( ( func2( 2, 10.5 ) ), "ABC");
   print( func2( 2, 10.5 ) + 1 );
   print( func3( 3, 10.1, true ) ** );
   print( "Hello world.", 1, 1.2, false, nil);
}
