macro _section() {
   print( "----%s-----" (__line__) );
}

_section();
{
   _lune_control use_async;

   class Test extend (__AsyncItem,Mapping) {
      let val:str {pub};
   }

   class Async extend LnsThread {
      let mut count:int {pub};
      let mut pipe:__pipe<Test>!;
      
      pub fn __init( pipe:__pipe<Test>! ) {
         super();
         self.pipe = pipe;
         self.count = 0;
      }
      
      pro override fn loop() mut {
         print( "hoge:" );
         while true {
            if! let mut pipe = self.pipe {
               let! val = pipe.get() {
                  print( "hoge:" );
                  break;
               };
               val.$val.find( "%d" (self.count) ## );
               self.count = self.count + 1;
            }
         }
      }
      pub fn start() {
         _lune_control run_async_pipe;
      }
      pub fn put( test:Test ) mut {
         if! let mut pipe = self.pipe {
            pipe.put( test );
         }
      }
   }

   let mut async = new Async( Test._createPipe( 10 ) );
   async.start();
   let mut async2 = new Async( Test._createPipe( 10 ) );
   async2.start();

   for _ = 1, 100000 {
      async.put( new Test( "abcdefg" ) );
      async2.put( new Test( "abcdefg" ) );
   }
   print( async.$count, async2.$count );
}
