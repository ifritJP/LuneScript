subfile use test.startsub;
import test.macro as Macro;
import test.simple;
import lune.base.Writer; // skip-cross
//import test.Sub2;
import test.Sub2 as SUB2;
import test.Sub6;
import test.Class1; // skip-lua51
import test.Class2; // skip-lua51
import test.Class3; // skip-lua51
import test.Class4; // skip-lua51
import test.mapping;

macro _print( symbol2:stat, format:str! ) {
   {
      let work = unwrap format default "%s";
   }
   print( string.format( "macro %s " .. ,,work, ,,,,symbol2, ,,symbol2 ));
}

let mut classA = new simple.ClassA();
print( classA.func( 0 ) );
print( classA.func( 0 ) );
print( classA.sub() );

let classB = new simple.ClassB( 123 );
print( "classB.func()", classB.func() );
print( "classB.sub()", classB.sub() );
let hoge = classB.func2();
print( "Hoge.func()", hoge.func() );
SUB2.sub2val = 10;
print( "Hoge.func()", hoge.func() );

let func3ret = classB.func3() ;
foreach val in func3ret {
   print( val );
}

print( "12%d" ( 10 ) );

{
   let val = 1;
   print( "%g" (val@@real));
}

print( "op", type( {} ),  1 and "2" and 3.0 and type( {} ) );
print( "op", 3.0, 1 and "2" and 3.0 or  {} );
print( "op", "2", 1 and "2" or  3.0 and {} );
print( "op", "2", 1 and "2" or  3.0 or  {} );
print( "op", 1,   1 or  "2" and 3.0 and {} );
print( "op", 1,   1 or  "2" and 3.0 or  {} );
print( "op", 1,   1 or  "2" or  3.0 and {} );
print( "op", 1,   1 or  "2" or  3.0 or  {} );

for index = 1, 4 {
   switch index {
      case 1, 2 {       
         print( "hoge", index );
      }   
      case 3 {
         print( "foo", index );
      }   
      default {
         print( "bar", index );
      }   
   }   
}

fn func__0( val: int! ): int {
   let! val2 = val { return 0; };
   
   return val2 + 2;
}

print( 3, func__0( 1 ) );
print( 0, func__0( nil ) );

macro _test() {
   print( "macro hoge" );
}
_test();


macro _test2( val:int, funcxx:sym ) {
   {
      fn func(val2:int):str {
         return "mfunc%d" (val2);
      }
      let message = "hello %d %s" ( val, ,,,,funcxx );
      let stat1 = `{ print( "macro stat" ); };
      let stat2 = `{
         for index = 1, 10 {
            print( "hoge %d" ( index ) );
         }
      };
      let mut stat3:stat[] = [];
      for index = 1, 4 {
         stat3.insert( `{ print( "foo %d" ( ,,index ) ); } );
      }
      let symbol1 = ,,,func( 1 );
      let symbol2 = ,,,"mfunc%d" (1);
      let stat4 = `{
         ,,symbol1( "100" );
         ,,symbol2( ,,func( 2 ) );
         ,,,func(1)~~( ,,,,symbol1 );
      };
   }
   print( ,,message );
   print( "--funcxx--" );
   ,,funcxx( "macro test2" );
   print( "--stat--" );
   ,,stat1;
   print( "--stat2--" );
   ,,stat2;
   print( "--stat3--" );
   ,,stat3;
   print( "--symbol1--" );
   ,,symbol1( "10" );
   print( "--stat4--" );
   ,,stat4;
}

fn mfunc1( val: str ) {
   print( "mfunc1", val );
}


_test2( 1, print );

macro _classtest( macroVal: int, fieldInfoList: Map<str,str>[] ) {
   {
      let name = ,,,"classTest%d" (macroVal);
      let mut field:stat[] = [];

      foreach fieldInfo in fieldInfoList {
         foreach typeName, varName in fieldInfo {
            field.insert( `{
               pri let ,,,varName : ,,,typeName { pub };
            });
         }
      }
   }
   class ,,name {
      ,,field;
      pub fn func(): int {
         return ,,macroVal;
      }
   }
}

_classtest( 1, [ { "val": "int" }, { "val2": "str" } ] ) ;
_classtest( 2, [] );
_classtest( 3, [] );

{
   let classObj = new classTest1( 1000, "2000" );
   print( classObj.func(), classObj.get_val(), classObj.get_val2() );
}
{
   let classObj = new classTest2();
   print( classObj.func() );
}
{
   let classObj = new classTest3();
   print( classObj.func() );
}


macro _stattest( val: stat ) {
   ,,val;
}

_stattest(
   `{
      print( "1" );
      print( "2" );
   } );

macro _symboltest( symbol: sym, val:stem ) {
   print( __line__, ,,symbol( ,,val ) );
}

_symboltest( string.format, "test\n" );



class GetTest {
   let val: int { pub };
   pub fn __init() {
      self.val = 100;
   }
}
print( (new GetTest()).$val );

class GetTest2 {
   let val: int { pub };
   let mut val2: int { non, pub };
   pub fn __init() {
      self.val = 200;
      self.val2 = 1;
   }
   pub fn getVal2(): int {
      return self.val2;
   }
}

{
   let mut test2 = new GetTest2();
   test2.set_val2( 1 );
   print( test2.$val, test2.getVal2() );
}

{
   fn TestRetDDD(): ... {
      return 1,2,3;
   }   
   let! ddd1, ddd2, ddd3 = TestRetDDD() {
      error( "fail" );
   };
   print( "2 = %d, 3 = %d, 4 = %d"
          (ddd1@@int + 1, ddd2@@int + 1, ddd3@@int + 1 ) );
}

{
   let nilableInt1: int! = nil;
   let! unwrapInt1, unwrapInt2: int = nilableInt1, nil {
      unwrapInt1 = 123; unwrapInt2 = unwrap _unwrapInt2 default -456; }
   then {
      print( "NG" );
   };
   print( "123 = %d, -456 = %d" ( unwrapInt1, unwrapInt2 ) );
}

{
   let nilableInt1: int! = 567;
   let! unwrapInt1, unwrapInt2: int = nilableInt1, 890 {
      unwrapInt1 = 123;
   }; 
   print( "567 = %d, 890 = %d" (unwrapInt1, unwrapInt2 ) );
}

{
   let hoge1: int = 1;
   let hoge2: int = 2;
   unwrap! hoge1, hoge2 = 3, 4 {
      print( "NG" );
   }
   then {
      print( "3 = %d, 4 = %d" ( hoge1, hoge2 ) );
   };
   print( "3 = %d, 4 = %d" ( hoge1, hoge2 ) );
}

{
   let mut hoge1: int = 1;
   let mut hoge2: int = 2;
   sync! hoge1, hoge2 = 3, 4 {
      error( "NG" );
   }
   then {
      print( "3 = %d, 4 = %d" ( hoge1, hoge2 ) );
   }
   do {
      print( "3 = %d, 4 = %d" ( hoge1, hoge2 ) );
      hoge1 = hoge1 * 10;
      hoge2 = hoge2 * 10;
   };
   print( "30 = %d, 40 = %d" ( hoge1, hoge2 ) );
}



{
   let nilableInt1: int! = null;
   if! nilableInt1 {
      print( _exp, "not nil" );
   }
   else {
      print( "nil" );
   }
}

{
   let nilableInt1: int! = 1;
   if! nilableInt1 {
      print( _exp, "not nil" );
   }
   else {
      print( "nil" );
   }
}

{
   let test: int! = nil;
}

{
   let mut val:int! = nil;
   if! let val1, val2:int = 1, val {
      print("NG");
   }
   else {
      print( "OK" );
   }
   val = 2;
   if! let val1, val2:int = 1, val {
      print( "OK", val1, val2 );
   }
   else {
      print("NG");
   }
}

fn testret() : int! {
   return nil;
}

{
   let mut arry: int[] = [];
   arry.insert( 1 );
   foreach val, index in arry {
      print( index, val );
   }
   arry.remove();
}

{
   print( 10 / 3, 10 / 3.0, (10 / 3.0)@@int );
}

{
   foreach val in [ 1, 2, 3 ] {
      let val2:int = val;
   }
}   

class ClassAA {
   pri static let val:int { pub };

   __init {
      ClassAA.val = 1;
   }
   
   pub static fn func() {
      print( "val = %s" (ClassAA.val) ) ;
   }
}

ClassAA.func();
_print( `{ ClassAA.$val } );
{
   let classAA = new ClassAA();
}

SUB2.External.func1( 100 );
SUB2.External.func2( 10 );
SUB2.External.func2( 20 );
_print( `{ SUB2.External.val } );

{
   let foo = {
      "bar": {
         "baz": 1,
         "hoge": [ 'a', 'b', 'c' ],
         "sage": "xyz",
      }
   };

   _print( `{ foo.bar$.baz }, "%s" );
   _print( `{ foo.ba$.baz }, "%s" );
   _print( `{ foo.bar$.hoge$[1] }, "%s" );
   _print( `{ foo.ba$.hoge$[1] }, "%s" );
   _print( `{ foo.bar$.sage$[1] }, "%c" );
   _print( `{ foo.ba$.sage$[1] }, "%s" );
}

{
   class Test {
      let val:int;
      pub fn func(): int {
         return self.val;
      }
   }
   let test:Test! = new Test( 1 );
   _print( `{ test$.func$() } );
   let test2:Test! = nil;
   _print( `{ test2$.func$() } );
   let mut funcnil:form! = fn( param:stem! ):int { print( param ); return 1; };
   _print( `{ funcnil$( nil ) } );
   funcnil = nil;
   _print( `{ funcnil$( 1 ) } );
}


{
   interface IF {
      pub fn func(): int;
   }
   class TestCC extend (IF) {
      pub fn func(): int {
         return 1;
      }
   }
   let test:IF = new TestCC();
   _print( `{ test.func() } );
}

{
   let mut val1, mut val2 = 1, 2;
   val1, val2 = 3, 4;
   _print( `{ val1 } );
   _print( `{ val2 } );
}

{
   class TestDD {
      pri let val:int { pub };
      pub fn func1(): int {
         return 1 + self.val;
      }
      pub fn func2(): int {
         return 2 + self.val;
      }
   }
   class TestEE {
      pri let testDD: TestDD;
      pub fn __init() {
         self.testDD = new TestDD( 100 );
      }
      pub fn func1(): int {
         return 3;
      }
      advertise testDD;
   }
   let testEE = new TestEE();
   _print( `{ testEE.func1() } );
   _print( `{ testEE.func2() } );
}

{
   let mut jsonWriter = new Writer.JSON( io.stdout ); // skip-cross
   jsonWriter.startParent( "hoge", true ); // skip-cross
   jsonWriter.write( "foo", "bar" ); // skip-cross
   jsonWriter.endElement(); // skip-cross
   jsonWriter.fin(); // skip-cross
}

{
   let val = 0xff1;
   _print( `{ val } );
}


{
   enum enumTest {
      val1,
      val2,
      val3 = val2 + 10 - 1 * 2 / 3,
      val4
   }
   _print( `{ enumTest.val4 } );
   let mut val2 = 0;
   val2 = enumTest.val1;
   let val3:str = enumTest.val1.$_txt;

   foreach val in enumTest.$_allList {
      _print( `{ val.$_txt } );
   }
   

   enum enumTest2 {
      val1 = 1.0,
      val2,
      val3 = val2 + 10 - 1 * 2 / 3,
      val4
   }
   _print( `{ enumTest2.val4 } );
   _print( `{ val3 } );
}

{
   let mut val = { "abc": 1 };
   //val.abc = 1;
}

{
   let mut val = { "abc": 1 };
   print( val.abc );
   val.abc = 2;
   val.efg = 3;
   val[ "zzz" ] = 4;
   print( val[ "ab" .. "c" ], val.efg, val.zzz );
}

interface IFTEST {
   pub fn sub();
}

class TEST2 extend (IFTEST) {
   pub fn sub() {
      print( "TEST2.sub()" );
   }
}


class TEST extend (IFTEST) {
   let iftest:IFTEST;

   advertise iftest;
}

{
   let test = new TEST( new TEST2() );
   test.sub();
}

enum TESTENUM {
   val1,
   val2,
   val3,
}

enum TESTENUM2 {
   val1 = 100,
   val2,
   val3,
}

{
   let mut val = TESTENUM.val1;
   val = .val1;
   print( val );
   val = .val2;
   print( val );

   switch ( val ) {
      case .val1, .val2 {
         print( "ok" );
      }  
      default {
         print( "ng" );
      }  
   }

   fn testenum( enum1:TESTENUM, enum2:TESTENUM2 ) {
      print( "testenum", enum1, enum2 );
   }
   testenum( .val2, .val2 );
}

class TestDest {
   let mut val:int;
   pub fn __init( val:int ) {
      self.val = val;
      fn inner() {
         print( "%s" (__func__) );
      }
      print( "%s" (__func__) );
   }
   fn __free() {                                        // skip-lua51
      self.val = self.val * 10;                         // skip-lua51
      print( "__free(): %d %s" (self.val, __func__) );  // skip-lua51
   }                                                    // skip-lua51
}
new TestDest( 100 );


module GlueTest require 'test.glueTest' glue 'hoge_' {
   pub static fn create(val:int): GlueTest;
   pub static fn func1( val:int, txt:str, list:int[] ) : int;
   pub fn func2( val:int, val2:int!, val3:real!, val4:str! ): str;
   //pub fn func2( val:int ): str;
}

{
   GlueTest.func1( 10, "abc", [] );
   let age = GlueTest.create( 100 );
   age.func2( 2 );
   age.func2( 2, 3, 4.0, "xyz" );
}


_print( `{ "%X" (0x1 & 0x3 ) } ); // skip-lua51
_print( `{ "%X" (0x1 | 0x2 ) } ); // skip-lua51
_print( `{ "%X" (0x1 ~ 0x3 ) } ); // skip-lua51
_print( `{ "%X" (0x10 |>> 2 ) } ); // skip-lua51
_print( `{ "%X" (0x1 |<< 2 ) } ); // skip-lua51
_print( `{ "%X" (~2 ) } ); // skip-lua51

_print( `{ __mod__ } );
_print( `{ __line__ } );

mapping.test();

{
   import test.funcSym;
   funcSym.main();
}

class SubIF extend SUB2.IF {
   pub fn __init() {
      super( 1 );
   }
   pub fn sub( val: SUB2.enumTestSub ) {
      print( val );
   }
}
{
   let sub = new SubIF();
   sub.sub( .val1 );
}

Macro._section();
macro _test() {
   {
      let mut fileObj = unwrap io.open( "test/data.lua" );
      let txt = unwrap fileObj.read( "*a" );
      let val = unwrap _load( txt )$();
      let val2 = unwrap val.a;
      let mut val3:stat[] = [];
      foreach val4, key in val2@@Map<str,stem> {
         val3.insert( `{ ,,,key = ,,val4, } );
      }
   }
   enum MacroTest {
      ,,val3
   }
}
_test();
print( MacroTest.A234, MacroTest.B234 );


macro _test( txt:str ) {
   {
      let val = _lnsLoad( "aa", txt ).val;
   }
   print( ,,val, type( ,,val ) );
}

_test( ```
pub let val = 100;
``` );


{
   fn sub():int! {
      return 0;
   }  
   fn func__c( val:int!, val2:int! ): int {
      let val3 = 1;
      when! val, val2 {
         return val + val2;
      }
      return 0;
   }
   _print( `{ func__c( 1, 2 ) } );
   _print( `{ func__c( nil, 2 ) } );
   _print( `{ func__c( 1, nil ) } );
}

{
   macro _test() {
      {  
         let mut val = `{};
         val = `{ print( "test" ); };
      }  
      ,,val;
   }  
   _test();
}

{
   fn sub1( val:int ):int {
      return 10 + val;
   }  
   fn func( testfunc:SUB2.form1, val:int ) {
      _print( `{ testfunc( val ) + 2 } );
   }  
   func( sub1, 3 );
}

{
   fn ite( param:int, prev:stem! ) : int!, str {
      let mut prevInt:int = 0;
      if prev == param {
         return nil, "";
      }  
      when! prev {
         prevInt = prev@@int;
      }  
      else {
         prevInt = 0;
      }  
      let next = prevInt + 1;
      return next, string.format( "%d", next );
   }  

   form iteForm( param:int, prev:stem! ) : int!, str;

   fn testIte( max:int ): iteForm, int, int! {
      return ite, max, nil;
   }  

   apply value1, value2 of testIte( 10 ) {
      print( string.format( '%d "%s"',  value1 + 0, value2.sub( 1 ) ) );
   }
}

{
   fn func( val:int, ... ) : int, int, ... {
      let argList = [ ... ];
      let mut total = val;
      foreach arg in argList {
         when! arg {
            total = total + arg@@int;
         }  
      }  
      return total, val, ...;
   }  

   print( func( 1, 2, 3, 4 ) ); // 10 1 2 3 4 
}

{
   let list = [ 1, 2, 3 ];
   print( list.unpack() );
   let array = [@ 1, 2, 3 ];
   print( array.unpack() );
}

{
   fn sub( algeTest:SUB2.AlgeTest ) {
      match algeTest {
         case .Val1 {
            print( algeTest.$_txt, 1 );
         }  
         case .Val2 {
            print( algeTest.$_txt, 2 );
         }  
         case .Val3( x ) {
            print( algeTest.$_txt, x + 10 );
         }  
         case .Val4( x, y, z ) {
            print( algeTest.$_txt, x + 10, y .. "X" );
         }  
         case .Val5( x ) {
            print( algeTest.$_txt );
            sub( x );
         }
      }
      if algeTest == .Val1 {
         print( __line__, "Val1" );
      }
   }

   sub( .Val1 );
   sub( .Val2 );
   sub( .Val3( 3 ) );
   sub( .Val4( 4, "abc", new SUB2.Hoge2( 1 ) ) );
   sub( .Val5( .Val5( .Val3( 5 ) ) ) );
}


class Test3 {
   pri let mut val:int {pub};
   _lune_control default__init;
   pub static fn create(): Test3 {
      return new Test3( 1 );
   }
}
{
   let test3 = Test3.create();
   print( test3.$val );
}

SUB2._MacroTest2( "abc", 123 );
SUB2._MacroTest3( 123 );
SUB2._test( .val2 );


{
   foreach val in [ SUB2.DDDfunc( 1, 2, 3 ) ] {
      print( val + 10 );
   }
   foreach val in [ SUB2.DDDfunc2( "1", nil, "3" ) ] {
      when! val {
         print( "abc" .. val );
      }
   }
}

{
   fn func( val:int ):int!, int! {
      switch val {
         case 0 {
            return 1, 2;
         }  
         case 1 {
            return 1##;
         }  
         case 2 {
            return ##;
         }  
      }  
      return 1, 2;
   }
   print( func( 0 ) );
   print( func( 1 ) );
   print( func( 2 ) );
}


{
   let mut list = [ 1, 4, 5, 3, 2 ];
   list.sort( fn ( val1:int, val2:int ) : bool { return val1 > val2; } );
   foreach val in list {
      print( val );
   }
   list.sort(##);
   foreach val in list {
      print( val );
   }  
}
{
   let set = (@ "1", "2", "3", "4" );
   forsort val in set {
      print( val .. 1 );
   }
}
{
   let set = (@ 1, 2, 3, 4 );
   let mut total = 0;
   foreach val in set {
      total = total + val;
   }
   print( total );
   forsort val in set {
      print( val + 1 );
   }
}
{
   let mut set1 = (@  1, 2, 3 );
   let set2 = (@  2, 3, 4 );
   macro _dumpSet( setExp:stat ) {
      {  
      }  
      {  
         print( "===== %s" (,,,,setExp) );
         let set = ,,setExp;
         foreach val in set {
            print( val + 10 );
         }  
      }
   }  

   _dumpSet( `{ set1.clone().or(set2) } );
   _dumpSet( `{ set1.clone().and(set2) } );
   _dumpSet( `{ set1.clone().sub(set2) } );
   print( "len:", set1.len() );
}
{
   let mut set:Set<int> = (@);
   set.add( 1 + 2 );
   foreach val in set {
      print( val );
   }
   if set.has( 3 ) {
      print( "exist 3" );
   }
   if not set.has( 1 ) {
      print( "not exist 1" );
   }
   set.del( 3 );
   foreach val in set {
      print( val );
   }
}
class SetTest extend (Mapping) {
   let set:Set<int>;
   pub fn func() {
      foreach val in self.set {
         print( val );
      }
   }
}

{
   let setTest = new SetTest( (@ 1, 2, 3 ) );
   let mapObj = setTest._toMap();
   if! let setTest2 = SetTest._fromMap( mapObj ) {
      setTest2.func();
   }
}

{
   fn func<T>( val:Map<int,T> ): T! {
      return val[ 1 ];
   }  
   print( unwrap func( { 1:"123" } ) .. "abc" );
}


{
   let test1 = new SUB2.TestGen<int>(1);
   test1.func( 10 );
   test1.func( nil );
   test1.func2( 100 );
   let test2 = new SUB2.TestGen<str>("a");
   // SUB2.func( test2 );  // error

   let mut test3 = new SUB2.TestGen<int>(10);
   SUB2.func( test3 );

   let test4 = new SUB2.TestGen<real>(10.0);
   // SUB2.func( test4 );  // error
}


class GenTest {
}
class GenSub1 extend GenTest {
}
class GenSub2 extend GenTest {
}

{
   fn func(test3:&SUB2.TestGen<GenTest>): &GenTest {
      return test3.$val;
   }  

   let test5 = new SUB2.TestGen<GenTest>(new GenTest());
   func( test5 );

   // let test6 = new SUB2.TestGen<GenSub1>(new GenSub1());
   // func( test6 );
}

// func( test3 );  // error

abstract class Super<T> {
   pub abstract fn func( val:T );
}

class TestGenSub extend Super<int> {
   pub override fn func( val:int ) {
      print( val );
   }
}

{
   let testsub = new TestGenSub();
   testsub.func( 10 );
   //testsub.func( "abc" );
}

class TestGenSub2<T> extend Super<T> {
   pub override fn func( val:T ) {
      print( val );
   }
}

{
   let testsub = new TestGenSub2<int>();
   testsub.func( 10 );
   //testsub.func( "abc" );
}
{
   let testsub = new TestGenSub2<str>();
   //testsub.func( 10 );
   testsub.func( "abc" );
}

{
   let val:stem = { 1:"OK" };
   if! let val2 = val[1] {
      print( val2 );
   }  
}
{
   fn func3( val2:&Nilable<int> ) {
      if! val2.val() {
         print( __func__, _exp + 1 );
      }  
      print( __func__, val2.val() );
   }  

   let val1:Nilable = 1;
   let val2:Nilable<int> = nil;

   func3( val1 );
   func3( nil );
}

{
   print( SUB2.Boxfunc( nil ) );
   print( SUB2.Boxfunc( 1 ) );
   print( SUB2.Boxfunc( SUB2.Boxfunc2( 10 ) ) );
   print( SUB2.Boxfunc( SUB2.Boxfunc2( SUB2.Boxfunc3( 20 ) ) ) );
   print( SUB2.Boxfunc( SUB2.Boxfunc2( SUB2.Boxfunc3( nil ) ) ) );
}

{
   fn func__c<T>( val:Nilable<T> ): Nilable<T> {
      return val;
   }  

   print( func__c( 1 ).val() );
   print( func__c( 1.0 ).val() );
   print( func__c( "str" ).val() );
}

macro _dump( symbol:stat ) {
   print( "%s:%d> %s" (__mod__, __line__, ,,symbol ) );
}

class MapTest<T:(Mapping)> extend (Mapping) {
   let testval:T {pub};
}

{
   let test = new MapTest( 10 );
   let map = test._toMap();
   if! let test2 = MapTest<int>._fromMap( map ) {
      _dump( `{ test2.$testval } );
   }  
   else {
      print( "NG" );
   }  
}

{
   let test = new MapTest( [ 1, 2, 3 ] );
   let map = test._toMap();
   if! let test2 = MapTest<List<int>>._fromMap( map ) {
      foreach val in test2.$testval {
         _dump( `{ val } );
      }
   }  
   else {
      print( "NG" );
   }  
}

{
   let test = new MapTest( new SUB2.Val( 1 ) );
   let map = test._toMap();
   if! let test2 = MapTest<SUB2.Val<int>>._fromMap( map ) {
      _dump( `{ test2.$testval.$valval } );
   }  
   else {
      print( "NG" );
   }
}

{
   let test = new MapTest( new SUB2.Val( "abc" ) );
   let map = test._toMap();
   if! let test2 = MapTest<SUB2.Val<str>>._fromMap( map ) {
      _dump( `{ test2.$testval.$valval } );
   }  
   else {
      print( "NG" );
   }  
}

{
   let test = new MapTest( new SUB2.Val( new SUB2.Val( "abc" ) ) );
   let map = test._toMap();
   if! let test2 = MapTest<SUB2.Val<SUB2.Val<str>>>._fromMap( map ) {
      _dump( `{ test2.$testval.$valval.$valval } );
   }  
   else {
      print( "NG" );
   }  
}

{
   fn func( val:stem ) {
      if! val@@@int {
         print( "int:%d" ( _exp ) );
      }  
      if! val@@@real {
         print( "real:%g" ( _exp ) );
      }  
      if! val@@@str {
         print( "str:%s" ( _exp ) );
      }  
   }  
   func( 1 );
   func( 2.5 );
   func( "abc" );
 }

macro _Test( name:sym ) {
   pub fn ,,name () {
      print( __line__, __func__ );
   }
}

class Test {
   _Test( func1 );
   _Test( func2 );
}  
{
   let test = new Test();
   test.func1();
   test.func2();
}

class Test2 {
   pro let val:int!;
}
class Sub2 extend Test2 {
   let val2:int;

   _lune_control default__init_old;
   
   pub fn func() {
      print( __line__, self.val, self.val2 );
   }
}

{
   let sub2 = new Sub2( 2 );
   sub2.func();
}


macro _Hoge( val:str )
{
   {
      let mut stat0:List<stat> = [];
      stat0.insert( `{ case 0 { return "a"; } } );
      stat0.insert( `{ default { return "b"; } } );
      let name = "%sfunc" (val);
      let stat1 = `{
         fn ,,,name ~~(val:int):str {
            switch val {
               ,,stat0
            }
         }
      };
   }
   ,,stat1;
}

{
   _Hoge( "Test" );

   print( Testfunc( 0 ), Testfunc( 1 ) );
}

class Test4 {
   pub let val:int {pub};
}
{
   fn func4() : Test4! {
      return nil;
   }
   let val:Test4! = nil;
   _print( `{ val$.$val } );
   _print( `{ func4()$.$val } );
}
{
   fn func4() : Test4! {
      return new Test4(2);
   }
   let val = new Test4( 1 );
   _print( `{ val.$val } );
   _print( `{ func4()$.$val } );
}
{
   fn func(val:stem!): int! {
      return val@@@int;
   }
   print( func( 1 ), func( nil ) );
}
{
   print( _kind( "hoge" ), _kind( 1 ), _kind( 1.0 ), _kind( [] ), _kind( {} ) );
}
{
   fn func() {
      fn func2() {
         class Test_1 {
            let val:int;
            pub fn func2( val2:int ) {
               print( __func__, val2 );
            }
         }
         pub fn Test_1.func( val2:int ) {
            print( self.val, val2 );
         }
         
         let test = new Test_1( 1 );
         test.func( 1 );
         test.func2( 2 );
      }

      func2();
   }

   func();
}
{
   enum Test_enum {
      Foo,
      Bar,
      Baz,
   }
   let val:Test_enum = .Bar;
   print( val.$_txt );
}
{
   class Test_c {
      let val:int;
   }
   class Sub extend Test_c {
      // 親クラスのコンストラクタに引数があり、
      // 継承しているクラスにメンバがない場合に、エラーする不具合があった。
   }
}
{
   fn func( val:int! ) {
      foreach item, index in [1,2] {
         if index == 1 {
            let! castType = val {
               castType = item;
            };
            print( castType );
         }
         else {
            let! castType = val {
               castType = item;
            };
            print( castType );
         }
      }
   }
   func( nil );
   func( 10 );
}
{
   fn func(): int, int, int {
      return 1, 2, 3;
   }
   fn sub2( val1:int, ... ) {
      print( val1, ... );
   }
   sub2( func()** );
}
{
   let func = fn () {
      print( "hoge" );
   }
   func();
}

{
   fn func( test:SUB2.Test_class ) {
      test.func();
   }

   func( new SUB2.Sub_class( ) );
}
print( "\\''\'\"\\.\\" );
print( '\\""\"\'\\.\\' );
{
   Macro._section();
   SUB2.testPrint();
   {
      import test.Sub2 as sub;
      sub.testPrint();
      {
         import test.Sub2 as subsub;
         subsub.testPrint();
         sub.testPrint();
      }
      sub.testPrint();
   }
   SUB2.testPrint();
}
{
   Macro._section();

   class Test_c<T> {
      let list:List<T> {pub};
   }

   let test = new Test_c( [ 1, 2, 3, "abc" ] );
   foreach val in test.$list {
      print( val );
   }
}
{
   Macro._section();
   let test = SUB2.test3;
   test.func();
}
{
   Macro._section();
   print( SUB2._Test() );
}
{
   Macro._section();
   fn func():int,real,bool,str,int! {
      return 1,2.5,false,"abc",nil;
   }
   print( "hoge:%d,%g,%s,%s,%s" (func()) ); // skip-lua51
}
{
   Macro._section();
   interface IF {
   }
   class Super_c {
   }
   class Test_c extend Super_c (IF) {
   }

   fn func( val:stem ) {
      if! val@@@int {
         print( "int:%d" ( _exp ) );
      }
      if! val@@@real {
         print( "real:%g" ( _exp ) );
      }
      if! val@@@str {
         print( "str:%s" ( _exp ) );
      }
      if! val@@@Test_c {
         print( "class" );
      }
      if! val@@@IF {
         print( "IF" );
      }
   }
   func( 1 );
   func( 1.0 );
   func( "abc" );
   func( new Test_c() );
   func( new Test_c() );
}
{
   Macro._section();
   macro _getTxt( val:__exp ):int {
      {}
      (,,val + 1)
   }
   print( _getTxt( 10 ) );
   print();
}
{
   Macro._section();
   class Test_c {
      pub let mut val:int;
   }
   class Hoge<T:Test_c> {
      let mut test:T {pub};

      pub fn __init( test:T ) {
         self.test = test;
      }
      pri fn current() : T {
         return self.test;
      }
      pub fn set(val:int) {
         let mut info = self.current();
         info.val = val;
      }
   }
   let hoge2 = new Hoge( new Test_c( 1 ) );
   print( hoge2.$test.val );
   hoge2.set( 100 );
   print( hoge2.$test.val );
}
{
   Macro._section();
   macro _test1( val:sym ) {
      print( "hoge", __line__, ,,val );
   }

   macro _test2() {
      _test1( work );
   }


   let work = 1;
   _test2();
   _test1( work);
}
{
   Macro._section();
   macro _test1( val:__exp ) {
      print( "hoge", __line__, ,,val );
   }

   macro _test2() {
      _test1( 1 );
   }

   _test2();
}
{
   Macro._section();
   macro _test( msg:str ) {
      print( "hoge:" .. ,,msg );
   }

   macro _hoge( msg2:str ) {
      _test( "foo:" .. ,,msg2 );
      _test( "foo:" .. ,,msg2 );
   }

   _hoge( "abc" );

}
{
   Macro._section();
   macro _test( msg:str ) {
      print( "foo: %s" ( ,,msg ) );
   }
   macro _hoge( msg2:str ) {
      _test( "hoge: %s" (,,msg2 ) );
   }

   _hoge( "abc" );
}
{
   Macro._section();
   class Test_c {
      pri static let mut val:int {pub,pub};
      pri static let mut val2:str {pub,pub};
      pri let mut val3:int {pub,pub};
      pri let mut val4:str {pub,pub};

      __init {
         Test_c.val = 0;
         Test_c.val2 = "abc";
      }
   }
   print( Test_c.$val, Test_c.$val2 );
   Test_c.set_val( 100 );
   Test_c.set_val2( "xyz" );
   print( Test_c.$val, Test_c.$val2 );

   let mut test = new Test_c( 10, "ABC" );
   print( test.$val3, test.$val4 );
   test.set_val3( 1000 );
   test.set_val4( "XYZ" );
   print( test.$val3, test.$val4 );

}
{
   Macro._section();
   class Hoge {
      let val:str;
      pub fn get_val(): str {
         return self.val;
      }
   }
   class Sub extend Hoge {
   }
   class Test_c extend Hoge {
      let sub:Sub;

      // この advertise で、 get_val は super.get_val() ではなく、sub.get_val() になる。
      advertise sub; 
   }
   {
      let test = new Test_c( "xyz", new Sub( "abc" ) );
      print( test.$val );
   }
}