{
   fn add_sub( val1:int, val2:int ): int, int {
      return val1 + val2, val1 - val2;
   }
   print( add_sub( 1, 2 )** ); // 3, -1
}

{
   fn sub():int {
      let mut val = 0;
      {
         {
            fn func(): int {
               return 1;
            }
            val = val + func();
         }
         fn func(): int {
            return 2;
         }
         val = val + func();
      }
      fn func(): int {
         return 3;
      }
      return val + func();
   }
   print( sub() ); // 6
}

{
   fn test() {
      print( "hoge" );
   }
   fn sub( func:form ) {
      func();
   }
   sub( test ); // hoge
}

{
   form funcform( val:int ):int;
   fn sub( func:funcform ) {
      print( func( 1 ) + 1 );
   }
   sub( fn ( val:int ):int { return val + 1; } ); // 3
}

{
   fn sub( func:form ) {
      func( 1 );
   }
   sub( fn ( val:stem! ) { print( val ); } );  // 1
}
