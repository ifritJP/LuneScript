import test.Sub2;
import test.Sub3;
import test.Sub3_2;
import test.Sub4;

print( "sub2globalfun", sub2globalfun() );
let mut enumVal3 = Sub2.enumTestSub.val3;
print( "enumTestSub.val3", enumVal3, enumVal3 + 10 );
print( "enumTestSub.val3", enumVal3, enumVal3.get__txt() );
print( "enumTestSub.val3", enumVal3, enumVal3.$_txt );
enumVal3 = unwrap Sub2.enumTestSub._from( enumVal3 );

{
   let val = new Sub3( 1 );
   print( "Sub3.func() %d" ( val.func() ));
   print( "Sub4() %d" ( Sub4( 1 ) ));

   print( "Sub3_2: %s" (Sub3_2.func()) );
}

fn func( val : int) {
    print( "abc%s%s" (val,"ab") );
    print( "%X" ("123"[2]) );
    forsort val2, key in { "C": 3, "A": 1, "B": 2 } {
	print( key, val2 );
    }
}
let data : int = 20;
func( data );


pub class ClassA {
   let mut val: int;
   pub fn __init() {
      self.val = 10;
   }
   pub fn func( data1: int ) mut : int {
      self.val = self.val + 1;
      return data1 + self.val;
   }
}

pub fn ClassA.sub() : int {
    return self.val;
}

pub class Super {
    pro let val:int {pub};
    pub fn sub(): int {
        return self.val;
    }
}

pub class ClassB extend Super {
    pub fn __init( val: int ) {
        super( val );
    }
    
    pub fn func(): int {
	return self.$val;
    }
    pub fn func2(): Sub2.Hoge {
        return new Sub2.Hoge( 1 );
    }
    pub fn func3(): int[] {
        return [ 1, 2, 3 ];
    }
}

let classB = new ClassB( 1 );
print( "classB.sub", classB.sub() );

macro _test( val:Map<str,int> ) {
   let test = ,,val;
}

{
   _test( { "a":1, "b":1 } );
   print( test.a, test.b );
}
