class Hoge {
   pub static fn test() {
      print( __func__ );
   }  
}
fn test( aaa:form ) {
   print( __func__ );
   fn func() {
      print( __func__ );
   }
   func();
   aaa(##);
}
pub fn main() {
   test( fn() { print( __func__ ); } ); 
   Hoge.test();
}

class Data {
   let val:int;
   pub fn sub() {
      print( __func__, self.val );
   }
}

class Super<T> {
   pub fn func(val:&T) {
      print( __func__, val );
   }
}

class Test extend Super<Data> {
   pub override fn func(val:&Data) {
      val.sub();
   }
}

class Ctrl {
   pub fn process<T>( obj:&Super<T>, val:&T ) {
      obj.func( val );
   }
}

let ctrl = new Ctrl();
let mut test1 = new Test();
ctrl.process( test1, new Data( 100 ) );
ctrl.process( new Super<str>(), "abc" );
ctrl.process( new Super<int>(), 1 );

// IF の generic は非サポートなのでテストから除外
// interface IF<T> {
//    pub fn func(val:T):T;
// }

// class Test2 extend (IF<int>) {
//    pub fn func(val:int):int {
//       return val + 100;
//    }
// }

// {
//    fn func<T>(obj:IF<T>, val:T) {
//       print( __func__, obj.func( val ) );
//    }  

//    func( new Test2(), 1 );
// }

// interface IF2<T2> {
//    pub fn func(val:T2):T2;
// }

// class Test3 extend (IF<int>, IF2<int>) {
//    pub fn func(val:int): int {
//       return val + 100;
//    }
// }

// class Test4<T4> extend (IF<T4>, IF2<T4>) {
//    pub fn func(val:T4): T4 {
//       return val;
//    }
// }

// {
//    fn sub1( obj:&IF<int> ) {
//       print( __func__, obj.func( 10 ) );
//    }
//    fn sub2( obj:&IF2<int> ) {
//       print( __func__, obj.func( 20 ) );
//    }
//    let test3 = new Test3();
//    sub1( test3 );
//    sub2( test3 );
//    sub2( new Test4<int>() );
// }


class Test6<T> {
   let val:T {pub};
   pub fn func():&T {
      return self.val;
   }
}

{
   let test6 = new Test6(1);
   print( test6.func() + 10 );
   let test7 = new Test6("abc");
   print( test7.func() .. "ABC" );
}

class Test7<T> {
   let val:T;
   pub fn func<T2>(val:T2) : Map<T,T2> {
      return { self.val: val };
   }
}
{
   let test7 = new Test7( "abc");
   foreach val, key in test7.func( 1 ) {
      print( key .. "xyz", val + 10 );
   }
   foreach val, key in test7.func( "ABC" ) {
      print( key .. "xyz", val .. "XYZ" );
   }
}

interface IF3 {
   pub fn foo();
}

class Sub extend (Mapping) {
}

class SubSub extend Sub (IF3) {
   pub fn foo() {
      print( __func__ );
   }
}

class Sub2 {
   pub fn bar() {
      print( __func__ );
   }
}

class Test8<T:(IF3)> {
   let val:T;
   pub fn func() {
      self.val.foo();
   }
}

{
   fn func( test2:&Test8<SubSub> ) {
      test2.func();
   }  

   func( new Test8( new SubSub() ) );
}

class Test9<T:Sub2> {
   let val:T;
   pub fn func() {
      self.val.bar();
   }
}

{
   fn func( test2:&Test9<Sub2> ) {
      test2.func();
   }  

   func( new Test9( new Sub2() ) );
}


abstract class Test10 {
   pub abstract fn func( txt:str );
}

class Sub3 extend Test10 {
   pub override fn func( txt:str ) {
      print( txt, __func__ );
   }
}

class Sub32 extend Test10 {
   pub override fn func( txt:str ) {
      print( txt, __func__ );
   }
}

class Sub3Sub3 extend Sub3 {
}

interface IF4 {
}

class Sub33 extend (IF4) {
}

{
   fn func( txt:str, obj:stem ) {
      if! let val = obj@@@Sub3 {
         val.func( txt );
      }  
      else {
         if! let val = obj@@@Sub32 {
            val.func( txt );
         }  
         else {
            print( txt, type( obj ) );
         }  
      }  
      
   }  

   func( "Sub3Sub3", new Sub3Sub3() );
   func( "Sub32", new Sub32() );
   func( "int", 1 );
   func( "str", "abc" );
}

class SuperSuper<T> {
   let val:T {pub};
}

class Super2<T2> extend SuperSuper<T2> {
   pro fn __init( val:T2 ) {
      super( val );
   }
}

class Test11<T3,T4> extend Super2<T4> {
   let val2:T3 {pub};
   pub fn __init( val:T4, val2:T3 ) {
      super( val );
      self.val2 = val2;
   }
}
{
   let test2 = new Test11( 1, "abc" );
   print( __line__, test2.$val + 10, test2.$val2 .. "xyz" );
}
