//_lune_control disable_mut_control;

{
   let val1, val2 = 0, 1;
   val1 = 1; // error
   val2 = 2; // error
}

{
   let! val1, val2 = 1, 2 {
      val1 = 1;
      val2 = 2;
   }
   then {
      val1 = 1; // error
      val2 = 2; // error
   };
}

{
   sync! val1, val2 = 1, 2 {
      val1 = 1;
      val2 = 2;
   }
   then {
      val1 = 1;
      val2 = 2;
   }
   do {
   };
}

class Test {
   pub let val:int;
   pub let mut val2:int;
   pub let mut val3:int{pub,pub};
   pri let mut list:int[] {pub};
   pri let list2:int[] {pub};
   pri let mut list3:int[] {pub&};
   pri let mut map:Map<int,int> {pub};
   pub static let mut val3:int;
   pub static let val4:int;
   pub fn func1() mut {
      self.val2 = 1;
   }
   pub fn func2() mut {
      self.val2 = 1;
      self.list[ 1 ] = 1;
      self.list.insert( 1 );
      self.map[ 1 ] = 1;
      self.list2.insert( 1 ); // error
   }
   pub fn func3() {
      self.val2 = 1; // error
      self.list[ 1 ] = 1;  // error
      self.list.insert( 1 ); // error
      self.map[ 1 ] = 1; // error
   }
   
   __init {
      Test.val3 = 1;
      Test.val4 = 1;
   }
   pub static fn staticFunc1(): int {
      return Test.val3;
   }
}
Test.val3 = 1;
Test.val4 = 1; // error


let test = new Test( 1, 2, 3, [], [], [], {} );
test = new Test( 1, 2, 3, [], [], [], {} );  // error
test.val = 1;  // error
test.val2 = 1; // error
test.set_val3(1); // error
test.func1(); // error
test.func2(); // error
test.func3();

test.$list.insert( 1 );  // error
test.$map[ 1 ] = 1; // error

{
   let mut val = 1;
   val = test.val;
   let mut val2:int[] = [];
   val2 = test.$list2;
   //val2 = test.$list;
   val2.insert( 1 );
   let val3 = test.$list2;
   val3.insert( 1 ); // error
}


{
   let mut test2 = new Test( 1, 2, 3, [], [], [], {} );
   test2.val2 = 1;
   test2.set_val3(1);
   test2.func1();
   test2.func2();
   test2.func3();

   test2.$list.insert( 1 );
   test2.$map[ 1 ] = 1;
   test2.$list3.insert( 1 );
}


{
   let val = [ [1, 2] ];
   val[1].insert( 1 ); // error
}
{
   let val:List<List<int>> = [ [1, 2] ];
   let mut val2:List<int> = val[1]; // error
   val2.insert( 1 );
   val[1].insert( 1 ); // error
}

class Test2 {
}
fn func( map:&Map<int,&Test2>): Test2! {
   return map[ 1 ]; // error
}


class Test3 {
   let allmut val1:List<int> {pub};
   let allmut val2:List<int> {pub&};
   let mut val3:List<int> {pub};
   let mut val4:List<int> {pub&};
   let allmut val5:&List<int> {pub};
   let allmut val6:&List<int> {pub&};
   let mut val7:&List<int> {pub};
   let mut val8:&List<int> {pub&};
   pub fn __init() {
      self.val1 = [];
      self.val2 = [];
      self.val3 = [];
      self.val4 = [];
      self.val5 = [];
      self.val6 = [];
      self.val7 = [];
      self.val8 = [];
   }
   pub fn func() {
      self.val1.insert( 1 );
      self.val3.insert( 1 ); // error
      self.val5.insert( 1 ); // error
      self.val7.insert( 1 ); // error
   }
}

{
   let test2 = new Test3(); // error
   test2.$val1.insert( 1 );
   test2.$val2.insert( 1 ); // error
   test2.$val3.insert( 1 ); // error
   test2.$val4.insert( 1 ); // error
   test2.$val5.insert( 1 ); // error
   test2.$val6.insert( 1 ); // error
   test2.$val7.insert( 1 ); // error
   test2.$val8.insert( 1 ); // error
}

{
   let mut test2 = new Test3();
   test2.$val1.insert( 1 );
   test2.$val2.insert( 1 ); // error
   test2.$val3.insert( 1 );
   test2.$val4.insert( 1 ); // error
   test2.$val5.insert( 1 ); // error
   test2.$val6.insert( 1 ); // error
   test2.$val7.insert( 1 ); // error
   test2.$val8.insert( 1 ); // error
}
