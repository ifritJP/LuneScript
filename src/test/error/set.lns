{
   let set = (@ 1, 2, 3, nil );
}
{
   let set = (@ "1", "2", "3", "4" );
   forsort val in set {
      let val1:int = val; // error
   }
}
{
   let set = (@ "1", "2", "3", "4" );
   print( set[ "1" ] ); // error
}
{
   let mut set = (@ "1", "2", "3", "4" );
   if! let val = set.has( "1" ) {
      print( val .. "1" ); // error
   }
   set.add( 1 ); // error
   set.del( 1 ); // error
}
{
   fn func( set:Set<int> ) {
      print( set.has( 1 ) );
   }
   func( (@ 1, 2, 3, "a" ) ); // error
}
{
   fn func( set:Set<int,int> ) { // error
      print( set.has( 1 ) );
   }
}
{
   let set = (@ 1, 2, 3 );
   set.or( set ); // error
   set.and( set ); // error
   set.sub( set ); // error
   set.clone();
   set.len();
}
{
   let mut set = (@ 1, 2, 3 );
   let val:int! = 1;
   set.add( val );
   let mut set2 = (@ "1", "2", "3" );
   set2.or( set );  // error
   set2.and( set ); // error
   set2.sub( set ); // error
}
{
   interface Imp {
      pub fn func() mut;
   }
   class Hoge extend (Imp) {
      pub fn func() mut{
      }
   }
   class Foo extend (Imp) {
      pub fn func() mut{
      }
   }
   let hoge = new Hoge();
   let foo = new Foo();
   foreach item in (@ hoge, foo ) {
      item.func(); // error
   }
   foreach item in (@ new Hoge(), foo ) {
      item.func(); // error
   }
   foreach item in (@ hoge, new Foo() ) {
      item.func(); // error
   }
   foreach item in (@ new Hoge(), new Foo() ) {
      item.func();
   }
}
{
   abstract class Imp {
      pub abstract fn func() mut;
   }
   class Hoge extend Imp {
      pub override fn func() mut{
      }
   }
   class Foo extend Imp {
      pub override fn func() mut{
      }
   }
   let hoge = new Hoge();
   let foo = new Foo();
   foreach item in (@ hoge, foo ) {
      item.func(); // error
   }
   foreach item in (@ new Hoge(), foo ) {
      item.func(); // error
   }
   foreach item in (@ hoge, new Foo() ) {
      item.func(); // error
   }
   foreach item in (@ new Hoge(), new Foo() ) {
      item.func();
   }
}
{
   interface IF1 {
      pub fn func();
   }
   interface IF2 {
      pub fn func();
   }

   class Hoge1 extend (IF1,IF2) {
      pub fn func() {
      }
   }
   class Hoge2 extend (IF1,IF2) {
      pub fn func() {
      }
   }
   class Hoge3 extend (IF1) {
      pub fn func() {
      }
   }
   let list = (@ new Hoge1(), new Hoge2(), new Hoge3() );
   foreach item in list {
      item.func();
   }
}
{
   let set:Set<int>! = nil;
   if set$.has( 1 ) { // error
      print( "" );
   }
}
