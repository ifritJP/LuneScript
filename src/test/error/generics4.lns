interface IF {
   pub fn foo();
}

class Sub extend (Mapping) {
}

class SubSub extend Sub (IF) {
   pub fn foo() {
      print( __func__ );
   }
}

class Sub2 {
   pub fn bar() {
      print( __func__ );
   }
}

class Test<T:(IF)> {
   let val:T;
   pub fn func() {
      self.val.foo();
   }
}

{
   fn func( test1:&Test ) {
      test1.func();
   }  

   func( new Test( new Sub() ) ); // error
   func( new Test( new SubSub() ) );
   func( new Test( new Sub2() ) );  // error
   func( new Test( 1 ) );  // error
}

class Test2<T:Sub2> {
   let val:T;
   pub fn func() {
      self.val.bar();
   }
}

{
   fn func2( test2:&Test2 ) {
      test2.func();
   }  

   func2( new Test2( new Sub() ) );  // error
   func2( new Test2( new SubSub() ) );  // error
   func2( new Test2( new Sub2() ) );
   func2( new Test2( 1 ) );  // error
}

class Test3<T> {
   pub fn __init() {
   }
   pub fn clone(): Test3<T> {
      return new Test3<T>();
   }
}

{
   let mut map:Map<int,&Test3<int>> = {};
   let test = new Test3<int>();
   map[ 1 ] = test.clone();
   let test2 = new Test3<real>();
   map[ 2 ] = test2.clone(); // error
}

{
   abstract class Super {
      pub abstract fn func(): str;
   }
   class Sub1 extend Super {
      pub override fn func(): str {
         return __func__;
      }
   }
   class Sub2_2 extend Super {
      pub override fn func(): str {
         return __func__;
      }
   }
   fn func( list:List<Super> ) {
      list.insert( new Sub2_2() );
   }
   fn func2( list:&List<Super> ) {
   }
   let mut list:List<Sub1> = [];
   func( list ); // error List<Sub1> に Sub2_2 のインスタンスが入ってしまう。。。
   func2( list );  // ok list が imut なので OK
   foreach obj in list {
      print( obj.func() );
   }
}
