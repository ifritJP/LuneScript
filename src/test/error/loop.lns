{
   fn func(val:int):int {
      while true {
         switch val {
            default {
               return 1;
            }  
         }  
      }  
      return 1;  // error
   }  
}

{
   fn func(val:int):int {
      while 1 {
         switch val {
            default {
               return 1;
            }  
         }  
      }
      return 1; // error
   }  
}

{
   fn func(val:int):int {
      while true {
         switch val {
            default {
               break;
            }  
         }  
      }  
      return 1;
   }  
}

{
   fn func(val:int):int {
      while true {
         switch val {
            case 1 {
               return 1;
            }  
            default {
               return 1;
            }  
         }  
      }  
      return 1; // error
   }  
}

{
   fn func(val:int):int {
      while true {
         switch val {
            case 1 {
               break;
            }  
            default {
               return 1;
            }  
         }  
      }
      return 1;
   }
}


{
   fn func(val:int[]): int {
      while true {
         foreach item in val {
            if item == 1 {
               return 1;
            }
         }
      }
      return 1; // error
   }
}


{
   fn func(val:int[]): int {
      while true {
         forsort item in val {
            if item == 1 {
               return 1;
            }
         }
      }  
      return 1; // error
   }  
}


{
   fn func(val:int): int {
      while true {
         while val == 1 {
            if val == 2 {
               return 1;
            }
         }
      }
      return 1; // error
   }  
}

{
   fn func(val:int): int {
      while true {
         repeat {
            if val == 1 {
               return 1;
            }
         } val == 1;
      }  
      return 1; // error
   }
}

{
   fn func(val:int): int {
      while true {
         for index = 1, 10 {
            if val == 1 {
               return 1;
            }
         }
      }  
      return 1; // error
   }
}

{
   fn func(val:int): int {
      while true {
         apply item of string.gmatch( "aaa", "a") {
            if val == 1 {
               return 1;
            }
         }
      }
      return 1; // error
   }
}


{
   fn ite( param:int, prev:stem! ) : int!, str {
      let mut prevInt:int = 0;
      if prev == param {
         return nil, "";
      }  
      when! prev {
         prevInt = prev@@int;
      }  
      else {
         prevInt = 0;
      }  
      let next = prevInt + 1;
      return next, string.format( "%d", next );
   }  

   form iteForm( param:int, prev:stem! ) : int!, str;

   fn testIte( max:int ): iteForm, int, int! {
      return ite, max, nil;
   }  

   apply value1, value2 of testIte( 10 ) {
      when! value1 { // error
      }  
      when! value2 { // error
      }
   }  
}



{
   break; // error
}

return 1;  // error

