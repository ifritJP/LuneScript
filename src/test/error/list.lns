{
    foreach val in [ 1, 2, 3 ] {
        let val2:int = val;
    }
}   
{
    foreach val in [ 1, 2, 3, 4.0 ] {
        let val2:int = val; // error
    }
}   
{
    foreach val in [ 1, 2, 3, 4.0 ] {
        let val2:stem = val;
    }
}   
{
    foreach val in [ 1, 2, 3, nil ] {
        let val2:int = val; // error
    }
}   
{
    foreach val in [ 1, 2, 3, nil ] {
        let val2:int! = val;
    }
}   
{
   let mut val:int![] = [];
   val.insert( 1 );
   val.insert( nil ); // error
   val.insert( "a" ); // error
   val.remove(##);    // warn
}
{
   let val:int![] = [];
   val.insert( 1 ); // error
   val.remove( 1 ); // error
}

{
   let list1 = [ 1, 4, 5, 3, 2 ];
   list1.sort( fn ( val1:int, val2:int ) : bool { return val1 > val2; } ); // error
   let mut list2 = [ 1, 4, 5, 3, 2 ];
   list2.sort( fn ( val1:real, val2:int ) : bool { return val1 > val2; } ); // error
   list2.sort( fn ( val1:int, val2:real ) : bool { return val1 > val2; } ); // error
   list2.sort( fn ( val1:int, val2:int ) : int { return val1; } ); // error
   list2.sort( fn ( val1:int, val2:int, val3:int ) : bool { return val1 > val2; } ); // error
}
{
   let list:List<int>! = nil;
   let list2:List<int> = [] or [];
   let list3:List<int> = [] or list; // error
   let list4:List<int> = list or [];
   let list5:List<int> = list or list; // error
}
{
   let val = 1;
   let list:List<val> = []; // error
}
