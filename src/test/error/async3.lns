let globalVal1:List<int> = [];
let globalVal2:&List<int> = [];

{
   fn foo1() {
      print( globalVal1[1] );
   }
   fn foo2() __async {
      print( globalVal1[1] ); // error
   }

   class Val {
      pub fn func1() mut {
      }
   }

   class Test {
      pri let allmut val:Val;
      pub fn func1()  {
         self.val.func1();
      }
      pub fn func2() __async {
         self.val.func1(); // error
      }

      pri let val2:allmut Val;
      pub fn sub1() {
         self.val2.func1();
      }
      pub fn sub2() __async {
         self.sub1(); // error
         self.val2.func1(); // error
         globalVal1.insert(1); // error
         print( globalVal2[1] );
      }
   }

   class Hoge extend (__Runner) {
      let test:Test;
      pub fn func() __async {
         let work = new Test( new Val() ); // error
         print( work );
         self.test.func1(); // error
         self.test.func2();
         foo1(); // error
         foo2();
      }
   }
}
{
   form Test() __trans;
   form Test2();

   fn sub( test2:Test2 ) {
   }

   fn func( test:Test ) {
      let test2:Test2 = test; // error
      test2();
      sub( test ); // error
   }
   func( fn () {} );
}
{
   class Super {
      _lune_control default_async_this_class;
   }

   fn Super.func() {
      fn func() {
      }
      func();
   }
}
{
   form Test2() __trans;

   let mut test:Test2 = fn () __trans {}; // error

   fn func( val:Test2 ) {
      test = val; // error
      func( val );
   }

   class Hoge {
      let test:Test2; // error
   }
}
{
   class Test {
   }
   class Hoge {
      let val:allmut Test;
      pub fn __init() __async {
         self.val = new Test();
      }
      pub fn func() __async {
         print( self.val ); // error
      }
      pub fn func2() __noasync {
         print( self.val );
      }
   }
}
{
   class Hoge {
      let val1:allmut List<int> {pub&};
      let val2:allmut List<int> {pub};
      pub fn func() __async {
         print( self.$val1 ); // error
         print( self.$val2 ); // error
         print( self.get_val2() ); // error
      }
   }
   fn func(hoge:Hoge) __async {
      print( hoge.$val1 ); // error
      print( hoge.$val2 ); // error
      print( hoge.get_val2() ); // error
   }
}
{
   class Val {
      pub fn func() mut {
      }
   }
   class Test {
      let allmut val:Val{pub};
   }
   fn func( test:&Test ) __noasync {
      test.$val.func();  // error
   }
}
{
   fn func() {
      let list = [1];
      foreach _ in list {
         __asyncLock {
            foreach val in list {
               if val == 0 {
                  return; // error
               }
               break;
            }
            break; // error
         }
      }
   }
}
{
   class Foo {
      let val:allmut List<int> {pub};
   }
   class Hoge extend (__Runner) {
      let val:allmut List<int>;
      pub fn __init( foo:&Foo ) __async {
         self.val = [];
         print( foo.$val ); // error
      }
      pub fn run() __async mut {
      }
      pub fn func( foo1:Foo, foo2:&Foo ) { // error
      }
      pub fn func2( foo:List<Foo> ) { // error
      }
      pub fn func3( foo:&List<Foo> ) { // error
      }
      pub fn func4( foo:&List<&Foo> ) {
      }
      pub fn func5( foo:List<List<Foo>> ) { // error
      }
      pub fn func6( foo:&List<List<Foo>> ) { // error
      }
      pub fn func7( foo:&List<&List<Foo>> ) { // error
      }
      pub fn func8( foo:&List<&List<&Foo>> ) { // error
      }
   }
}
{
   let val1:List<int> = [];
   let val2:&List<int> = [];
   let val3:List<List<int>> = [];
   let val4:&List<List<int>> = [];
   let val5:&List<&List<int>> = [];
   class Hoge {
      _lune_control default_async_this_class;
      pub fn func() {
         print( val1[1] ); // error
         print( val2[1] );
         print( val3[1] ); // error
         print( val4[1] ); // error
         print( val5[1] );
      }
   }
}
{
   fn func() __async {
      let obj:Luaval<&stem>! = nil;
      when! obj {
         {
            let list = obj@@&List<int>;
            print( #list ); // error
            foreach val, key in list { // error
               print( key, val );
            }
            forsort val, key in list { // error
               print( key, val );
            }
            print( list[ 1 ] ); // error
         }
         {
            let map = obj@@&Map<str,int>;
            print( map.val ); // error
            print( map[ "val" ] ); // error
         }
         {
            let luaform = obj@@form;
            luaform(##); // error
         }
      }
   }
}
{

   class Super {
      pub fn func() {
      }
   }
   class Sub extend Super {
      _lune_control default_async_this_class;
      pub fn sub() {
         self.func(); // error
      }
   }
}
{
   let list:List<int> = [];

   class Hoge extend (__Runner) {
      fn func() __noasync {
         list.insert( 1 );
      }
      pub fn run() __async mut {
         __asyncLock {
            list.insert( 1 );
            self.func();
         }
         __luaLock {
            list.insert( 1 );
            self.func();
         }
         __unsafe {
            list.insert( 1 ); // error
            self.func(); // error
         }
         list.insert( 1 ); // error
         self.func(); // error
      }
   }
}
