{
   fn func<T>( val:Map<int,T> ): T! {
      return 1; // error
   }
}
{
   fn func<T>( val:Map<int,T> ): T {
      return val; // error
   }
}
{
   fn func<T>( val:Map<int,T> ): T {
      return val[ 1 ]; // error
   }
}
{
   fn func<T>( val:Map<int,T> ): T! {
      return val[ 1 ];
   }
}
{
   fn sub<T1,T2>( val1:T1, val2:T2 ):T2, T1 {
      return val2, val1;
   }
   fn func<T1,T2>( val1:T1, val2:T2 ): T1 {
      let val3, val4 = sub( val1, val2 );
      return val4;
   }
   print( func( 1, "a" ) );
   func( 1 ); // error
   func( 1, 2 );
   func( 1, 2, 3 ); // error
}
{
   fn sub<T1,T2>( val1:T1, val2:T2 ):T2, T1 {
      return val1, val2; // error
   }
}
{
   class Test<T:(Mapping)> extend (Mapping) {
      let val:T {pub};
   }
   let test = new Test(100);
   let map = test._toMap();
   let test2 = Test._fromStem( map ); // error
   print( test2$.$val );
}
{
   class Super {
   }
   class Test<T:Super> {
   }
   class Sub extend Test<str>  { // error
   }
}
{
   class Test<T> {
      pub fn func( val:T ):T {
         return val;
      }
   }
   class Sub extend Test<str>  {
      pub override fn func( val:str ):str { // error
         return val;
      }
   }
}
{
   class Test<T> {
      let mut val:T {pub};
      pub fn func( val:&T ) mut {
      }
   }
   class Hoge<T> {
      let mut test:Test<T> {pub};
      pub fn foo() mut {
         self.test.func( "aa" );  // error
      }
   }
}
{
   class Test22<T> {
      pub static fn func(val:T) : T {
         return val;
      }
   }
   print( Test22.func(1) ); // error
}
{
   class Test<T,T> { // error
      pub fn func<T>(val:T ) { // error
         print( val );
      }
      pub fn func2<T1,T1>(val:T1 ) { //error
         print( val );
      }
   }
   class Test2<T> {
   }

   {
      let test = new Test2<int>();
      let test2 = new Test2<int!>(); // error
   }
   {
      fn sub<T>( val:T ):TT { // error
         return val;
      }
   }
}
