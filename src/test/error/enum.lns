import test.error.Sub6;

Sub6.func().$_txt;

enum testEnum {
   val1,
   val2,
   val3 = 1.0 // error: multiple type
}

enum testEnum2 {
   val1 = 1.0,
   val2,
   val3 = 1, // error: multiple type
}

enum testEnum3 {
   val1 = "1",
   val2,  // error: illegal type
   val3 = 1, // error: multiple type
}

enum testEnum4 {
   val1,
   val2
}

let mut val = testEnum4.val1;
val = .val2;
val = 1; // error: type mismatch

testEnum4 = 1; // error
testEnum4.val1 = 1; // error
testEnum4.val1 = testEnum4.val1; // error


fn func( enum1: testEnum, enum4: testEnum4 ): testEnum4 {
   return .val1;
}
func( .val1, .val1 );

{
   let mut valtest = 1;
   valtest = testEnum4.val1;
}

{
   let mut valtest = 1.0;
   valtest = testEnum2.val2;
}

{
   let mut valtest = "";
   valtest = testEnum3.val1;
}

{
   let valtest = testEnum3.val4; // error
}

{
   let mut valtest = testEnum4._from( 0 );
   valtest = .val1;
   valtest = 1; // error
   if valtest == 1 { // error
   }
   if valtest == testEnum4._from(1) {
   }
   let! valtest2 = valtest {}
   then {
      if valtest2 == 1 {
      }
   };
}

{
   let val1:testEnum = 1; // error
   testEnum._from( "1" ); // error
}

{
   let val1 = testEnum.val1;
   val1 = .val4;
}
