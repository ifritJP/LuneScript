fn func(): int, ... {
   return 1, 2;   
}

{
   let mut val1:int, mut val2 = func();
   val1, val2 = func();
   let mut val10:int, mut val20, mut val30 = func();
   val10, val20, val30 = func();
   let mut val100:int, mut val200, mut val300:stem! = func();
   val100, val200, val300 = func();
   let mut val100:int, mut val200, mut val300:stem = func();  // error
   val100, val200, val300 = func();  // error
   let! mut val1000:int, mut val2000, mut val3000:stem = func() {
      val1000, val2000, val3000 = 1, 2, 3;
   };
   let val:... = 1; // error
}

{
   let mut val1, mut val2, mut val3 = 0, func();
   val1, val2, val3 = 0, func();
   let mut val10, mut val20, mut val30, mut val40 = 0, func();
   val10, val20, val30, val40 = 0, func();
}

{
   let mut val1, mut val2 = func(), 1;
   val1, val2 = func(), 1;
   let mut val10, mut val20, mut val30 = func(), 1;  // error
   val10, val20, val30 = func(), 1;  // error
}


fn func2( val:int ): int, int {
   return val + 1, val + 2;   
}

{
   let mut val1, mut val2 = func2( 1 );
   val1, val2 = func2( 1 );
   let mut val10, mut val20, mut val30 = func2( 1 );  // error
   val10, val20, val30 = func2( 1 );  // error
}

{
   let mut val1, mut val2, mut val3 = 0, func2( 1 );
   val1, val2, val3 = 0, func2( 1 );
   let mut val10, mut val20, mut val30, mut val40 = 0, func2( 1 );  // error
   val10, val20, val30, val40 = 0, func2( 1 );  // error
}

{
   let mut val1, mut val2 = func2( 1 ), 1;
   val1, val2 = func2( 1 ), 1;
   let mut val10, mut val20, mut val30 = func2( 1 ), 1;  // error
   val10, val20, val30 = func2( 1 ), 1;  // error
}


fn func3( val1:int, val2:int, val3:int ) {
}

func3( 1, 2 ); // error
func3( 1, 2, 3 );
func3( 1, func2(0) ); // warn
func3( 1, func2(0), 3 );
func3( func2(0) ); // error
func3( func2(0), 3 ); // error
func3( func2(0), 2, 3 );
func3( func2(0), 2, 3, 4 );  // error

fn func4( val1:int, val2:int, val3:int, ... ) {
}
fn func5(): int, ... {
   return 1,2;
}
fn func6( val1:int!, ... ) {
}
fn func7( val1:stem!, ... ) {
}

func4( 1, 2 ); // error
func4( 1, 2, 3 );
func4( 1, func2( 0 ) );
func4( func2( 0 ) ); // error
func4( func5() ); // error
func4( func5(), 2, 3 );
func4( 1, func5() ); // error
func4( 1, 2, func5() ); // warn
func6( func5() ); // warn
func7( func5() ); // warn

{
   fn func1( ...<int> ): ...<int> {
      return 1, 2, "a";  // error
   }

   fn func2(): ...<int> {
      return 1, nil, 3;  // error
   }  
   
   foreach val in [ func1( 1, 2, "a" ) ] {  // error
      print( val + 10 );
   }
}

{
   fn func1( val:int, val2:int!, val3:int! ): int {
      return 0;
   }  
   fn func2( ...<int> ) {
      func( ...## ); // error
   }
   fn func3( ... ) {
   }
   func1( 1 ); // warn
   func2( 1 ## ); // error
   func3( 2 ## ); // error
   func3( ## );
}

{
   fn func( val:int ):int!, int! {
      switch val {
         case 0 {
            return 1, 2;
         }  
         case 1 {
            return 1; // warn
         }  
         case 2 {
            return;  // warn
         }  
      }  
      return 1, 2;
   }  
}
