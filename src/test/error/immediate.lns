//------ map
foreach val, key in { "ab": [], "cd": [ 1 ] } {
   let val2:List<int> = val;
   let key2:str = key;
}

foreach val, key in { "ab": [ 1 ], "cd": [] } {
   let val2:List<int> = val;
   let key2:str = key;
}

foreach val, key in { "ab": {}, "cd": { 1:1} } {
   let val2:Map<int,int> = val;
   let key2:str = key;
}

foreach val, key in { "ab": {1:1}, "cd": {} } {
   let val2:Map<int,int> = val;
   let key2:str = key;
}

foreach val, key in { "ab": (@), "cd": (@ 1 ) } {
   let val2:Set<int> = val;
   let key2:str = key;
}

foreach val, key in { "ab": (@ 1), "cd": (@) } {
   let val2:Set<int> = val;
   let key2:str = key;
}

//------ list
foreach val in [ [], [1] ] {
   let val2:List<int> = val;
}
foreach val in [ [1], [] ] {
   let val2:List<int> = val;
}
foreach val in [ {}, {1:2} ] {
   let val2:Map<int,int> = val;
}
foreach val in [ {1:2}, {} ] {
   let val2:Map<int,int> = val;
}
foreach val in [ (@), (@1) ] {
   let val2:Set<int> = val;
}
foreach val in [ (@1), (@) ] {
   let val2:Set<int> = val;
}

//------ list
foreach val in (@ [], [1] ) {
   let val2:List<int> = val;
}
foreach val in (@ [1], [] ) {
   let val2:List<int> = val;
}
foreach val in (@ {}, {1:2} ) {
   let val2:Map<int,int> = val;
}
foreach val in (@ {1:2}, {} ) {
   let val2:Map<int,int> = val;
}
foreach val in (@ (@), (@1) ) {
   let val2:Set<int> = val;
}
foreach val in (@ (@1), (@) ) {
   let val2:Set<int> = val;
}
//---- etc
{
   let mut val = {
      "val": [
         {
            "test1": "txt"
         },
         {
            "test2": [
            ]
         }
      ]
   };

   print( val.val$[2]$.test2 );
}
{
   let mut val = [
      [ { "test1": 1 }, { "test2": "aa" } ]
   ];

   print( val[1][1].test1, val[1][2].test2 );
   {
      let val1:int = unwrap val[1][1].test1; // error
      let val2:str = unwrap val[1][2].test2; // error
   }
}
{
   let mut val = [
      [ { "test1": 1 }, { "test2": 2 } ]
   ];

   print( val[1][1].test1, val[1][2].test2 );
   {
      let val1:int = unwrap val[1][1].test1;
      let val2:str = unwrap val[1][2].test2; // error
   }
}
class Test {
}
class Sub extend Test {
}
class SubSub extend Test {
}
{
   let mut val = [
      [ { "test1": new Test() },
        { "test2": new Sub() }, { "test3": new Test() } ] // error
   ];

   print( val[1][1].test1, val[1][2].test2 );
   let val1:int = unwrap val[1][1].test1; // error
   let val2:Test = unwrap val[1][1].test1;
}
{
   let mut val:List<Map<str,Test>> =
       [ { "test1": new Test() },
         { "test2": new Sub() },
         { "test3": new Test() } ]; // error
   print( val );
}
{
   let mut val = [
      [ { "test1": new SubSub() }, { "test2": new Sub() } ] // error
   ];

   print( val[1][1].test1, val[1][2].test2 );
   let val1:int = unwrap val[1][1].test1; // error
   let val2:Test = unwrap val[1][1].test1;
}
{
   let mut val = [ [ new SubSub(), new Sub() ] ];
   let val1:int = val[1][1]; // error
   let val2:Test = val[1][1];
}
{
   let mut val = [@ new SubSub(), new Sub() ];
   let val1:int = val[1]; // error
   let val2:Test = val[1];
}
{
   let mut val = (@ new SubSub(), new Sub() );
   foreach item in val {
      let val1:int = item; // error
      let val2:Test = item;
   }
}
