{
   fn func() {
      return 1; // error
   }  
}
{
   fn func(): int {
      return 1.0; // error
   }
}
{
   fn func(): ... {
      return 1.0;
   }  
}
{
   fn func(): int, int {
      return 1, 0;
   }  
}
{
   fn func(): int {
      return 1, 0; // error
   }  
}
{
   fn func(): stem {
      return 1;
   }  
}
{
   fn func(): stem {
      return;  // error
   }  
   fn func2(): stem, stem {
      return 1;  // error
   }  
}
{
   fn func(): stem {
      return 1;
   }
   fn func2(): stem, stem {
      return func(); // error
   }
}
{
   fn func(): stem, stem {
      return 1, 2;
   }
   fn func2(): stem, stem {
      return func();
   }
}
{
   fn func(): stem, stem, stem {
      return 1, 2, 3;
   }
   fn func2(): stem, stem {
      return func(); // error
   }
}
{
   pub fn func() { // error
   }
   global fn func2() { // error
   }
}

{
   fn func(); // error
}

{
   fn func(): int, int {
      return 1,  2;
   }  
   let val1, val2 = (func()); // error
}

{
   form form1( val:int ): int;
   fn sub1( val:int ):int {
      return 10 + val;
   }  
   fn sub2( val:int, val2:int ):int {
      return 10 + val;
   }  
   fn sub3( val:int ):real {
      return 10.0 + val;
   }  
   fn func( testfunc:form1, val:int ) {
      print( testfunc( val ) + 2 );
   }
   func( sub1, 3 );
   func( sub2, 3 ); // error
   func( sub3, 3 ); // error

   form form2( val:int ): int;
   let test2:form2 = fn( val:int ):int { return 1; };
   func( test2, 1 );
}
