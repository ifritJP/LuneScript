{
   fn func() {
      return 1; // error
   }  
}
{
   fn func(): int {
      return 1.0; // error
   }
}
{
   fn func(): ... {
      return 1.0;
   }  
}
{
   fn func(): int, int {
      return 1, 0;
   }  
}
{
   fn func(): int {
      return 1, 0; // error
   }  
}
{
   fn func(): stem {
      return 1;
   }  
}
{
   fn func(): stem {
      return;  // error
   }  
   fn func2(): stem, stem {
      return 1;  // error
   }  
}
{
   fn func(): stem {
      return 1;
   }
   fn func2(): stem, stem {
      return func(); // error
   }
}
{
   fn func(): stem, stem {
      return 1, 2;
   }
   fn func2(): stem, stem {
      return func(); // warn
   }
}
{
   fn func(): stem, stem, stem {
      return 1, 2, 3;
   }
   fn func2(): stem, stem {
      return func(); // error
   }
}
{
   pub fn func() { // error
   }
   global fn func2() { // error
   }
}

{
   fn func(); // error
}

{
   fn func(): int, int {
      return 1,  2;
   }  
   let val1, val2 = (func()); // error
}

{
   form form1( val:int ): int;
   fn sub1( val:int ):int {
      return 10 + val;
   }  
   fn sub2( val:int, val2:int ):int {
      return 10 + val;
   }  
   fn sub3( val:int ):real {
      return 10.0 + val;
   }  
   fn func( testfunc:form1, val:int ) {
      print( testfunc( val ) + 2 );
   }
   func( sub1, 3 );
   func( sub2, 3 ); // error
   func( sub3, 3 ); // error

   form form2( val:int ): int;
   let test2:form2 = fn( val:int ) {}; // error
   func( test2, 1 );

   form form3():int!;

   let test3:form3 = fn() {}; // error
}

{
   fn func( ..., ...<int> ) { // error
   }  

   fn func2(): ...<int>, ...  { // error
      return 1;
   }  
}

{
   form TestFunc( list:List<int> );

   fn func( test2:TestFunc ) {
   }  

   func( fn ( list:&List<int> ) { } ); // error
}

{
   let func;
   func = fn() {};  // error
   let func2 = fn() {};
   let func3 = fn func4() {};  // error
   let func5, val = fn() {}, 1; // error
   let func6 = (fn func7() {});  // error
}

pub fn () {} // error
{
   fn (): int { return 1; } (); // error
}

{
   fn func() {
   }
   func() and func(); // error
   if func() { // error
   }
   print( func() + 1 ); // error
}

abstract class Super {
   pub abstract fn func2();
   pub abstract fn func() : int;
}

abstract class Sub extend Super {
   pub override fn func2() {
      super(); // error
   }
   pub override fn func(): int {
      return super(); // error
   }
}

