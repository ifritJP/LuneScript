import test.Sub4;

pub let mut sub2val = 1;
sub2val = sub2val + 1;

pub class Hoge {
    pub let val:int;
    pub fn func(): int {
        return sub2val;
    }
}

global let sub2globalval = 1;
global fn sub2globalfun(): int {
   return sub2globalval;
}

pub enum enumTestSub {
   val1,
   val2,
   val3
}
pub let testEnum:enumTestSub! = nil;

pub module External require "test.external" {
   pub static let val:int;
   pub static fn func1( val:int );
   pub fn func2( val:int );
}

pub class Test {
   pub enum Hoge {
      val,
   }

   pub fn func() {
      let hoge = Test.Hoge.val;
      if hoge == .val {
         print( hoge );
      }
   }
}

pub class Hoge2 extend (Mapping) {
   pri let val:int {pub};
}

pub alge AlgeTest {
   Val1,
   Val2,
   Val3( int ),
   Val4( int, str, Hoge2 ),
   Val5( AlgeTest ),
}

pub class Test2 extend (Mapping) {
   pri let algetest:AlgeTest {pub};
}

fn check( mess:str, test1:AlgeTest ) {
   match test1 {
      case .Val1 {
         print( mess, test1.$_txt );
      }  
      case .Val2 {
         print( mess, test1.$_txt, 2 );
      }
      case .Val3( x ) {
         print( mess, test1.$_txt, x + 10 );
      }
      case .Val4( x, y, z ) {
         print( mess, test1.$_txt, x + 10, y .. "X", z.$val );
      }
      case .Val5( x ) {
         print( mess, test1.$_txt );
         check( mess, x );
      }
      default {
         print( mess, "default" );
      }
   }
}

fn testMap( algeTest:AlgeTest ) {
   let name = algeTest.$_txt;
   let test = new Test2( algeTest );
   check( name, test.$algetest );

   let map = test._toMap();
   foreach val, key in map {
      foreach val2, key2 in val@@Map<stem,stem> {
         print( key, key2, val2 );
      }  
   }  
   let test2, err = Test2._fromMap(map);
   when! test2 {
      check( name .. "-2", test2.$algetest );
   }  
   else {
      print( "NG", err );
   }  
}

pub macro _test( val:enumTestSub ) {
   print( ,,val.$_txt );
}

fn main() {
   let test = new Test();
   test.func();

   let mut val = Test.Hoge.val;
   val = .val;
   print( val.$_txt );

   testMap( AlgeTest.Val1 );
   testMap( AlgeTest.Val2 );
   testMap( AlgeTest.Val3( 1) );
   testMap( AlgeTest.Val4( 1, "abc", new Hoge2( 10 )) );
   testMap( AlgeTest.Val5( AlgeTest.Val1 ) );

   _test( .val1 );
}

pub class IF {
   pub let val:int;
}

pub form form1( val:int ): int;

pub fn testext(): int, real, str, Map<int,real>,List<int>, int!, real!, str!, Map<int,real>!,List<int>!
{
   return 1, 1.0, "", {}, [], nil, nil, nil, nil, nil;
}

pub macro _MacroTest2(txt:str,val:int) {
   {
      let val2 = "xyz%s%d"(txt,val);
   }
   print( ,,val2, ,,txt, ,,val );
}

pub macro _MacroTest3(val:int) {
   print( "HOGE", ,,val );
}

pub fn DDDfunc( ...<int> ): ...<int> {
   let list = [ ... ];
   return 0, list.unpack();
}

pub fn DDDfunc2( ...<str!> ): ...<str!> {
   let list = [ ... ];
   return "0", list.unpack();
}


pub fn dump( ...<stem> ) {
   foreach val in [ ... ] {
      io.stdout.write( "%s," (val) );
   }
   io.stdout.write( "\n" );
}
pub class TestGen<T> {
   let val:T {pub};
   pub fn func( val:T! ) {
      dump( self.val, unwrap val default 0 );
   }
}
pub fn TestGen.func2( val:T ) {
   dump( self.val, val );
}

pub fn func( testgen:&TestGen<int> ) {
   testgen.func( 1000 );
}


pub fn Boxfunc( val:Nilable<int>! ): int {
   when! val {
      if! val.val() {
         return _exp;
      }
   }
   return 0;
}
pub fn Boxfunc2( val:Nilable<int>! ): Nilable<int>! {
   return val;
}
pub fn Boxfunc3( val:Nilable<int>! ): Nilable<int>! {
   when! val {
      return val.val();
   }
   return nil;
}


pub class Val<T:(Mapping)> extend (Mapping) {
   let valval:T {pub};
}

pub interface IF_test {
   pub fn func();
}

pub abstract class Test_class extend (IF_test) {
}

pub class Sub_class extend Test_class {
   pub fn func() {
      print( __func__ );
   }
}

pub fn testPrint() {
   print( __func__ );
}

class Hoge3 {
   let val:int {pub};
}

pub class Test3 {
   let hoge:Hoge3;
   local fn __init( hoge:Hoge3 ) {
      self.hoge = hoge;
   }
   pub fn func() {
      print( __func__, self.hoge.$val );
   }
   local fn func2() {
      print( __func__, self.hoge.$val );
   }
}
pub let test3 = new Test3( new Hoge3( 100 ) );
