# -*- mode: makefile; -*-

TEST_OUT=test.exe

CORE_SRCS += lune/base/runtime_c/lns_main.c
CORE_SRCS += lune/base/runtime_c/lns_base.c
CORE_SRCS += lune/base/runtime_c/lns_builtin.c
CORE_SRCS += lune/base/runtime_c/lns_builtinSub.c
CORE_SRCS += lune/base/runtime_c/lns_collection.cxx
CORE_SRCS += lune/base/runtime_c/lns_alloc.cxx
CORE_SRCS += lune/base/runtime_c/lns_luaWrapper.c

SRCS += lune/base/test.c

OBJS = 
OBJS += $(addprefix work/c/,$(addsuffix .o,$(notdir $(basename $(CORE_SRCS)))))
OBJS += $(addprefix work/c/,$(addsuffix .o,$(notdir $(basename $(SRCS)))))

vpath %.c lune/base lune/base/runtime_c work
vpath %.cxx lune/base/runtime_c

LUA_INC_DIR=
LUA_LIB=

ifndef RELEASE
CFLAGS = -g3
else
CFLAGS = -O
endif
CFLAGS += -Wall -Wno-unused-variable -c -Ilune/base/runtime_c -I. -I$(LUA_INC_DIR)

work/c/%.o: %.c
	gcc $(CFLAGS) -o $@ $<
work/c/%.o: %.cxx
	g++ $(CFLAGS) -o $@ $<

%.lc: %
	lctags build gcc $(CFLAGS) $<

all: build

lctags: $(addsuffix .lc,$(CORE_SRCS))


$(OBJS): lune/base/runtime_c/*.h

work/c/lns_builtin.o: lune/base/runtime_c/lns_builtin.c lune/base/runtime_c/lns_builtinInc.c


build: 
	mkdir -p work/c
	$(MAKE) -f Makefile.ccc build-objs
#	gcc $(CFLAGS) -o work/c/lns_base.o lune/base/lns_base.c
#	g++ $(CFLAGS) -o work/c/lns_collection.o lune/base/lns_collection.cxx
#	g++ $(CFLAGS) -o work/c/lns_alloc.o lune/base/lns_alloc.cxx
	g++ -ldl -o $(TEST_OUT) $(OBJS) $(LUA_LIB)
	./$(TEST_OUT)

build-objs: $(OBJS)

clean:
	rm -f $(OBJS)


