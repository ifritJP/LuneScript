/*
MIT License

Copyright (c) 2018, 2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


//_lune_control use_async;
_lune_control default_async_all;
_lune_control default_strict_generics;

import lune.base.Util;
import lune.base.Types;
import lune.base.Async;

let luaKeywordSet:&Set<str> =
    (@
      "if", 
      "else",
      "elseif",
      "while",
      "for",
      "in", 
      "return",
      "break",
      "nil",
      "true",
      "false",
      "{",  
      "}",  
      "do", 
      "require",
      "function",
      "then",
      "end",
      "repeat",
      "until",
      "goto",
      "local"
    );

pub fn isLuaKeyword( txt:str ) : bool {
   return luaKeywordSet.has( txt );
}


fn createReserveInfo( luaMode: bool! ) :
Set<str>, Set<str>, Set<str>, Map<str,Array<str>>
{
   let mut keywordSet:Set<str> = (@);
   let mut typeSet:Set<str> = (@);
   let mut builtInSet:Set<str> = (@);

   builtInSet.add( "require" );
   foreach key in luaKeywordSet {
      if not builtInSet.has( key ) {
         keywordSet.add( key );
      }
   }


   if not luaMode {
      keywordSet.add( "null" );
      keywordSet.add( "let" );
      keywordSet.add( "mut" );
      keywordSet.add( "pub" );
      keywordSet.add( "pro" );
      keywordSet.add( "pri" );
      keywordSet.add( "fn" );
      keywordSet.add( "__request" );
      keywordSet.add( "each" );
      keywordSet.add( "form" );
      keywordSet.add( "class" );
      builtInSet.add( "super" );
      keywordSet.add( "static" );
      keywordSet.add( "advertise" );
      keywordSet.add( "import" );
      keywordSet.add( "new" );
      keywordSet.add( "!" );
      keywordSet.add( "unwrap" );
      keywordSet.add( "sync" );

      typeSet.add( "int" );
      typeSet.add( "real" );
      typeSet.add( "stem" );
      typeSet.add( "str" );
      typeSet.add( "Map" );
      typeSet.add( "bool" );
   }

   // 2文字以上の演算子
   let mut multiCharDelimitMap: Map<str,Array<str>> = {};
   multiCharDelimitMap[ "=" ] = [@ "==" ];
   multiCharDelimitMap[ "<" ] = [@ "<=" ];
   multiCharDelimitMap[ ">" ] = [@ ">=" ];

   if not luaMode {
      multiCharDelimitMap[ "|" ] = [@ "|<", "|>"];
      multiCharDelimitMap[ "|<" ] = [@ "|<<"];
      multiCharDelimitMap[ "|>" ] = [@ "|>>"];
      multiCharDelimitMap[ "[" ] = [@ "[@" ];
      multiCharDelimitMap[ "(" ] = [@ "(@", "(=" ];
      multiCharDelimitMap[ "~" ] = [@ "~=", "~~" ];
      multiCharDelimitMap[ "$" ] = [@ "$[", "$.", "$(" ];
      multiCharDelimitMap[ "$." ] = [@ "$.$" ];
      multiCharDelimitMap[ "." ] = [@ "..", ".$" ];
      multiCharDelimitMap[ ".." ] = [@ "..." ];
      multiCharDelimitMap[ "," ] = [@ ",," ];
      multiCharDelimitMap[ ",," ] = [@ ",,," ];
      multiCharDelimitMap[ ",,," ] = [@ ",,,," ];
      multiCharDelimitMap[ "@" ] = [@ "@@" ];
      multiCharDelimitMap[ "@@" ] = [@ "@@@", "@@=" ];
      multiCharDelimitMap[ "#" ] = [@ "##" ];
      multiCharDelimitMap[ "*" ] = [@ "**" ];
   }
   else {
      multiCharDelimitMap[ "." ] = [@ ".." ];
      multiCharDelimitMap[ "~" ] = [@ "~=" ];
   }

   return keywordSet, typeSet, builtInSet, multiCharDelimitMap;
}


let quotedCharSet:&Set<str> =
    (@
      'a',  
      'b',  
      'f',  
      'n',  
      'r',  
      't',  
      'v',  
      '\\', 
      '"',  
      "'"
    );


pub let op2Set:&Set<str> =
    (@
      '+',  
      '-',  
      '*',  
      '/',  
      '^',  
      '%',  
      '&',  
      '~',  
      '|',  
      '|>>',
      '|<<',
      '..', 
      '<',  
      '<=', 
      '>',  
      '>=', 
      '==', 
      '~=', 
      'and',
      'or', 
      '@',  
      '@@', 
      '@@@',
      '='
    );

let op1Set:&Set<str> =
    (@
      '-',  
      'not',
      '#',  
      '~',  
      '`{',  
      ',,', 
      ',,,',
      ',,,,'
    );


// pub static fn getKindTxt( kind: int ) : str {
//    return unwrap kind2Txt[ kind ];
// }

pub fn isOp2( ope: str ) : bool {
   return op2Set.has( ope );
}

pub fn isOp1( ope: str ) : bool {
   return op1Set.has( ope );
}

pub final class AsyncItem extend (__AsyncItem,Mapping) {
   pub let list : &List<&Types.Token>;
}

let mut defaultPipeSize = 100;
pub fn setDefaultPipeSize( size:int ) {
   defaultPipeSize = size;
}


pub class MultiLineToken extend Types.Token {
   let endPos:&Types.Position {pub};

   pub override fn get_endLineNo():int {
      return self.endPos.lineNo;
   }
}

pub class Tokenizer extend Async.Pipe<AsyncItem> {
   let streamName: str {pub};
   let mut lineNo : int;
   let mut prevToken: &Types.Token;
   let multiCharDelimitMap : &Map<str,&Array<str>>;
   let luaMode:bool;
   let mut lineList:&List<str>;
   let mut firstLine:bool;
   let overridePos:&Types.Position!;
   let stream:iStream;
   let token2kind:Map<str,Types.TokenKind>;

   pub fn __init( streamName:str, stream:iStream, luaMode:bool,
                  overridePos:&Types.Position!, pipeSize:int! )
   {
      super( __lns.Sync._createPipe( AsyncItem,
                                     unwrap pipeSize default defaultPipeSize ) );

      self.stream = stream;
      self.lineList = [];
      self.streamName = streamName;
      self.overridePos = overridePos;
      self.firstLine = true;
      self.lineNo = 0;
      self.prevToken = Types.noneToken;
      self.luaMode = luaMode;

      let keywordSet, typeSet, _, multiCharDelimitMap = createReserveInfo( luaMode );

      self.multiCharDelimitMap = multiCharDelimitMap;

      self.token2kind = {};
      foreach txt in keywordSet { self.token2kind[ txt ] = .Kywd; }
      foreach txt in typeSet { self.token2kind[ txt ] = .Type; }
      foreach txt in op1Set { self.token2kind[ txt ] = .Ope; }
      foreach txt in op2Set { self.token2kind[ txt ] = .Ope; }
   }

   pro override fn setup() mut {
      let mut lineList:List<str> = [];
      while true {
         let! line = self.stream.read( '*l' ) {
            break;
         };
         lineList.insert( line );
      }
      self.lineList = lineList;
      self.stream.close();
   }

   local static fn create(
      tokenizerSrc:&Types.TokenizerSrc, stdinFile:&Types.StdinFile!,
      overridePos:&Types.Position! ) : Tokenizer!, str
   {
      fn createStream(mod:str,path:str) __trans : iStream!, str {
         when! stdinFile {
            if stdinFile.$mod == mod {
               return new Util.TxtStream( stdinFile.$txt ), "";
            }
         }
         if! io.open( path, "r" ) {
            return _exp, "";
         }
         return nil, "%s: failed to open -- %s" (__func__, path);
      }
      fn createStreamWithBaseDir(mod:str,baseDir:str!, path:str) __trans : iStream!, str {
         when! baseDir {
            return createStream( mod, Util.pathJoin( baseDir, path ) )**;
         } else {
            return createStream( mod, path )**;
         }
      }
      

      fn createStreamFrom() __trans : str, bool, iStream!, str, int! {
         _match tokenizerSrc {
            case .LnsCode( txt, path, pipeSize ) {
               return path, false, new Util.TxtStream( txt ), "", pipeSize;
            }
            case .LnsPath( baseDir, path, mod, pipeSize ) {
               let mut stream, mess = createStreamWithBaseDir( mod, baseDir, path );
               return path, false, stream, mess, pipeSize;
            }
            case .Tokenizer( path, luaMode, mod, pipeSize ) {
               let mut stream, mess = createStream( mod, path );
               return path, luaMode, stream, mess, pipeSize;
            }
         }
      }

      let streamName, luaMode, mut stream, mess, pipeSize = createStreamFrom();
      when! stream {
         return new Tokenizer( streamName, stream, luaMode, overridePos, pipeSize ), "";
      }
      return nil, mess;
   }

   pub fn parse() mut : List<Types.Token>!;

   pro override fn access() mut : Async.PipeItem<AsyncItem>! {
      let! tokenList = self.parse() {
         return nil;
      };
      return new Async.PipeItem( new AsyncItem( tokenList ) );
   }
}

class Runner extend (__Runner)
{
   let mut tokenizer:Tokenizer! {pub};
   let mut errMess:str {pub};

   pub fn __init( tokenizerSrc:&Types.TokenizerSrc, stdinFile:&Types.StdinFile!,
                  overridePos:&Types.Position! )
   {
      self.tokenizer, self.errMess = Tokenizer.create( tokenizerSrc, stdinFile, overridePos );

      if! self.tokenizer {
         _exp.start();
         if not __run( self, __lns.runMode.Skip, "tokenizer - %s" (_exp.$streamName) ) {
            // スレッドフルの場合、
            // 同期実行せずに getNext() 毎に tokenizer する
            _exp.stop();
         }; 
      }
   }

   pub fn run() mut {
      if! self.tokenizer {
         _exp.run();
      }
   }
}

pub fn create( tokenizerSrc:&Types.TokenizerSrc, stdinFile:&Types.StdinFile!,
               overridePos:&Types.Position!, async:bool ) : Tokenizer!, str
{
   if async {
      let mut runner = new Runner( tokenizerSrc, stdinFile, overridePos );
      return runner.$tokenizer, runner.$errMess;
   }
   let mut tokenizer, mess = Tokenizer.create( tokenizerSrc, stdinFile, overridePos )**;
   when! tokenizer {
      // stop を呼ぶと、 setup() が内部的に呼ばれる。
      tokenizer.stop();
   }
   return tokenizer, mess;
}

fn Tokenizer.createInfo(
   mut tokenKind: Types.TokenKind, token: str,
   tokenColumn: int, tokenLineNo:int!, endColumn:int! ) mut : Types.Token
{
   let! lineNo = tokenLineNo {
      lineNo = self.lineNo;
   };
   if tokenKind == .Symb {
      if! let kind = self.token2kind[ token ] {
         tokenKind = kind;
      }
   }
   
   let mut consecutive = false;
   if self.prevToken.pos.lineNo == lineNo and
      self.prevToken.pos.column + #self.prevToken.txt == tokenColumn
   {
      consecutive = true;
   } elseif self.prevToken.kind == .Str {
      if! let multiLineToken = self.prevToken@@@MultiLineToken {
         let endPos = multiLineToken.$endPos;
         if endPos.lineNo == lineNo and endPos.column + 1 == tokenColumn {
            consecutive = true;
         }
      }
   }
   let mut newToken:Types.Token;
   when! tokenLineNo, endColumn {
      newToken = new MultiLineToken(
         tokenKind, token,
         Types.Position.create(
            lineNo, tokenColumn, self.streamName, self.overridePos ),
         consecutive, [],
         Types.Position.create(
            self.lineNo, endColumn, self.streamName, self.overridePos ) );
   } else {
      newToken = new Types.Token(
         tokenKind, token,
         Types.Position.create(
            lineNo, tokenColumn, self.streamName, self.overridePos ),
         consecutive, [] );
   }
   self.prevToken = newToken;
   return newToken;
}


/*
token の beginIndex から始まる数値表現領域を特定する

@param token 文字列
@param beginIndex token 内の検索開始位置。 この位置から数値表現が始まる。
@return int 数値表現の終了位置
@return bool 整数かどうか
*/
fn Tokenizer.analyzeNumber( token: &str, beginIndex: int ) : int, bool {
   let! mut nonNumIndex = token.find( '[^%d]', beginIndex ## ) {
      return #token, true;
   };
   let mut intFlag = true;
   let mut nonNumChar = token[nonNumIndex];
   if nonNumChar == ?. {
      // .        
      intFlag = false;   
      unwrap! nonNumIndex = token.find( '[^%d]', nonNumIndex + 1 ## ) {
         return #token, intFlag;
      };
      //nonNumChar = token[nonNumIndex## );
      nonNumChar = token[ nonNumIndex ];
   }
   if nonNumChar == ?X or nonNumChar == ?x {
      // X or x   
      unwrap! nonNumIndex = token.find( '[^%da-fA-F]', nonNumIndex + 1 ## ) {
         return #token, intFlag;                
      };
      nonNumChar = token[nonNumIndex];       
   }
   if nonNumChar == ?E or nonNumChar == ?e {
      // E or e   
      intFlag = false;                       
      let nextChar = token[nonNumIndex + 1 ];
      if nextChar == ?- or nextChar == ?+ {
         // '-' or '+'  
         unwrap! nonNumIndex = token.find( '[^%d]', nonNumIndex + 2 ## ) {         
            return #token, intFlag;                                                   
         };
      }
      else {                                 
         unwrap! nonNumIndex = token.find( '[^%d]', nonNumIndex + 1 ## ) {
            return #token, intFlag;                
         };
      }
   }
   return nonNumIndex - 1, intFlag;       
}

fn Tokenizer.readLine() mut : str! {
   if self.lineNo >= #self.lineList {
      return nil;
   }
   self.lineNo = self.lineNo + 1;
   return self.lineList[ self.lineNo ];
}

/*
ソースをコメント、文字列、その他(ステートメント候補)に
カテゴライズした結果を登録する。

この関数内でステートメント候補の文字列をトークン毎に分割して登録する。

@param kind カテゴライズの種類。 その他は .Symb を指定する。
@param val カテゴライズした文字列
@param column 現在の解析行内の位置
    */

fn Tokenizer.addVal(
   list: List<Types.Token>, kind: Types.TokenKind, val: str, column: int ) mut
{
   if kind ~= .Symb {
      list.insert( self.createInfo( kind, val, column ## ) );
      return;
   }
   
   let mut searchIndex = 1;
   while true {
      // 空白系以外の何らかの文字領域を探す
      let! tokenIndex, tokenEndIndex = string.find( val, "[%p%w]+", searchIndex ## )
      {
         break;
      };
      let columnIndex = column + tokenIndex - 2;
      searchIndex = tokenEndIndex + 1;
      let token:str = val.sub( tokenIndex, tokenEndIndex );
      let mut subIndex = 1;
      while #token >= subIndex {
         if token.find( '^[%d]', subIndex ## ) or
            token[subIndex] == ?- and token.find( '^[%d]', subIndex + 1 ## )
         {
            // 数値の場合
            let mut checkIndex = subIndex;
            if token[checkIndex] == ?- {
               checkIndex = checkIndex + 1;
            }
            let endIndex, intFlag = self.analyzeNumber( token, checkIndex );
            let mut info = self.createInfo(
               intFlag and Types.TokenKind.Int or Types.TokenKind.Real,
               token.sub( subIndex, endIndex ), columnIndex + subIndex ## );
            list.insert( info );
            subIndex = endIndex + 1;
         }
         else {
            // 区切り文字を探す
            if! string.find( token, '[^%w_]', subIndex ## ) {
               let index = _exp;
               if index > subIndex {
                  let mut info = self.createInfo(
                     .Symb, token.sub( subIndex, index - 1 ),
                     columnIndex + subIndex ## );
                  list.insert( info );
               }
               let mut delimit = token.sub( index, index );
               let mut candidateList = self.multiCharDelimitMap[ delimit ];
               while candidateList {
                  let mut findFlag = false;
                  foreach candidate in unwrap ( candidateList ) {
                     if candidate == token.sub(
                        index, index + #candidate - 1 )
                     {
                        delimit = candidate;
                        candidateList = self.multiCharDelimitMap[ delimit ];
                        findFlag = true;
                        break;
                     }
                  }
                  if not findFlag {
                     break;
                  }
               }
               subIndex = index + #delimit;

               let mut workKind = Types.TokenKind.Dlmt;
               if op2Set.has( delimit ) or op1Set.has( delimit ) {
                  workKind = .Ope;
               }
               if delimit == "..." {
                  workKind = .Symb;
               }
               if delimit == "?" {
                  let nextChar = token.sub( index, subIndex );
                  list.insert( self.createInfo(
                     .Char, nextChar, columnIndex + subIndex ## ) );
                  subIndex = subIndex + 1;
               }
               else {
                  list.insert( self.createInfo(
                     workKind, delimit, columnIndex + index ## ) );
               }
            }
            else {
               if subIndex <= #token {
                  list.insert(
                     self.createInfo( .Symb, token.sub( subIndex ##),
                                      columnIndex + subIndex ## ) );
               }
               break;
            }
         }
      }
   }
};



pub fn Tokenizer.parse() mut : List<Types.Token>! {
   let! mut rawLine = self.readLine() {
      return nil;
   };
   if self.firstLine {
      self.firstLine = false;
      if rawLine.find( "^#!" ## ) {
         let mut token = new Types.Token(
            .Sheb, rawLine,
            new Types.Position( self.lineNo, 1, self.streamName ## ),
            false, [] );
         return [ token ];
      }
   }

   /*
    複数行コメントの処理。

    @param comIndex 現在の解析行内の複数行コメント開始位置
    @param termStr 複数行コメントの終端文字列
    */
   fn multiComment( comIndex: int, termStr: str ): str, int {
      let mut searchIndex = comIndex;
      let mut comment = "";
      while true {
         if! let _, termEndIndex = string.find(
            rawLine, termStr, searchIndex, true )
         {
            comment = comment .. rawLine.sub( searchIndex, termEndIndex );
            return comment, termEndIndex + 1;
         }
         comment = comment .. rawLine.sub( searchIndex ## ) .. "\n";
         searchIndex = 1;
         if! self.readLine() {
            rawLine = _exp;
         } else {
            return comment, -1;
         }
      }
   };

   let mut startIndex = 1;
   // 検索開始位置。
   // 領域開始位置と検索開始位置が異なる場合がある。
   // たとえば、 0.12e-2 のときに - の部分が検索開始位置、 0 の部分が領域開始位置になる
   let mut searchIndex = startIndex;

   fn getChar( index:int ) : int {
      if #rawLine >= index {
         return rawLine[ index ];
      }
      return 0;
   }
   
   let mut list: List<Types.Token> = [];

   // 領域をカテゴライズする
   while true {
      let mut syncIndexFlag = true;
      let pattern = ```[/%-%?"%'%`].```;  // /-?"'` の特殊処理が必要なパターンを見つける
      let! index = string.find( rawLine, pattern, searchIndex ## ) {
         // 特殊処理が必要ない場合
         self.addVal( list, .Symb, rawLine.sub( startIndex ##), startIndex );
         return list;
      };

      // 特殊処理が必要な場合
      let findChar = getChar( index );
      let nextChar = getChar( index + 1 );

      if findChar == ?- and nextChar ~= ?- {
         searchIndex = index + 1;
         syncIndexFlag = false;
      }
      else {
         if startIndex < index {
            self.addVal( list, .Symb, rawLine.sub( startIndex, index - 1 ), startIndex );
         }
         if findChar == ?\' or findChar == ?\" {
            // 文字列の場合
            let mut workIndex = index + 1;
            let workPattern = '["\'\\]';
            while true {
               let! endIndex = string.find( rawLine, workPattern, workIndex ## ) {
                  // 文字列の区切り文字がない場合はエラー
                  Util.err( "%s:%d:%d: error: illegal string -- %s" // 要対応
                            ( self.streamName, self.lineNo, index, rawLine ) );
               };
               let workChar = rawLine[ endIndex];
               if workChar == findChar {
                  // 対になる区切り文字だった場合は文字列として登録
                  self.addVal( list, .Str, rawLine.sub( index, endIndex ), index );
                  searchIndex = endIndex + 1;
                  break;
               }
               elseif workChar == ?\\ {
                  // \ の場合は、次の文字がクオートされるので +2
                  workIndex = endIndex + 2;
               }
               else {
                  workIndex = endIndex + 1;
               }
            }
         }
         elseif findChar == ?` {
            if ( nextChar == findChar and getChar( index + 2 ) == ?` ) { // '```'
               // 複数行文字列の場合
               let lineNo = self.lineNo;
               let txt, nextIndex = multiComment( index + 3, '```' );
               //self.addVal( list, .Str, '```' .. txt, index );
               list.insert(
                  self.createInfo( .Str, '```' .. txt, index, lineNo, nextIndex - 1 ) );
               if nextIndex == -1 {
                  return list;
               }
               searchIndex = nextIndex;
            } elseif nextChar == 123 { // {
               self.addVal( list, .Ope, '`{', index );
               searchIndex = index + 2;
            // } else {
            //    self.addVal( list, .Ope, '`', index );
            //    searchIndex = index + 1;
            }
         }
         elseif findChar == ?? {
            let mut codeChar = rawLine.sub( index + 1, index + 1 );
            if nextChar == ?\\ {
               let quoted = rawLine.sub( index + 2, index + 2 );
               if quotedCharSet.has( quoted ) {
                  codeChar = rawLine.sub( index + 1, index + 2 );
               }
               else {
                  codeChar = quoted;
               }
               searchIndex = index + 3;
            }
            else {
               searchIndex = index + 2;
            }
            self.addVal( list, .Char, codeChar, index );
         }
         else {
            if self.luaMode and findChar == ?- and nextChar == ?-{
               // 1行コメント
               self.addVal( list, .Cmnt, rawLine.sub( index ## ), index );
               searchIndex = #rawLine + 1;
               // Lua の複数行コメントは非対応
            } elseif findChar == ?/ {
               // コメント処理
               if nextChar == ?* {
                  // 複数行コメントの場合
                  let lineNo = self.lineNo;
                  let comment, nextIndex = multiComment( index + 2, "*/" );
                  //self.addVal( list, .Cmnt, "/*" .. comment, index );
                  list.insert(
                     self.createInfo(
                        .Cmnt, "/*" .. comment, index, lineNo, nextIndex - 1 ) );
                  if nextIndex == -1 {
                     return list;
                  }
                  searchIndex = nextIndex;
               }
               elseif nextChar == ?/ {
                  // 1行コメント
                  self.addVal( list, .Cmnt, rawLine.sub( index ## ), index );
                  searchIndex = #rawLine + 1;
               }
               else {
                  self.addVal( list, .Ope, "/", index );
                  searchIndex = index + 1;
               }
            } else {
               Util.err( "%s:%d:%d: error: illegal syntax -- %s" // 要対応
                         ( self.streamName, self.lineNo, index, rawLine ) );
            }
         }
      }
      if syncIndexFlag {
         startIndex = searchIndex;
      }
   }
}
