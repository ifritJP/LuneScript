/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control default_async_all;

import lune.base.Ast;
import lune.base.Nodes;
import lune.base.Parser;
import lune.base.Types;
import lune.base.Util;
import lune.base.LuneControl;

pub class Opt {
   let parent:&Nodes.Node {pub};

   pub fn __init( parent:&Nodes.Node ) {
      self.parent = parent;
   }
   pub fn nextOpt( parent:&Nodes.Node ) mut : Opt {
      return new Opt( parent );
   }
}

class FormatterFilter extend Nodes.Filter<Opt> {
   let mut stream:Util.SimpleSourceOStream;
   let forMacroFlag:bool;

   pub fn __init( moduleTypeInfo:&Ast.TypeInfo,
                  moduleInfoManager:&Ast.ModuleInfoManager!, stream:oStream,
                  forMacroFlag:bool )
   {
      super( true, moduleTypeInfo, moduleInfoManager );
      self.stream = new Util.SimpleSourceOStream( stream, nil, 3 );
      self.forMacroFlag = forMacroFlag;
   }

   advertise stream;
}

pub fn createFilter( moduleTypeInfo:&Ast.TypeInfo,
                     stream:oStream, forMacroFlag:bool ): Nodes.Filter<Opt>
{
   return new FormatterFilter(
      moduleTypeInfo, moduleTypeInfo.$scope, stream, forMacroFlag );
}

pub fn FormatterFilter.outputHeadComment( node:&Nodes.Node ) mut {
   foreach commentNode in unwrap node.$commentList default [] {
      self.writeln( commentNode.txt );
   }
}

fn filter( node: &Nodes.Node, filter: FormatterFilter, opt:Opt ) {
   filter.outputHeadComment( node );
   node.processFilter( filter, opt );
}

fn getTxt( token: Parser.Token ): str {
   return token.txt;
}

pub override fn FormatterFilter.processNone(
   node: &Nodes.NoneNode, opt:Opt ) mut
{
   
};

pub override fn FormatterFilter.processShebang(
   node: &Nodes.ShebangNode, opt:Opt ) mut
{
   self.writeln( node.$cmd );
};

pub override fn FormatterFilter.processBlankLine(
   node: &Nodes.BlankLineNode, opt:Opt ) mut
{
   for _ = 1, node.$lineNum {
      self.writeln( "" );
   }
};

pub override fn FormatterFilter.processImport(
   node: &Nodes.ImportNode, opt:Opt ) mut
{
   let info = node.$info;
   self.write( "import %s" (info.$modulePath) );
   if not info.$modulePath.find( "%." .. info.$assignName .. "$"## ) {
      self.write( " as %s" (info.$assignName) );
   }
   self.writeln( ";" );
};
pub override fn FormatterFilter.processRoot(
   node: &Nodes.RootNode, opt:Opt ) mut
{
   foreach child in node.$children {
      filter( child, self, opt.nextOpt( node ) );
   }
};
pub override fn FormatterFilter.processSubfile(
   node: &Nodes.SubfileNode, opt:Opt ) mut
{
}

pub override fn FormatterFilter.processLuneControl(
   node: &Nodes.LuneControlNode, opt: Opt ) mut
{
   self.write( "_lune_control " );
   _match node.$pragma {
      case .default__init {
         self.write( "default__init" );
      }
      case .default__init_old {
         self.write( "default__init_old" );
      }
      case .disable_mut_control {
         self.write( "disable_mut_control" );
      }
      case .ignore_symbol_ {
         self.write( "ignore_symbol_" );
      }
      case .load__lune_module {
         self.write( "load__lune_module" );
      }
      case .limit_conv_code( codeSet ) {
         self.write( "limit_conv_code" );
         foreach code in codeSet {
            self.write( " %s" (code) );
         }
      }
      case .use_async {
         self.write( "use_async" );
      }
      case .run_async_pipe {
         self.write( "run_async_pipe" );
      }
      case .default_async_func {
         self.write( "default_async_func" );
      }
      case .default_async_all {
         self.write( "default_async_all" );
      }
      case .default_async_this_class {
         self.write( "default_async_this_class" );
      }
      case .default_noasync_this_class {
         self.write( "default_noasync_this_class" );
      }
      case .use_macro_special_var {
         self.write( "use_macro_special_var" );
      }
      case .single_phase_ast {
         self.write( "single_phase_ast" );
      }
   }
   self.writeln( ";" );
}

pub override fn FormatterFilter.processRequest(
   node: &Nodes.RequestNode, opt:Opt ) mut
{
   self.write( "__request " );
   filter( node.$processor, self, opt.nextOpt( node ) );
   self.write( " " );
   filter( node.$exp, self, opt.nextOpt( node ) );
};

pub override fn FormatterFilter.processAsyncLock(
   node: &Nodes.AsyncLockNode, opt:Opt ) mut
{
   _switch node.$lockKind {
      case .AsyncLock {
         self.write( "__asyncLock " );
      }
      case .LuaGo {
         self.write( "__luago " );
      }
      case .LuaLock {
         self.write( "__luaLock " );
      }
      case .LuaDepend {
         self.write( "__luaDepend " );
      }
   }
   filter( node.$block, self, opt.nextOpt( node ) );
}
pub override fn FormatterFilter.processBlockSub(
   node: &Nodes.BlockNode, opt:Opt ) mut
{
   self.writeln( "{" );
   self.pushIndent(##);
   
   foreach statement in node.$stmtList {
      filter( statement, self, opt.nextOpt( node ) );
   }

   self.popIndent();

   switch node.$blockKind {
      case .LetUnwrap, .Repeat, .IfUnwrap, .When, .If {
         self.write( "}" );
      }
      default {
         self.writeln( "}" );
      }
   }
};
pub override fn FormatterFilter.processStmtExp(
   node: &Nodes.StmtExpNode, opt:Opt ) mut
{
   filter( node.$exp, self, opt.nextOpt( node ) );

   if! let tailComment = node.$tailComment {
      self.write( "; " );
      self.writeln( tailComment.txt );
   }
   else {
      self.writeln( ";" );
   }
};

pub override fn FormatterFilter.processDeclEnum(
   node: &Nodes.DeclEnumNode, opt:Opt ) mut
{
   self.writeln( "enum %s {" (node.$name.txt ));
   self.pushIndent(##);
   //let enumTypeInfo = unwrap (node.$expType@@@Ast.EnumTypeInfo);
   foreach name in node.$valueNameList {
      //let valInfo = unwrap enumTypeInfo.getEnumValInfo( name.txt );
      self.write( "%s" (name.txt ) );
      self.writeln( "," );
   }
   self.popIndent();
   self.writeln( "}" );
}

pub override fn FormatterFilter.processDeclAlge(
   node: &Nodes.DeclAlgeNode, opt:Opt ) mut
{
   // let algeTypeInfo = node.$algeType;
   // forsort valInfo in algeTypeInfo.$valInfoMap {
   // }
}

pub override fn FormatterFilter.processNewAlgeVal(
   node: &Nodes.NewAlgeValNode, opt:Opt ) mut
{
   
   foreach exp in node.$paramList {
      filter( exp, self, opt.nextOpt( node ) );
   }
}

fn FormatterFilter.outputDeclClass(
   protoFlag:bool, classType:&Ast.TypeInfo,
   gluePrefix: str!, moduleName: &Parser.Token! ) mut
{
   if classType.$accessMode == .Pub {
      self.write( "pub " );
   }
   if classType.$abstractFlag {
      self.write( "abstract " );
   }
   switch classType.$kind {
      case .Class {
         if moduleName {
            self.write( "module " );
         }
         else {
            self.write( "class " );
         }
      }
      case .IF {
         self.write( "interface " );
      }
   }
   self.write( classType.$rawTxt );

   if #classType.$itemTypeInfoList > 0 {
      self.write( "<" );
      foreach genType, index in classType.$itemTypeInfoList {
         if index > 1 {
            self.write( ",");
         }
         self.write( genType.getTxt( ## ) );
      }
      self.write( ">" );
   }

   when! moduleName {
      self.write( " require " );
      self.write( "%s " ( moduleName.txt ) );
      when! gluePrefix {
         self.write( "glue " );
         self.write( gluePrefix );
      }
   }

   if classType.hasBase() or #classType.$interfaceList > 0 {
      self.write( " extend " );
      if classType.hasBase() {
         //self.write( classType.$baseTypeInfo.$display_stirng );
         self.write( self.getFull(classType.$baseTypeInfo, true ) );
      }
      if #classType.$interfaceList > 0 {
         self.write( "(" );
         foreach ifType, index in classType.$interfaceList {
            if index > 1 {
               self.write( "," );
            }
            self.write( ifType.getTxt(##) );
         }
         self.write( ")" );
      }
   }
}

pub override fn FormatterFilter.processProtoClass(
   node: &Nodes.ProtoClassNode, opt:Opt ) mut
{
   self.outputDeclClass( true, node.$expType, nil, nil );
}

pub override fn FormatterFilter.processDeclClass(
   node: &Nodes.DeclClassNode, opt:Opt ) mut
{
   self.outputDeclClass(
      false, node.$expType, node.$gluePrefix, node.$moduleName );
   self.writeln( "" );
   self.writeln( "{" );
   self.pushIndent( ## );
   
   // foreach field, index in node.$fieldList {
   //    filter( field, self, opt.nextOpt( node ) );
   // }
   foreach stmt in node.$allStmtList {
      filter( stmt, self, opt.nextOpt( node ) );
   }

   self.popIndent();
   self.writeln( "}" );
};
pub override fn FormatterFilter.processDeclAdvertise(
   node: &Nodes.DeclAdvertiseNode, opt:Opt ) mut
{
   self.writeln( "advertise %s;" (node.$advInfo.$member.$name.txt ) );
}

pub override fn FormatterFilter.processDeclMember(
   node: &Nodes.DeclMemberNode, opt:Opt ) mut
{
   switch node.$accessMode {
      case .Pub, .Pro, .None, .Local {
         self.write( Ast.accessMode2txt( node.$accessMode ) );
         self.write( " " );
      }
   }
   if node.$staticFlag {
      self.write( "static " );
   }
   self.write( "let " );

   let symbol = node.$symbolInfo;
   if symbol.$mutable {
      self.write( "mut " );
   }
   self.write( symbol.$name );
   self.write( ":" );

   filter( node.$refType, self, opt.nextOpt( node ) );

   if node.$getterMode == .None {
      if node.$setterMode ~= .None {
         self.write( " {none," );
         self.write( Ast.accessMode2txt( node.$setterMode ) );
         self.write( "}" );
      }
   }
   else {
      self.write( " {" );
      self.write( Ast.accessMode2txt( node.$getterMode ) );
      if not node.$getterMutable {
         self.write( "&" );
      }
      if node.$getterRetType ~= symbol.$typeInfo {
         self.write( ":" );
         self.write( node.$getterRetType.getTxt(##) );
      }
      if node.$setterMode ~= .None {
         self.write( "," );
         self.write( Ast.accessMode2txt( node.$setterMode ) );
      }
      self.write( "}" );
      
   }
   self.writeln( ";" );
};
pub override fn FormatterFilter.processExpMacroExp(
   node: &Nodes.ExpMacroExpNode, opt:Opt ) mut
{
   if self.forMacroFlag {
      // マクロを展開する
      let stmtList = node.$stmtList;
      foreach stmt in stmtList {
         filter( stmt, self, opt.nextOpt( node ) );
      }
   } else {
      // マクロを展開しない
      filter( node.$macroRefNode, self, opt.nextOpt( node ) );
      self.write( "(" );
      if! let expList = node.$expList {
         filter( expList, self, opt.nextOpt( node ) );
      }
      self.write( ")" );
   }
};
pub override fn FormatterFilter.processExpMacroArgExp(
   node: &Nodes.ExpMacroArgExpNode, opt:Opt ) mut
{
   filter( node.$exp, self, opt.nextOpt( node ));
}


pub override fn FormatterFilter.processDeclMacro(
   node: &Nodes.DeclMacroNode, opt:Opt ) mut
{
   if self.forMacroFlag {
      return;
   }
   
   let funcType = node.$expType;
   if funcType.$accessMode == .Pub {
      self.write( "pub " );
   }

   self.write( "macro " );

   let declInfo = node.$declInfo;
   
   self.write( declInfo.$name.txt );
   self.write( "(" );
   
   let argList = declInfo.$argList;
   if #argList ~= 0 {
      self.write( " " );
   }
   foreach arg, index in argList {
      if index > 1 {
         self.write( ", " );
      }
      filter( arg, self, opt.nextOpt( node ) );
   }
   if #argList ~= 0 {
      self.write( " " );
   }
   self.write( ")" );
      
   if #funcType.$retTypeInfoList ~= 0 {
      self.write( " : " );
      foreach retType, index in funcType.$retTypeInfoList {
         if index > 1 {
            self.write( ", " );
         }
         self.write( retType.$rawTxt );
      }
   }

   self.writeln( "{" );
   self.pushIndent( ## );

   if! let stmtBlock = declInfo.$stmtBlock {
      filter( stmtBlock, self, opt.nextOpt( node ) );
   }
   let mut prevLineNo = -1;
   foreach token in declInfo.$tokenList {
      if prevLineNo ~= -1 {
         if token.pos.lineNo ~= prevLineNo {
            self.writeln( "" );
         } else {
            self.write( " " );
         }
      }
      self.write( token.txt );
      prevLineNo = token.pos.lineNo;
   }
   self.writeln( "" );
   self.popIndent();
   self.writeln( "}" );
};
pub override fn FormatterFilter.processExpMacroStat(
   node: &Nodes.ExpMacroStatNode, opt:Opt ) mut
{
   
   foreach strNode in node.$expStrList {
      filter( strNode, self, opt.nextOpt( strNode ) );
   }
};


pub override fn FormatterFilter.processUnwrapSet(
   node: &Nodes.UnwrapSetNode, opt:Opt ) mut
{
   
   filter( node.$dstExpList, self, opt.nextOpt( node ) );
   filter( node.$srcExpList, self, opt.nextOpt( node ) );

   if node.$unwrapBlock {
      filter( unwrap node.$unwrapBlock, self, opt.nextOpt( node ) );
   }
}

pub override fn FormatterFilter.processIfUnwrap(
   node: &Nodes.IfUnwrapNode, opt:Opt ) mut
{
   self.write( "if! " );
   if #node.$varSymList ~= 0 {
      if #node.$varSymList == 1 and node.$varSymList[1].$name == "_exp" {
         // _exp は自動で入るので省略
      } else {
         self.write( "let " );
         foreach varSym, index in node.$varSymList {
            if index > 1 {
               self.write( "," );
            }
            if varSym.$mutable {
               self.write( "mut " );
            }
            self.write( varSym.$name );
         }
         self.write( " = " );
      }
   }
   filter( node.$expList, self, opt.nextOpt( node ) );
   filter( node.$block, self, opt.nextOpt( node ) );
   if node.$nilBlock {
      self.write( " else " );
      filter( unwrap node.$nilBlock, self, opt.nextOpt( node ) );
   } else {
      self.writeln( "" );
   }
}

pub override fn FormatterFilter.processWhen(
   node: &Nodes.WhenNode, opt:Opt ) mut
{

   self.write( "when!" );
   let mut symTxt = "";
   foreach symPair, index in node.$symPairList {
      if index == 1 {
         symTxt = symPair.$src.$name;
      } else {
         symTxt = "%s, %s" (symTxt, symPair.$src.$name );
      }
   }
   self.write( symTxt );
   
   filter( node.$block, self, opt.nextOpt( node ) );
   if! node.$elseBlock {
      self.write( " else " );
      filter( _exp, self, opt.nextOpt( node ) );
   } else {
      self.writeln( "" );
   }
}

pub override fn FormatterFilter.processExpExpandTuple(
   node: &Nodes.ExpExpandTupleNode, opt:Opt ) mut
{
   filter( node.$exp, self, opt.nextOpt( node ) );
   self.write( "..." );
}


pub override fn FormatterFilter.processDeclVar(
   node: &Nodes.DeclVarNode, opt:Opt ) mut
{
   switch node.$accessMode {
      case .Pub {
         self.write( "pub " );
      }
   }
   
   switch node.$mode {
      case .Let {
         if node.$unwrapFlag {
            self.write( "let! " );
         }
         else {
            self.write( "let " );
         }
      }
      case .Unwrap {
         self.write( "unwrap! " );
      }
   }
   
   foreach symInfo, index in node.$symbolInfoList {
      if index > 1 {
	 self.write( ", " );
      }
      if symInfo.$mutable {
         self.write( "mut " );
      }
      self.write( symInfo.$name );
      if #node.$varList >= index {
         let varInfo = node.$varList[ index ];
         if! let varType = varInfo.$refType {
            self.write( ":" );
            filter( varType, self, opt.nextOpt( node ) );
         }
      }
   }

   if! node.$expList {
      self.write( " = " );
      filter( _exp, self, opt.nextOpt( node ) );
   }
   if! node.$unwrapBlock {
      self.write( " " );
      filter( _exp, self, opt.nextOpt( node ) );
   }
   if! node.$thenBlock {
      self.write( "then" );
      filter( _exp, self, opt.nextOpt( node ) );
   }
   self.writeln( ";" );
};
pub override fn FormatterFilter.processDeclArg(
   node: &Nodes.DeclArgNode, opt:Opt ) mut
{
   self.write( node.$symbolInfo.$name );
   self.write( ":" );

   if! let refType = node.$argType {
      filter( refType, self, opt.nextOpt( node ) );
   }
   else {
      self.write( node.$expType.getTxt( ## ) );
   }
};
pub override fn FormatterFilter.processDeclArgDDD(
   node: &Nodes.DeclArgDDDNode, opt:Opt ) mut
{
   self.write( "..." );
};
pub override fn FormatterFilter.processExpSubDDD(
   node: &Nodes.ExpSubDDDNode, opt:Opt ) mut
{
   
};

fn FormatterFilter.processDeclFuncInfo(
   node: &Nodes.Node, declInfo: &Nodes.DeclFuncInfo, opt:Opt ) mut
{
   let funcType = node.$expType;
   if funcType.$accessMode == .Pub {
      self.write( "pub " );
   }
   if declInfo.$overrideFlag {
      self.write( "override " );
   }
   if declInfo.$staticFlag and declInfo.$name$.$txt == "__init" {
      // __init block 
      self.write( "__init" );
   }
   else {
      if node.$kind == Nodes.NodeKind.$DeclForm {
         self.write( "form " );
      } else {
         self.write( "fn " );
      }

      if opt.$parent.$kind ~= Nodes.NodeKind.$DeclClass and funcType.$kind == .Method
      {
         let classType = funcType.$parentInfo;
         self.write( classType.$rawTxt );
         self.write( "." );
      }
      
      if! let nameToken = declInfo.$name {
         self.write( nameToken.txt );
      }
      self.write( "(" );
      
      let argList = declInfo.$argList;
      if #argList ~= 0 {
         self.write( " " );
      }
      foreach arg, index in argList {
         if index > 1 {
            self.write( ", " );
         }
         filter( arg, self, opt.nextOpt( node ) );
      }
      if #argList ~= 0 {
         self.write( " " );
      }
      self.write( ")" );
   }
      
   if Ast.TypeInfo.isMut( funcType ) and declInfo.$kind == .Mtd {
      self.write( " mut" );
   }
   if! let asyncMode = declInfo.$asyncMode {
      _switch asyncMode {
         case .Async {
            self.write( " __async" );
         }
         case .Noasync {
            self.write( " __noasync" );
         }
         case .Transient {
            self.write( " __trans" );
         }
      }
   }

   // if #funcType.$retTypeInfoList ~= 0 {
   //    self.write( " : " );
   //    foreach retType, index in funcType.$retTypeInfoList {
   //       if index > 1 {
   //          self.write( ", " );
   //       }
   //       self.write( retType.getTxt(##) );
   //    }
   // }

   if #declInfo.$retTypeNodeList ~= 0 {
      self.write( " : " );
      foreach retType, index in declInfo.$retTypeNodeList {
         if index > 1 {
            self.write( ", " );
         }
         filter( retType, self, opt.nextOpt( node ) );
      }
   }
   
   if! declInfo.$body {
      self.write( " " );
      filter( _exp, self, opt.nextOpt( node ) );
   }
   else {
      self.writeln( ";" );
   }
}

pub override fn FormatterFilter.processDeclForm( node: &Nodes.DeclFormNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.$declInfo, opt );
}


pub override fn FormatterFilter.processDeclFunc(
   node: &Nodes.DeclFuncNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.$declInfo, opt );
};	
pub override fn FormatterFilter.processDeclMethod(
   node: &Nodes.DeclMethodNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.$declInfo, opt );
};	
pub override fn FormatterFilter.processDeclConstr(
   node: &Nodes.DeclConstrNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.$declInfo, opt );
};

pub override fn FormatterFilter.processDeclDestr(
   node: &Nodes.DeclDestrNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.$declInfo, opt );
};

pub override fn FormatterFilter.processExpCallSuperCtor(
   node: &Nodes.ExpCallSuperCtorNode, opt:Opt ) mut
{
   self.write( "super(" );
   if! let expListNode = node.$expList {
      filter( expListNode, self, opt.nextOpt( node ) );
   }
   self.writeln( ");" );
}

pub override fn FormatterFilter.processExpCallSuper(
   node: &Nodes.ExpCallSuperNode, opt:Opt ) mut
{
   self.write( "super(" );
   if! let expListNode = node.$expList {
      filter( expListNode, self, opt.nextOpt( node ) );
   }
   self.writeln( ")" );
};

pub override fn FormatterFilter.processRefType(
   node: &Nodes.RefTypeNode, opt:Opt ) mut
{
   //self.write( node.$expType.getTxt( ## ) );
   if! let mutMode = node.$mutMode {
      switch mutMode {
         case .IMut {
            self.write( "&" );
         }
         case .AllMut {
            self.write( "allmut" );
         }
      }
   }

   // self.write( node.$name.$expType.getParentFullName(
   //    self.$typeNameCtrl, self.$moduleInfoManager, true ) );

   filter( node.$typeNode, self, opt.nextOpt( node ) );

   // let expType = node.$expType.$nonnilableType;

   // switch expType.$kind {
   //    case .List, .Set {
   //       self.write( "<" );
   //       filter( node.$itemNodeList[ 1 ], self, opt.nextOpt( node ) );
   //       self.write( ">" );
   //    }
   //    case .Map {
   //       self.write( "<" );
   //       filter( node.$itemNodeList[ 1 ], self, opt.nextOpt( node ) );
   //       self.write( "," );
   //       filter( node.$itemNodeList[ 2 ], self, opt.nextOpt( node ) );
   //       self.write( ">" );
   //    }
   // }

   if #node.$itemNodeList > 0 {
      self.write( "<" );
      foreach itemNode, index in node.$itemNodeList {
         if index > 1 {
            self.write( "," );
         }
         if! let alt = node.$itemIndex2alt[ index ] {
            self.write( "%s=" (alt.$rawTxt) );
         }
         filter( itemNode, self, opt.nextOpt( node ) );
      }
      self.write( ">" );
   }
   

   if node.$expType.$nilable {
      self.write( "!" );
   }
};
pub override fn FormatterFilter.processIf(
   node: &Nodes.IfNode, opt:Opt ) mut
{
   let stmtList = node.$stmtList;
   foreach stmt in stmtList {
      switch stmt.$kind {
         case .If {
            self.write( "if " );
         }
         case .ElseIf {
            self.write( " elseif " );
         }
         case .Else {
            self.write( " else " );
         }
      }
      if stmt.$kind ~= .Else {
         filter( stmt.$exp, self, opt.nextOpt( node ) );
         self.write( " " );
      }
      filter( stmt.$block, self, opt.nextOpt( node ) );
   }
   self.writeln( "" );
};
pub override fn FormatterFilter.processSwitch(
   node: &Nodes.SwitchNode, opt:Opt ) mut
{
   if node.$is_ {
      self.write( "_switch " );
   } else {
      self.write( "switch " );
   }
   filter( node.$exp, self, opt.nextOpt( node ) );
   self.writeln( " {" );
   self.pushIndent( ## );
   let caseList = node.$caseList;
   foreach caseInfo in caseList {
      self.write( "case " );
      filter( caseInfo.$expList, self, opt.nextOpt( node ) );
      filter( caseInfo.$block, self, opt.nextOpt( node ) );
   }
   if! node.$default {
      self.write( "default " );
      filter( _exp, self, opt.nextOpt( node ) );
   }
   self.popIndent();
   self.writeln( "}" );
};
pub override fn FormatterFilter.processMatch(
   node: &Nodes.MatchNode, opt:Opt ) mut
{
   if node.$is_ {
      self.write( "_match " );
   } else {
      self.write( "match " );
   }
   filter( node.$val, self, opt.nextOpt( node ) );
   self.writeln( " {" );
   self.pushIndent( ## );
   let caseList = node.$caseList;
   foreach caseInfo in caseList {
      self.write( "case .%s" (caseInfo.$valInfo.$name) );
      if #caseInfo.$valParamNameList > 0 {
         self.write( "(" );
         foreach val, index in caseInfo.$valParamNameList {
            self.write( val.$name );
            if index ~= #caseInfo.$valParamNameList {
               self.write( ", " );
            }
         }
         self.write( ")" );
      } 
      self.write( " " );
      filter( caseInfo.$block, self, opt.nextOpt( node ) );
   }
   if! node.$defaultBlock {
      self.write( "default " );
      filter( _exp, self, opt.nextOpt( node ) );
   }
   self.popIndent();
   self.writeln( "}" );
};
pub override fn FormatterFilter.processWhile(
   node: &Nodes.WhileNode, opt:Opt ) mut
{
   self.write( "while " );
   filter( node.$exp, self, opt.nextOpt( node ) );
   self.write( " " );
   filter( node.$block, self, opt.nextOpt( node ) );
};
pub override fn FormatterFilter.processRepeat(
   node: &Nodes.RepeatNode, opt:Opt ) mut
{
   self.write( "repeat " );
   filter( node.$block, self, opt.nextOpt( node ) );
   self.write( " " );
   filter( node.$exp, self, opt.nextOpt( node ) );
   self.writeln( ";" );
};
pub override fn FormatterFilter.processFor(
   node: &Nodes.ForNode, opt:Opt ) mut
{
   self.write( "for %s = " (node.$val.$name) );
   filter( node.$init, self, opt.nextOpt( node ) );
   self.write( ", " );
   filter( node.$to, self, opt.nextOpt( node ) );
   if! node.$delta {
      self.write( ", " );
      filter( _exp, self, opt.nextOpt( node ) );
   }
   self.write( " " );
   filter( node.$block, self, opt.nextOpt( node ) );
};
pub override fn FormatterFilter.processApply(
   node: &Nodes.ApplyNode, opt:Opt ) mut
{
   self.write( "apply " );
   
   foreach var, index in node.$varList {
      if index > 1 {
         self.write( ", " );
      }
      self.write( var.$name );
   }
   self.write( " of " );
   filter( node.$expList, self, opt.nextOpt( node ) );
   self.write( " " );
   filter( node.$block, self, opt.nextOpt( node ) );
};
pub override fn FormatterFilter.processForeach(
   node: &Nodes.ForeachNode, opt:Opt ) mut
{
   self.write( "foreach " );
   self.write( node.$val.$name );
   if! let key = node.$key {
      self.write( ", " );
      self.write( key.$name );
   }
   self.write( " in " );
   filter( node.$exp, self, opt.nextOpt( node ) );
   self.write( " " );
   filter( node.$block, self, opt.nextOpt( node ) );
};
pub override fn FormatterFilter.processForsort(
   node: &Nodes.ForsortNode, opt:Opt ) mut
{
   self.write( "forsort " );
   self.write( node.$val.$name );
   if! let key = node.$key {
      self.write( ", " );
      self.write( key.$name );
   }
   self.write( " in " );
   filter( node.$exp, self, opt.nextOpt( node ) );
   self.writeln( "" );
   filter( node.$block, self, opt.nextOpt( node ) );
};

pub override fn FormatterFilter.processExpUnwrap(
   node: &Nodes.ExpUnwrapNode, opt:Opt ) mut
{
   self.write( "unwrap " );
   filter( node.$exp, self, opt.nextOpt( node ) );
   if! node.$default {
      self.write( " default " );
      filter( _exp, self, opt.nextOpt( node ) );
   }
}

fn getTypeListTxt( typeList:&List<&Ast.TypeInfo> ): str {
   let mut txt = "";
   foreach typeInfo, index in typeList {
      if index > 1 {
         txt = txt .. ", ";
      }
      txt = txt .. typeInfo.getTxt( ## );
   }
   return txt;
}

pub override fn FormatterFilter.processExpCall(
   node: &Nodes.ExpCallNode, opt:Opt ) mut
{
   filter( node.$func, self, opt.nextOpt( node ) );
   if node.$nilAccess {
      self.write( "$(" );
   }
   else {
      self.write( "(" );
   }
   if! node.$argList {
      self.write( " " );
      filter( _exp, self, opt.nextOpt( node ) );
      self.write( " " );
   }
   self.write( ")" );
};
pub override fn FormatterFilter.processExpList(
   node: &Nodes.ExpListNode, opt:Opt ) mut

{
   let expList = node.$expList;
   foreach exp, index in expList {
      if index > 1 {
         if exp.$kind == Nodes.NodeKind.$ExpAccessMRet {
            break;
         }
         if exp.$expType.$kind ~= .Abbr { 
            self.write( ", " );
         }
         else {
            self.write( " " );
         }
      }
      filter( exp, self, opt.nextOpt( node ) );
   }	
};

pub override fn FormatterFilter.processExpMRet(
   node: &Nodes.ExpMRetNode, opt:Opt ) mut
{
   filter( node.$mRet, self, opt.nextOpt( node ) );
};

pub override fn FormatterFilter.processExpAccessMRet(
   node: &Nodes.ExpAccessMRetNode, opt:Opt ) mut

{
   
};
pub override fn FormatterFilter.processExpOp1(
   node: &Nodes.ExpOp1Node, opt:Opt ) mut
{
   self.write( node.$op.txt );
   switch node.$op.txt {
      case "not" {
         self.write( " " );
      }
   }
   filter( node.$exp, self, opt.nextOpt( node ) );
};

pub override fn FormatterFilter.processExpToDDD(
   node: &Nodes.ExpToDDDNode, opt: Opt ) mut
{
   
   filter( node.$expList, self, opt.nextOpt( node ) );
}

pub override fn FormatterFilter.processExpMultiTo1(
   node: &Nodes.ExpMultiTo1Node, opt: Opt ) mut
{
   
   filter( node.$exp, self, opt.nextOpt( node ) );
}

pub override fn FormatterFilter.processExpCast(
   node: &Nodes.ExpCastNode, opt:Opt ) mut
{
   filter( node.$exp, self, opt.nextOpt( node ) );
   if! let refType = node.$castTypeNode {
      self.write( node.$castOpe );
      filter( refType, self, opt.nextOpt( node ) );
   }
};
pub override fn FormatterFilter.processExpParen(
   node: &Nodes.ExpParenNode, opt:Opt ) mut
{
   self.write( "(" );
   filter( node.$exp, self, opt.nextOpt( node ) );
   self.write( ")" );
};
pub override fn FormatterFilter.processExpSetVal(
   node: &Nodes.ExpSetValNode, opt:Opt ) mut
{
   filter( node.$exp1, self, opt.nextOpt( node ) );
   self.write( " = " );
   filter( node.$exp2, self, opt.nextOpt( node ) );
};
pub override fn FormatterFilter.processExpSetItem(
   node: &Nodes.ExpSetItemNode, opt:Opt ) mut
{
   filter( node.$val, self, opt.nextOpt( node ) );
   _match node.$index {
      case .NodeIdx( index ) {
         self.write( "[" );
         filter( index, self, opt.nextOpt( node ) );
         self.write( "]" );
      }
      case .SymIdx( index ) {
         self.write( ".%s" (index) );
      }
   }
   self.write( " = " );
   filter( node.$exp2, self, opt.nextOpt( node ) );
};
pub override fn FormatterFilter.processExpOp2(
   node: &Nodes.ExpOp2Node, opt:Opt ) mut
{
   filter( node.$exp1, self, opt.nextOpt( node ) );
   self.write( " %s " (node.$op.txt) );
   filter( node.$exp2, self, opt.nextOpt( node ) );
};
pub override fn FormatterFilter.processExpNew(
   node: &Nodes.ExpNewNode, opt:Opt ) mut
{
   self.write( "new " );

   filter( node.$symbol, self, opt.nextOpt( node ) );
   self.write( "(" );
   if! node.$argList {
      filter( _exp, self, opt.nextOpt( node ) );
   }
   self.write( ")" );
};
pub override fn FormatterFilter.processExpRef(
   node: &Nodes.ExpRefNode, opt:Opt ) mut
{
   self.write( node.$symbolInfo.$name );
};
pub override fn FormatterFilter.processExpRefItem(
   node: &Nodes.ExpRefItemNode, opt:Opt ) mut
{
   filter( node.$val, self, opt.nextOpt( node ) );
   if node.$nilAccess {
      self.write( "$" );
   }
   if! node.$index {
      self.write( "[ " );
      filter( _exp, self, opt.nextOpt( node ) );
      self.write( " ]" );
   }
   else {
      if! node.$symbol {
         self.write( "." );
         self.write( _exp );
      }
   }
};
pub override fn FormatterFilter.processRefField(
   node: &Nodes.RefFieldNode, opt:Opt ) mut
{
   filter( node.$prefix, self, opt.nextOpt( node ) );
   if node.$nilAccess {
      self.write( "$." );
   }
   else {
      self.write( "." );
   }
   self.write( node.$field.txt );
};
pub override fn FormatterFilter.processExpOmitEnum(
   node: &Nodes.ExpOmitEnumNode, opt:Opt ) mut
{
   self.write( "." );
   self.write( node.$valToken.txt );
};

pub override fn FormatterFilter.processGetField(
   node: &Nodes.GetFieldNode, opt:Opt ) mut
{
   filter( node.$prefix, self, opt.nextOpt( node ) );
   if node.$nilAccess {
      self.write( "$" );
   }
   self.write( ".$" );
   self.write( node.$field.txt );
};

pub override fn FormatterFilter.processCondRet(
   node: &Nodes.CondRetNode, opt:Opt ) mut
{
   filter( node.$exp, self, opt.nextOpt( node ) );
   self.write( "!" );
};

pub override fn FormatterFilter.processCondRetList(
   node: &Nodes.CondRetListNode, opt:Opt ) mut
{
   filter( node.$exp, self, opt.nextOpt( node ) );
};

pub override fn FormatterFilter.processReturn(
   node: &Nodes.ReturnNode, opt:Opt ) mut

{
   self.write( "return" );
   if! node.$expList {
      self.write( " " );
      filter( _exp, self, opt.nextOpt( node ) );
   }
   self.writeln( ";" );
};

pub override fn FormatterFilter.processProvide(
   node: &Nodes.ProvideNode, opt:Opt ) mut
{
   
}

pub override fn FormatterFilter.processAlias(
   node: &Nodes.AliasNode, opt:Opt ) mut
{
   self.write( "alias %s = " (node.$newSymbol.$name) );
   filter( node.$srcNode, self, opt.nextOpt( node ) );
   self.writeln( ";" );
}

pub override fn FormatterFilter.processTestCase(
   node: &Nodes.TestCaseNode, opt:Opt ) mut
{
   self.write( "__test %s(%s) {" (node.$name.txt, node.$ctrlName) );
   filter( node.$block, self, opt.nextOpt( node ) );
   self.write( "}" );
}

pub override fn FormatterFilter.processBoxing(
   node: &Nodes.BoxingNode, opt:Opt ) mut
{
   
   filter( node.$src, self, opt.nextOpt( node ) );
}

pub override fn FormatterFilter.processUnboxing(
   node: &Nodes.UnboxingNode, opt:Opt ) mut
{
   
   filter( node.$src, self, opt.nextOpt( node ) );
}

pub override fn FormatterFilter.processTupleConst(
   node: &Nodes.TupleConstNode, opt:Opt ) mut
{
   self.write( "(=" );

   self.write( " " );
   filter( node.$expList, self, opt.nextOpt( node ) );
   self.write( " " );

   self.write( ")" );
}

pub override fn FormatterFilter.processLiteralList(
   node: &Nodes.LiteralListNode, opt:Opt ) mut
{
   self.write( "[" );
   
   if! node.$expList {
      self.write( " " );
      filter( _exp, self, opt.nextOpt( node ) );
      self.write( " " );
   }

   self.write( "]" );
};
pub override fn FormatterFilter.processLiteralSet(
   node: &Nodes.LiteralSetNode, opt:Opt ) mut
{
   self.write( "(@" );
   
   if! node.$expList {
      self.write( " " );
      filter( _exp, self, opt.nextOpt( node ) );
      self.write( " " );
   }

   self.write( ")" );
};
pub override fn FormatterFilter.processLiteralMap(
   node: &Nodes.LiteralMapNode, opt:Opt ) mut

{
   self.write( "{" );
   
   let pairList = node.$pairList;
   foreach pair, index in pairList {
      if index > 1 {
         self.write( ", " );
      }
      filter( pair.$key, self, opt.nextOpt( node ) );
      self.write( ":" );
      filter( pair.$val, self, opt.nextOpt( node ) );
   }

   self.write( "}" );
};
pub override fn FormatterFilter.processLiteralArray(
   node: &Nodes.LiteralArrayNode, opt:Opt ) mut
{
   
   if! node.$expList {
      filter( _exp, self, opt.nextOpt( node ) );
   }
};
pub override fn FormatterFilter.processLiteralChar(
   node: &Nodes.LiteralCharNode, opt:Opt ) mut
{
   self.write( "?%s" (node.$token.txt) );
};
pub override fn FormatterFilter.processLiteralInt(
   node: &Nodes.LiteralIntNode, opt:Opt ) mut
{
   self.write( node.$token.txt );
};
pub override fn FormatterFilter.processLiteralReal(
   node: &Nodes.LiteralRealNode, opt:Opt ) mut
{
   self.write( node.$token.txt );
};
pub override fn FormatterFilter.processLiteralString(
   node: &Nodes.LiteralStringNode, opt:Opt ) mut
{
   self.write( node.$token.txt );
   

   if! let expList = node.$orgParam {
      self.write( " ( " );
      filter( expList, self, opt.nextOpt( node ) );
      self.write( " )" );
   }
};
pub override fn FormatterFilter.processLiteralBool(
   node: &Nodes.LiteralBoolNode, opt:Opt ) mut
{
   self.write( node.$token.txt );
};
pub override fn FormatterFilter.processLiteralNil(
   node: &Nodes.LiteralNilNode, opt:Opt ) mut
{
   self.write( "nil" );
};
pub override fn FormatterFilter.processBreak(
   node: &Nodes.BreakNode, opt:Opt ) mut
{
   self.writeln( "break;" );
   
};
pub override fn FormatterFilter.processLiteralSymbol(
   node: &Nodes.LiteralSymbolNode, opt:Opt ) mut
{
   
};

pub override fn FormatterFilter.processAbbr(
   node: &Nodes.AbbrNode, opt: Opt ) mut
{
   self.write( "##" );
};

__test case1(ctrl) {
   let mut rootNode = Nodes.createTestNodes();

   let mut memStream = new Util.memStream();
   let mut fomatter = createFilter( rootNode.$moduleTypeInfo, memStream, false );

   rootNode.processFilter( fomatter, new Opt( rootNode ) );
   __t._eq( ctrl, memStream.$txt, "form( 'hoge' );\n" );
}
