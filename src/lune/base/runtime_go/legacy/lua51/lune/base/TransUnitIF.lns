/*
MIT License

Copyright (c) 2018, 2019 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control default_async_all;

import lune.base.Parser;
import lune.base.Ast;
import lune.base.Nodes;
import lune.base.Util;

import lune.base.Types;

pub enum DeclClassMode {
   Class,
   Interface,
   Module,
   LazyModule,
}

pub class Modifier {
   let mut validMutControl: bool {non,pub};
   let processInfo:Ast.ProcessInfo;
   
   pub fn createModifier(
      typeInfo:&Ast.TypeInfo, mutMode: Ast.MutMode ) __async mut : &Ast.TypeInfo
   {
      if not self.validMutControl {
         return typeInfo;
      }
      return self.processInfo.createModifier( typeInfo, mutMode );
   }
}

pub class IdSetInfo {
   /** 名前なし関数 */
   let anonymousFuncId:Ast.IdProvider;
   /** 名前なし変数 */
   let anonymousVarId:Ast.IdProvider;

   pub fn __init() {
      self.anonymousFuncId = new Ast.IdProvider( 0, 10000 );
      self.anonymousVarId = new Ast.IdProvider( 0, 10000 );
   }

   pub fn registerSym( symbol:&Ast.SymbolInfo ) mut : &Ast.SymbolInfo {
      if symbol.$kind == .Var {
         if symbol.$name == "_" {
            let id = self.anonymousVarId.getNewId();
            return new Ast.AnonymousSymbolInfo( symbol, id );
         }
      }
      return symbol;
   }
}



class LockedAsyncInfo {
   let loopLen:int {pub};
   let lockKind:Nodes.LockKind {pub};
}

pub enum StmtKind {
   // list のインデックスに使うので 1 をセットする
   Switch = 1,
   Match,
   For,
   Foreach,
   Forsort,
   Apply
}


pub class NSInfo {
   /** 関数の本体宣言がないか。 true の場合宣言なし。 */
   let mut nobody:bool {pub,pub};
   /** この名前空間の型 */
   let typeInfo:&Ast.TypeInfo {pub};
   let typeDataAccessor:Ast.TypeDataAccessor {pub};
   /** この名前空間の定義位置 */
   let pos:&Parser.Position {pub};

   /** この名前空間で処理しているループ系制御構文(for 等)の Scope */
   let mut loopScopeQueue: List<&Ast.Scope> {pub};
   
   /** __asyncLock した時の loopScopeQueue の長さ */
   let mut lockedAsyncStack:List<&LockedAsyncInfo>;

   let mut idSetInfo:IdSetInfo;

   /** 非同期処理が有効な場合 true */
   let validAsyncCtrl:bool;

   /** 名前空間内の StmtKind 毎の id 管理。 */
   let stmtIdList:List<int>;

   /**
この名前空間内の stmt 数。
後でトランスコンパイルする際に負荷分散する際の目安。
正確な数ではない。
*/ 
   let mut stmtNum:int {pub};

   pub fn addStmtNum( num:int ) mut {
      self.stmtNum = self.stmtNum + num;
   }

   
   advertise idSetInfo;
   
   pub fn isLockedAsync() : bool {
      return #self.lockedAsyncStack > 0;
   }

   pub fn isNoasync() : bool {
      if self.typeInfo.$asyncMode == .Noasync {
         return true;
      }
      foreach info in self.lockedAsyncStack {
         switch info.$lockKind {
            case .AsyncLock, .LuaLock {
               return true;
            }
         }
      }
      return false;
   }
   
   pub fn __init( typeInfo:&Ast.TypeInfo, typeDataAccessor:Ast.TypeDataAccessor,
                  pos:&Parser.Position, validAsyncCtrl:bool )
   {
      self.stmtIdList = [];
      foreach _ in StmtKind.$_allList {
         self.stmtIdList.insert( 0 );
      }
      
      self.idSetInfo = new IdSetInfo();
      self.nobody = false;
      self.lockedAsyncStack = [];
      self.loopScopeQueue = [];

      self.typeDataAccessor = typeDataAccessor;
      self.typeInfo = typeInfo;
      self.pos = pos;
      self.validAsyncCtrl = validAsyncCtrl;
      self.stmtNum = 0;
   }

   pub fn duplicate() : NSInfo {
      let mut typeData = new Ast.TypeData();
      let mut nsInfo = new NSInfo(
         self.typeInfo, new Ast.SimpleTypeDataAccessor( typeData ),
         self.pos, self.validAsyncCtrl );

      typeData.addFrom( self.typeDataAccessor.$typeData );
      
      return nsInfo;
   }

   pub fn getNextStmtId( stmtKind:StmtKind ) mut : int {
      let id = self.stmtIdList[ stmtKind ];
      self.stmtIdList[ stmtKind ] = id + 1;
      return id;
   }
   
   
   pub fn incLock( lockKind: Nodes.LockKind ) mut {
      self.lockedAsyncStack.insert(
         new LockedAsyncInfo( #self.loopScopeQueue, lockKind ) );
   }
   pub fn decLock() mut {
      self.lockedAsyncStack.remove(##);
   }

   /**
break が可能かどうか調べる。

__asyncLock されていない場合、
loopScopeQueue の数でループ内部かどうかを判断し、ループ内の場合は break 可能。

__asyncLock されている場合、
lockedAsyncStack に格納されている情報よりも、今のループ数の方が多い場合は break 可能。
   */ 
   pub fn canBreak() : bool {
      let len = #self.lockedAsyncStack;
      let loopQueueLen = #self.loopScopeQueue;
      if len == 0 {
         return loopQueueLen > 0;
      }
      return self.lockedAsyncStack[ len ].$loopLen < loopQueueLen;
   }

   /**
現在の状態で __noasync にアクセス可能かどうか。
*/
   pub fn canAccessNoasync() : bool {
      let len = #self.lockedAsyncStack;
      if self.typeInfo.$asyncMode == .Noasync or
          (len > 0 and self.lockedAsyncStack[len].$lockKind ~= .Unsafe )
      {
         return true;
      }
      return false;
   }

   /**
現在の状態で Luaval にアクセス可能かどうか。
*/
   pub fn canAccessLuaval() : bool {
      if not self.validAsyncCtrl {
         return true;
      }
      foreach stack in self.lockedAsyncStack {
         if stack.$lockKind ~= .AsyncLock {
            return true;
         }
      }
      return false;
   }
}

pub interface TransUnitIF {
   pub fn get_scope() mut : Ast.Scope;
   pub fn error( mess: str ) mut : __;
   pub fn pushModuleLow(
      processInfo:Ast.ProcessInfo,
      externalFlag: bool, name:str, mutable: bool ) mut : &Ast.TypeInfo;
   pub fn pushModule(
      processInfo:Ast.ProcessInfo,
      externalFlag: bool, name:str, mutable: bool ) mut : NSInfo;
   pub fn popModule() mut;
   pub fn pushClassScope(
      errPos:&Parser.Position, classTypeInfo:&Ast.TypeInfo, scope:Ast.Scope ) mut;
   pub fn popClass() mut;
}

pub class ErrMess {
   pub let mess:str {pub};
   pub let pos:&Parser.Position {pub};
}

pub fn sortMess( list:List<&ErrMess> ) : &List<&ErrMess>
{
   list.sort(
      fn ( mess1:&ErrMess, mess2:&ErrMess ) : bool {
         let pos1 = mess1.$pos.$orgPos;
         let pos2 = mess2.$pos.$orgPos;
         if pos1.streamName < pos2.streamName {
            return true;
         }
         if pos1.streamName > pos2.streamName {
            return false;
         }
         if pos1.lineNo < pos2.lineNo {
            return true;
         }
         if pos1.lineNo > pos2.lineNo {
            return false;
         }
         if pos1.column < pos2.column {
            return true;
         }
         if pos1.column > pos2.column {
            return false;
         }
         return mess1.$mess < mess2.$mess;
      }
   );
   return list;
}
   

pub enum SetNSInfo {
   None,
   FromScope,
}

pub abstract class TransUnitBase extend (TransUnitIF) {

   pro let processInfo:Ast.ProcessInfo;
   let mut scope:Ast.Scope;
   pro let mut globalScope: Ast.Scope {pub};
   pro let namespace2Scope: Map<&Ast.TypeInfo,Ast.Scope>;

   /**
名前空間タイプ Map。
解析終了時に、この Map に nobody 設定が残っているとエラー。

TypeInfo → NSInfo.
   */
   pro let nsInfoMap:Map<&Ast.TypeInfo,NSInfo>;

   /**
現在の NSInfo。

multi phase 解析時の top scope に宣言されているクラスなどは、
curNsInfo が nil になる。
   */
   pri let mut curNsInfo:NSInfo!;

   // /** 解析済みトークンリスト */
   // pri let mut usedTokenList: List<&Parser.Token>;
   /** 解析エラーメッセージ */
   pro let errMessList: List<&ErrMess> { pub };

   pro let mut typeNameCtrl:&Ast.TypeNameCtrl;

   /** クラスの TypeId -> NamespaceInfo */
   pro let typeId2ClassMap: Map<&Ast.IdInfo,&Nodes.NamespaceInfo>;

   pro let ctrl_info: &Types.TransCtrlInfo;


   pro fn getCurrentNamespaceTypeInfo() : &Ast.TypeInfo {
      return self.scope.getNamespaceTypeInfo();
   }
   pub abstract fn errorAt( pos:&Parser.Position, mess: str ) __async mut : __;

   pub abstract fn getLatestPos() : &Parser.Position;

   pub fn error( mess: str ) __async mut : __ {
      self.errorAt( self.getLatestPos(), mess );
   }
   
   pub fn get_curNsInfo() mut : NSInfo {
      if! self.curNsInfo {
         return _exp;
      }
      self.error( "not found NSInfo for %s" (self.getCurrentNamespaceTypeInfo()) );
   }
   pro fn set_curNsInfo( nsInfo:NSInfo ) mut {
      self.curNsInfo = nsInfo;
   }
   
   pub fn get_scope() mut : Ast.Scope {
      return self.scope;
   }
   pub fn get_scopeRO() : &Ast.Scope {
      return self.scope;
   }

   pro fn getNSInfo( typeInfo:&Ast.TypeInfo ) mut : NSInfo {
      let! mut nsInfo = self.nsInfoMap[ typeInfo ] {
         self.error( "not found TypeInfo -- %s" (typeInfo.getTxt(##)) );
      };
      return nsInfo;
   }

   pub fn setScope( scope:Ast.Scope, setNSInfo:SetNSInfo ) mut {
      self.scope = scope;
      _switch setNSInfo {
         case .None {
         }
         case .FromScope {
            self.curNsInfo = self.getNSInfo( self.getCurrentNamespaceTypeInfo() );
         }
      }
   }
   
   pub fn __init(
      ctrl_info: &Types.TransCtrlInfo, processInfo:Ast.ProcessInfo )
   {
      self.ctrl_info = ctrl_info;
      self.typeId2ClassMap = {};
      self.typeNameCtrl = Ast.defaultTypeNameCtrl;
      self.errMessList = [];
      self.namespace2Scope = {};
      self.processInfo = processInfo;
      self.globalScope = new Ast.Scope(
         processInfo, processInfo.$topScope, .Module, nil ## );
      self.scope = new Ast.Scope( processInfo, self.globalScope, .Module, nil ## );
      self.nsInfoMap = {};
      let mut subRootTypeInfo = self.processInfo.$dummyParentType;
      self.curNsInfo = new NSInfo(
         subRootTypeInfo, subRootTypeInfo,
         new Types.Position( 0,0, "@builtin@" ## ), ctrl_info.validAsyncCtrl );
      self.nsInfoMap[ subRootTypeInfo ] = self.curNsInfo;
   }

   pro fn addErrMess( pos: &Parser.Position, mut mess: str ) __async mut {
      if mess.find( "type mismatch.*<- &" ##) {
         mess = mess .. ". if your code is the old style, use the opiton '--legacy-mutable-control'.";
      }
      self.errMessList.insert(
         new ErrMess( "%s: error: %s" ( pos.getDisplayTxt(), mess ), pos ) );
   }

   
   pub fn pushScope( scopeKind:Ast.ScopeKind, baseInfo: &Ast.TypeInfo!,
                     interfaceList: &List<&Ast.TypeInfo>! ) mut: Ast.Scope
   {
      self.scope = Ast.TypeInfo.createScope(
         self.processInfo, self.scope, scopeKind, baseInfo, interfaceList );
      return self.scope;
   }

   pub fn popScope() mut {
      self.scope = self.scope.$outerScope;
      self.curNsInfo = self.nsInfoMap[ self.getCurrentNamespaceTypeInfo() ];
   }


   pro fn newNSInfoWithTypeData(
      typeInfo:&Ast.TypeInfo, typeDataAccessor:Ast.TypeDataAccessor,
      pos:&Parser.Position) __async mut : NSInfo
   {
      let mut nsInfo = new NSInfo(
         typeInfo, typeDataAccessor, pos, self.ctrl_info.validAsyncCtrl );
      self.nsInfoMap[ typeInfo ] = nsInfo;
      return nsInfo;
   }
   
   /**
解析した名前空間の情報を登録する。
この情報は、&TypeInfo から imut を外すために利用する。
   */ 
   pro fn newNSInfo(
      typeInfo:Ast.TypeInfo, pos:&Parser.Position) __async mut : NSInfo
   {
      let mut nsInfo = new NSInfo(
         typeInfo, typeInfo, pos, self.ctrl_info.validAsyncCtrl );
      self.nsInfoMap[ typeInfo ] = nsInfo;
      return nsInfo;
   }
   

   pub fn pushModule(
      processInfo:Ast.ProcessInfo,
      externalFlag: bool, name:str, mutable: bool ) mut : NSInfo
   {
      let mut typeInfo:&Ast.TypeInfo = Ast.headTypeInfo;

      let modName;
      if name.find( "^@" ## ) {
         modName = name;
      }
      else {
         modName = "@%s" (name);
      }

      let mut nsInfo;
      if! self.scope.getTypeInfoChild( modName ) {
         typeInfo = _exp;
         if! let mut scope = self.namespace2Scope[ typeInfo ] {
            self.scope = scope;
         } else {
            self.error( "not found scope -- %s" (name) );
         }
         nsInfo = unwrap self.nsInfoMap[ typeInfo ];
      }
      else {
         //let mut parentNsInfo = self.getCurrentNSInfoFromScope();
         let mut parentNsInfo = self.$curNsInfo;
         let parentInfo = parentNsInfo.$typeInfo;
         let mut parentScope = self.scope;
         let mut scope = self.pushScope( .Module ## );
         let mut newType = processInfo.createModule(
            scope, parentInfo, parentNsInfo.$typeDataAccessor,
            externalFlag, modName, mutable );
         typeInfo = newType;
         self.namespace2Scope[ typeInfo ] = scope;
         nsInfo = self.newNSInfo( newType, self.getLatestPos() );

         let _, existSym = parentScope.addClass( processInfo, modName, nil, typeInfo );
         when! existSym {
            self.addErrMess(
               self.getLatestPos(),
               "module symbols exist -- %s.%s -- %s.%s"
               ( existSym.$namespaceTypeInfo.getFullName(
                  self.typeNameCtrl, parentScope, false ),
                 existSym.$name,
                 parentInfo.getFullName( self.typeNameCtrl, parentScope, false ),
                 modName ) );
         }
      }
      if not self.typeId2ClassMap[ typeInfo.$typeId ] {
         let namespace = new Nodes.NamespaceInfo( modName, self.scope, typeInfo );
         self.typeId2ClassMap[ typeInfo.$typeId ] = namespace;
      }

      self.curNsInfo = nsInfo;      
      return nsInfo;
   }
   
   pub fn pushModuleLow(
      processInfo:Ast.ProcessInfo,
      externalFlag: bool, name:str, mutable: bool ) mut : &Ast.TypeInfo
   {
      return self.pushModule( processInfo, externalFlag, name, mutable ).$typeInfo;
   }

   pub fn popModule() mut {
      self.popScope();
   }

   /**
既存クラスの Scope を push する。
   */
   pub fn pushClassScope(
      errPos:&Parser.Position, classTypeInfo:&Ast.TypeInfo, scope:Ast.Scope ) mut
   {
      if self.scope ~= classTypeInfo.$scope$.$parent {
         let classParentName;
         let classParentTypeId;
         if! let parentType = classTypeInfo.$scope$.$parent$.$ownerTypeInfo {
            classParentName = parentType.getFullName(
               self.typeNameCtrl, unwrap parentType.$scope, false );
            classParentTypeId = parentType.$typeId;
         }
         else {
            classParentName = "nil";
            classParentTypeId = Ast.dummyIdInfo;
         }
         self.addErrMess(
            errPos, "This class does not exist in this scope. -- %s -- %s(%d), %s(%d)"
            ( classTypeInfo.getTxt( ## ),
              self.scope.$ownerTypeInfo$.getFullName$(
                 self.typeNameCtrl, self.scope, false ),
              self.scope.$ownerTypeInfo$.$typeId$.id or -1,
              classParentName, classParentTypeId.id ) );
      }
      self.scope = scope;
      self.curNsInfo = self.nsInfoMap[ classTypeInfo ];
   }


   /**
指定クラスの Scope を push し、TypeInfo を取得する。

クラスが生成済みの場合は baseInfo, interfaceList, genTypeList に nil を指定する。
   */
   pub fn pushClass(
      processInfo:Ast.ProcessInfo,
      errPos:&Parser.Position, mode:DeclClassMode, abstractFlag: bool,
      baseInfo: &Ast.TypeInfo!, interfaceList: &List<&Ast.TypeInfo>!,
      genTypeList: &List<&Ast.AlternateTypeInfo>!, externalFlag: bool, name:str,
      allowMultiple:bool, accessMode:Ast.AccessMode,
      defNamespace: Nodes.NamespaceInfo! ) mut : NSInfo
   {
      let mut nsInfo;

      let typeInfo:&Ast.TypeInfo;
      if! self.scope.getTypeInfo( name, self.scope, true, .Normal ) {
         // 宣言済み
         typeInfo = _exp;
         nsInfo = unwrap self.nsInfoMap[ typeInfo ];

         if typeInfo.$scope$.$parent ~= self.scope {
            self.addErrMess(
               errPos,     
               "multiple class(%s)" (typeInfo.getTxt( self.typeNameCtrl ##)));
            // クラスの複数定義は、その後の解析すると、
            self.error( "stop by error" );
         }

         if typeInfo.$abstractFlag ~= abstractFlag {
            self.addErrMess( errPos,
                             "mismatch class(%s) abstract for prototpye"
                             (typeInfo.getTxt( self.typeNameCtrl ##)));
         }
         if typeInfo.$accessMode ~= accessMode {
            self.addErrMess( errPos,
                             "mismatch class(%s) accessmode(%s) for prototpye accessmode(%s)"
                             ( typeInfo.getTxt( self.typeNameCtrl ##),
                               accessMode.$_txt, typeInfo.$accessMode.$_txt));
         }
         when! baseInfo {
            if typeInfo.$baseTypeInfo ~= baseInfo {
               self.addErrMess(
                  errPos,
                  "mismatch class(%s) base class(%s) for prototpye base class(%s)"
                  ( typeInfo.getTxt( self.typeNameCtrl##),
                    baseInfo.getTxt(##), typeInfo.$baseTypeInfo.getTxt(##)));
            }
         }
         else {
            if typeInfo.hasBase() {
               self.addErrMess(
                  errPos,
                  "mismatch class(%s) base class(None) for prototpye base class(%s)"
                  ( typeInfo.getTxt( self.typeNameCtrl##),
                    typeInfo.$baseTypeInfo.getTxt(##)));
            }
         }

         fn compareList( protoList:&List<&Ast.TypeInfo>,
                         typeList:&List<&Ast.TypeInfo>, message:str )
         {
            if #protoList == #typeList {
               foreach protoType, index in protoList {
                  if protoType ~= typeList[ index ] {
                     self.addErrMess(
                        errPos,
                        "mismatch class(%s) %s(%s) for prototpye %s(%s)"
                        ( typeInfo.getTxt(self.typeNameCtrl##), message,
                          typeList[ index ].getTxt(self.typeNameCtrl##),
                          message, protoType.getTxt(##)));
                  }
               }
            }
            else {
               self.addErrMess(
                  errPos,
                  "mismatch class(%s) %s(%d) for prototpye %s(%d)"
                  ( typeInfo.getTxt(self.typeNameCtrl##), message, #typeList,
                    message, #protoList) );
            }
         }
         
         compareList( typeInfo.$interfaceList,
                      unwrap interfaceList default [], "interface" );
         
         compareList( typeInfo.$itemTypeInfoList,
                      unwrap genTypeList default [], "generics" );

         

         if! let mut scope = self.namespace2Scope[ typeInfo ] {
            self.scope = scope;
         } else {
            self.errorAt( errPos, "not find scope -- %s" (name) );
         }
         switch ( typeInfo.$kind ) {
            case .Class {
               if mode == .Interface {
                  self.addErrMess(
                     errPos,
                     "define interface already -- %s" (name) );
                  Util.printStackTrace();
               }
            }
            case .IF {
               if mode ~= .Interface {
                  self.addErrMess(
                     errPos,
                     "define class already -- %s" (name) );
                  Util.printStackTrace();
               }
            }
         }
      }
      else {
         //let mut parentNsInfo = self.getCurrentNSInfoFromScope();
         let mut parentNsInfo = self.$curNsInfo;

         let mut parentScope = self.scope;
         let mut scope = self.pushScope( .Class, baseInfo, interfaceList );
         let workGenTypeList;
         when! genTypeList {
            workGenTypeList = genTypeList;
         }
         else {
            workGenTypeList = [];
         }

         let mut newType = processInfo.createClassAsync(
            mode ~= .Interface, abstractFlag, scope, baseInfo, interfaceList,
            workGenTypeList, parentNsInfo.$typeInfo, parentNsInfo.$typeDataAccessor,
            externalFlag, accessMode, name );
         typeInfo = newType;
         self.namespace2Scope[ typeInfo ] = scope;
         nsInfo = self.newNSInfo( newType, errPos );
         
         parentScope.addClassLazy(
            processInfo, name, errPos, typeInfo, mode == .LazyModule );
      }
      when! genTypeList {
         foreach genType in genTypeList {
            self.scope.addAlternate(
               processInfo, accessMode, genType.$txt, errPos, genType );
         }
      }

      let! mut namespace = defNamespace {
         namespace = new Nodes.NamespaceInfo( name, self.scope, typeInfo );
      };
      self.typeId2ClassMap[ typeInfo.get_typeId() ] = namespace;

      self.curNsInfo = nsInfo;
      
      return nsInfo;
   }
   
   /**
指定クラスの Scope を push し、TypeInfo を取得する。

クラスが生成済みの場合は baseInfo, interfaceList, genTypeList に nil を指定する。
   */
   pub fn pushClassLow(
      processInfo:Ast.ProcessInfo,
      errPos:&Parser.Position, mode:DeclClassMode, abstractFlag: bool,
      baseInfo: &Ast.TypeInfo!, interfaceList: &List<&Ast.TypeInfo>!,
      genTypeList: &List<&Ast.AlternateTypeInfo>!, externalFlag: bool, name:str,
      allowMultiple:bool, accessMode:Ast.AccessMode,
      defNamespace: Nodes.NamespaceInfo! ) mut : &Ast.TypeInfo
   {
      return self.pushClass(
         processInfo, errPos, mode, abstractFlag,
         baseInfo, interfaceList, genTypeList, externalFlag, name,
         allowMultiple, accessMode, defNamespace ).$typeInfo;
   }

   pub fn popClass() mut {
      self.popScope();
   }
}

pub class SimpeTransUnit extend TransUnitBase {
   let latestPos:&Parser.Position;
   let macroMode:str;
   let nearCode:str!;
   pub override fn errorAt( pos:&Parser.Position, mess: str ) __async mut : __
   {
      self.addErrMess( pos, mess);
      foreach errmess in self.errMessList {
         Util.errorLog( errmess.$mess );
      }
      if! let nearCode = self.nearCode {
         print( "------ near code -----", self.macroMode );
         print( nearCode );
         print( "------" );
      }
      
      Util.err( "has error" );
   }
   pub override fn getLatestPos() : &Parser.Position {
      return self.latestPos;
   }
}
