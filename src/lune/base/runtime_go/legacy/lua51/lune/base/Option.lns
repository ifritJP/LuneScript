/*
MIT License

Copyright (c) 2018,2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control default_async_all;

import lune.base.Types;
import lune.base.Parser;
import lune.base.Json;
import lune.base.Util;
import lune.base.LuaMod;
import lune.base.Ver;
import lune.base.LuaVer;
import lune.base.Depend;
import lune.base.Log;
import lune.base.Ast;

macro _defGetBuildCount() {
   {
      let mut count = 0;
      if! let mut fileObj = io.open( "build.counter" ## ) {
         if! let txt = fileObj.read( "*l" ) {
            count = (unwrap tonumber( txt ## ) default 0)@@int;
         }
         fileObj.close();
      }
      if count == 0 {
         error( "error -- build.counter" );
      }
   }
   fn getBuildCount(): int {
      return ,,count;
   }
}

_defGetBuildCount();

pub enum ModeKind {
   Unknown = "",
   Token = "token",
   Ast = "ast",
   Diag = "diag",
   Complete = "comp",
   Lua = "lua",
   LuaMeta = "LUA",
   Save = "save",
   SaveMeta = "SAVE",
   Exec = "exe",
   Glue = "glue",
   BootC = "bootC",
   Format = "format",
   Builtin = "builtin",
   Inquire = "inq",
   MkMain = "mkmain",
   Shebang = "shebang",
}

pub fn getRuntimeModule(): str {
   return "lune.base.runtime%d" (Ver.luaModVersion);
}

pub enum Int2strMode {
   // Lua のバージョンに依存。
   // lua5.1 は .0 不要。
   // lua5.3 は .0 必要。
   Int2strModeDepend,
   // .0 を付加する
   Int2strModeNeed0,
   // .0 不要
   Int2strModeUnneed0
}
pub class RuntimeOpt {
   local let mut int2strMode:Int2strMode {pub};

   pub fn __init() {
      self.int2strMode = .Int2strModeDepend;
   }
}

pub class Option {
   pub let mut mode:ModeKind;
   /** 解析対象のモジール名。 comp モードの時に使用。 */
   pub let mut analyzeModule:str!;
   /** 解析位置。comp モードの時に使用。 */
   pub let mut analyzePos: Parser.Position!;
   /** 出力ディレクトリ。 save, SAVE モードの時に使用*/
   pub let mut outputDir:str!;
   /** 処理対象のスクリプトファイルパス */
   pub let mut scriptPath: str;
   pub let mut batchList:List<str>;
   /** プロファイルする場合 true */
   pub let mut validProf:bool;
   /** true の場合 require( 'lune.base._lune' ) する */
   pub let mut useLuneModule:str!;
   /** 依存ファイル情報の出力先ストリーム */
   //pub let mut dependsStream:oStream!;
   /** 依存ファイル情報の出力先ファイルパス */
   pub let mut dependsPath:str!;
   /** ロード時に meta 等を更新する  */
   pub let mut updateOnLoad:bool;
   /** セーブ時に byte コンパイルする */
   pub let mut byteCompile:bool;
   /** byte コンパイルする際にデバッグ情報を削除する */
   pub let mut stripDebugInfo:bool;
   /** 変換先の Lua バージョン*/
   pub let mut targetLuaVer:&LuaVer.LuaVerInfo;
   pub let mut bootPath:str!;
   /** List の foreach に ipairs を使う。 */
   pub let mut useIpairs:bool;
   /** パッケージ名 */
   pub let mut packageName:str!;
   /** アプリ名 */
   pub let mut appName:str!;
   pub let mut mainModule:str;

   pub let mut transCtrlInfo:Types.TransCtrlInfo;

   /** true の場合 C への変換を行なう */
   pub let mut convTo:Types.Lang!;

   /** テストする時 true */
   pub let mut testing:bool;

   pub let mut outputPath:str!;

   // shebang で利用する引数リスト
   pub let mut shebangArgList:List<str>;

   let mut runtimeOpt:RuntimeOpt {pub};

   // 指定ソースのプロジェクトディレクトリ
   local let mut projDir:str! {pub};

   /** go への変換時、関数の引数に環境情報を追加する */
   local let mut addEnvArg:bool {pub};
   local let mut enableRunner:bool {pub};
   local let mut validPostBuild:bool {pub};

   pub fn __init() {
      self.validPostBuild = true;
      self.enableRunner = true;
      self.addEnvArg = true; 
      self.projDir = nil;
      self.runtimeOpt = new RuntimeOpt();
      self.shebangArgList = [];
      self.outputPath = nil;
      self.mainModule = "";
      self.appName = nil;
      self.packageName = nil;
      self.testing = false;
      self.convTo = nil;
      self.validProf = false;
      self.mode = .Unknown;
      self.scriptPath = "";
      self.batchList = [];
      self.useLuneModule = nil;
      self.updateOnLoad = false;
      self.byteCompile = false;
      self.stripDebugInfo = false;
      self.targetLuaVer = LuaVer.getCurVer();
      self.transCtrlInfo = Types.TransCtrlInfo.create_normal();
      self.bootPath = nil;
      self.useIpairs = false;
      self.analyzeModule = nil;
      self.outputDir = nil;
      self.analyzePos = nil;
      self.dependsPath = nil;
   }

   pub fn openDepend( relPath:str! ) : oStream! {
      if! let path = self.dependsPath {
         let filePath;
         when! relPath {
            if path.find( "/$" ## ) {
               filePath = "%s%s" (path, relPath );
            } else {
               filePath = "%s/%s" (path, relPath );
            }
         }else {
            filePath = path;
         }
         return (io.open( filePath, "w" ));
      }
      if! let path = self.dependsPath {
         return (io.open( path, "w" ));
      }
      return nil;
   }
}

pub fn outputLuneMod( path:str! ):str! {
   let mut lune_path = "runtime.lua";
   when! path {
      if path ~= "" {
         lune_path = path;
      }
   }
   let! mut fileObj = io.open( lune_path, "w" ) {
      return "failed to open -- %s" ( lune_path );
   };

   fileObj.write( ```
--[[
MIT License

Copyright (c) 2018,2019 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
]]
```);

   foreach kind in LuaMod.CodeKind.$_allList {
      fileObj.write( LuaMod.getCode( kind ) );
   }

   fileObj.close();
   return nil;
}

pub fn analyze( mut argList: &List<str> ) __noasync : Option {

   fn printUsage(code:int) : __ {
      print( ```
usage:
  <type1> [-prof] [-r] src.lns mode [mode-option]
  <type2> -mklunemod path
  <type3> -shebang path
  <type4> --version

* type1
  - src.lns [common_op] ast
  - src.lns [common_op] comp [-i] module line column
  - src.lns [common_op] inq [-i] module line column
  - src.lns [common_op] [-ol ver] [-ob<0|1>] [-dmr] <lua|LUA>
  - src.lns [common_op] [-ol ver] [-ob<0|1>] [-dmr] [--depends dependfile] <save|SAVE> output-dir
  - src.lns [common_op] exe

  -r: use 'require( "lune.base.runtime" )'
  -ol: output lua version. ver = 51 or 52 or 53.
  -ob: output bytecompiled-code.
      -ob0 is without debug information.
      -ob1 is with debug information.
  -langC: transcompile to c-lang.
  -langGo: transcompile to golang.
  -oc: output path of the source code transcompiled to c-lang .
  --depends: output dependfile
  --int2str mode: mode of int to str.
     - depend: depends the lua version.
     - need0: with '.0'.
     - unneed0: without '.0'.

  common_op:
    --testing: enable test.
    --projDir <dir>: set the project dir.
    -u: update meta and lua on load.
    -Werror: error by warrning.
    --log <mode>: set log level.
         mode: fatal, error, warn, log, info, debug, trace
    --warning-shadowing: shadowing error convert to warning.
    --compat-comment: backward compatibility to process the comment.
    --disable-checking-define-abbr: disable checking for ##.
    --uptodate <mode>: checking uptodate mode.
            force: skip check for target lns file.
            forceAll: skip check for all.
            none: skip process when file is uptodate.
            touch: touch meta file when file is uptodate.  (default)
    --use-ipairs: use ipairs for foreach with List value.
    --default-lazy: set lazy-loading at default.
    --valid-luaval: enable luaval when transcompie to lua.
    --package <name>: set the package name for the go-lang.
    --app <name>: set the application name for the go-lang.

* type2
  path: output file path.
``` );
      os.exit( code );
   }

   let mut option = new Option();
   let mut useStdInFlag = false;
   let mut lineNo:int! = nil;
   let mut column:int! = nil;

  
   let mut index = 1;

   if! let mut file = io.open( "lune.js", "r" ) {
      // プロジェクトファイルから追加のコマンドオプションを取得。
      class ProjInfo extend (Mapping) {
         pub let cmd_option:&List<str>;
      }
      if! let projInfo = ProjInfo._fromStem(
         (Json.fromStr( file.read( "*a" ) or "" )) )
      {
         let mut workArgList:List<str> = [];
         foreach arg in projInfo.cmd_option {
            workArgList.insert( arg );
         }
         foreach arg in argList {
            workArgList.insert( arg );
         }
         argList = workArgList;
      }
      file.close();
   }
   
   fn getNextOp():str! {
      if #argList <= index {
         return nil;
      }
      index = index + 1;
      return argList[ index ];
   }

   Util.setDebugFlag( false );

   let mut uptodateOpt:str! = nil;
   while #argList >= index {
      let arg = argList[ index ];

      if arg.find( "^-" ## ) {
         if option.mode ~= .Shebang {
            switch ( arg ) {
               case "-i" {
                  useStdInFlag = true;
               }
               case "-prof" {
                  option.validProf = true;
               }
               case "--noEnvArg" {
                  option.addEnvArg = false;
               }
               case "--disableRunner" {
                  option.enableRunner = false;
               }
               case "--disablePostBuild" {
                  option.validPostBuild = false;
               }
               case "--enableAsyncCtl" {
                  option.transCtrlInfo.validAsyncCtrl = true;
               }
               case "--nodebug" {
                  Util.setDebugFlag( false );
               }
               case "--debug" {
                  Util.setDebugFlag( true );
               }
               case "-shebang" {
                  option.mode = .Shebang;
               }
               case "--version" {
                  print( "LuneScript: version %s (%d:Lua%s) [%s]"
                     ( Ver.version, getBuildCount(),
                       Depend.getLuaVersion(), Ver.metaVersion) );
                  os.exit( 0 );
               }
               case "--projDir" {
                  option.projDir = getNextOp();
               }
               case "--builtin" {
                  forsort typeInfo, typeId in Ast.getBuiltInTypeIdMap() {
                     print( typeId, typeInfo.getTxt( ## ) );
                  }
                  os.exit( 0 );
               }
               case "-mklunemod" {
                  let path = getNextOp();
                  if! let mess = outputLuneMod( path ) {
                     Util.errorLog( mess );
                     os.exit( 1 );
                  }
                  os.exit( 0 );
               }
               case "--mkbuiltin" {
                  let! path = getNextOp() {
                     path = ".";
                  };
                  option.scriptPath = path .. "/lns_builtin.lns";
                  option.mode = .Builtin;
               }
               case "-r" {
                  option.useLuneModule = getRuntimeModule();
               }
               case "--runtime" {
                  option.useLuneModule = getNextOp();
               }
               case "-oc" {
                  option.bootPath = getNextOp();
               }
               case "-u" {
                  option.updateOnLoad = true;
               }
               case "-Werror" {
                  option.transCtrlInfo.stopByWarning = true;
               }
               case "--disable-checking-define-abbr" {
                  option.transCtrlInfo.checkingDefineAbbr = false;
               }
               case "--disable-checking-mutable" {
                  option.transCtrlInfo.validCheckingMutable = false;
               }
               case "--legacy-mutable-control" {
                  option.transCtrlInfo.legacyMutableControl = true;
               }
               case "--compat-comment" {
                  option.transCtrlInfo.compatComment = true;
               }
               case "--warning-shadowing" {
                  option.transCtrlInfo.warningShadowing = true;
               }
               case "--valid-luaval" {
                  option.transCtrlInfo.validLuaval = true;
               }
               case "--default-lazy" {
                  option.transCtrlInfo.defaultLazy = true;
               }
               case "--package" {
                  option.packageName = getNextOp();
               }
               case "--int2str" {
                  let opt = getNextOp();
                  switch opt {
                     case "depend" {
                        option.$runtimeOpt.int2strMode = .Int2strModeDepend;
                     }
                     case "need0" {
                        option.$runtimeOpt.int2strMode = .Int2strModeNeed0;
                     }
                     case "unneed0" {
                        option.$runtimeOpt.int2strMode = .Int2strModeUnneed0;
                     }
                     default {
                        Util.errorLog( "unknown mode -- %s" ( opt ) );
                        os.exit( 1 );
                     }
                  }
               }
               case "--app" {
                  if! getNextOp() {
                     option.appName = _exp;
                  }
               }
               case "--main" {
                  if! getNextOp() {
                     option.mainModule = _exp;
                  }
               }
               case "--log" {
                  if! let txt = getNextOp() {
                     if! let level = Log.str2level( txt ) {
                        Log.setLevel( level );
                     }
                     else {
                        Util.errorLog( "illegal level -- %s" ( txt ) );
                     }
                  }
               }
               case "--testing" {
                  option.testing = true;
               }
               case "--depends" {
                  option.dependsPath = getNextOp();
               }
               case "--use-ipairs" {
                  option.useIpairs = true;
               }
               case "--uptodate" {
                  uptodateOpt = getNextOp();
               }
               case "-langC" {
                  option.convTo = .C;
                  option.transCtrlInfo.validLuaval = true;
               }
               case "-langGo" {
                  option.convTo = .Go;
                  option.transCtrlInfo.validLuaval = true;
                  option.transCtrlInfo.validAsyncCtrl = true;
               }
               case "-ol" {
                  if! let txt = getNextOp() {
                     switch txt {
                        case "51" {
                           option.targetLuaVer = LuaVer.ver51;
                        }
                        case "52" {
                           option.targetLuaVer = LuaVer.ver52;
                        }
                        case "53" {
                           option.targetLuaVer = LuaVer.ver53;
                        }
                     }
                  }
               }
               case "-ob0", "-ob1" {
                  option.byteCompile = true;
                  if arg == "-ob0" {
                     option.stripDebugInfo = true;
                  }
               }
               default {
                  Util.log( "unknown option -- '%s'" (arg) );
                  os.exit( 1 );
               }
            }
         } else {
            if #option.shebangArgList == 0 {
               option.shebangArgList.insert( option.scriptPath );
            }
            option.shebangArgList.insert( arg );
         }
      }
      else {
         if option.scriptPath == "" {
            option.scriptPath = arg;
            if option.mode == .Shebang {
               option.shebangArgList.insert( option.scriptPath );
            }
         }
         elseif option.mode == "" {
            if! let mode = ModeKind._from( arg ) {
               option.mode = mode;
            }
            else {
               Util.err( "unknown mode -- %s" ( arg ) );
            }
         }
         else {
            switch( option.mode ) {
               case .Complete, .Inquire {
                  if not option.analyzeModule {
                     option.analyzeModule = arg;
                  }
                  elseif not lineNo {
                     lineNo = (unwrap tonumber( arg ## ) default 0)@@int;
                  }
                  elseif not column {
                     column = (unwrap tonumber( arg ## ) default 0)@@int;
                     option.analyzePos = new Parser.Position(
                        unwrap lineNo, unwrap column,
                        Util.scriptPath2Module( option.scriptPath ) );
                  }
               }
               case .Save, .SaveMeta, .Glue {
                  option.outputDir = arg;
               }
               case .Shebang {
                  if #option.shebangArgList == 0 {
                     option.shebangArgList.insert( option.scriptPath );
                  }
                  option.shebangArgList.insert( arg );
               }
               default {
                  option.outputPath = arg;
               }
            }
         }
      }

      index = index + 1;
   }

   when! uptodateOpt {
      switch uptodateOpt {
         case "force" {
            option.transCtrlInfo.uptodateMode = .Force1(
               Util.scriptPath2Module( option.scriptPath ) );
         }
         case "forceAll" {
            option.transCtrlInfo.uptodateMode = .ForceAll;
         }
         case "normal" {
            option.transCtrlInfo.uptodateMode = .Normal;
         }
         case "touch" {
            option.transCtrlInfo.uptodateMode = .Touch;
         }
         default {
            Util.errorLog( "illegal mode -- " .. uptodateOpt );
         }
      }
   }

   if option.mode ~= .Builtin {
      if option.scriptPath == "" or option.mode == .Unknown {
         printUsage( (#argList == 0 or argList[1] == "") and 0 or 1 );
      }
   }

   if useStdInFlag {
      if option.analyzeModule {
         Parser.StreamParser.setStdinStream( unwrap option.analyzeModule );
      }
      else {
         if option.scriptPath ~= "" {
            Parser.StreamParser.setStdinStream(
               Util.scriptPath2Module( option.scriptPath ) );
         }
      }
   }

   if option.scriptPath == "@-" {
      while true {
         let! line = io.stdin.read( "*l" ) {
            break;
         };
         if #line > 0 {
            option.batchList.insert( line );
         }
      }
   }
   

   Log._log2( .Log, "mode is '%s'" (option.mode.$_txt) );

   return option;
}

pub fn createDefaultOption( pathList:&List<str>, projDir:str! ) : Option {
   let mut option = new Option();
   if #pathList == 1 {
      option.scriptPath = pathList[1];
   } else {
      option.scriptPath = "@-";
      foreach path in pathList {
         option.batchList.insert( path );
      }
   }
   // let mut option = analyze( [ path, "save" ] );
   option.useLuneModule = getRuntimeModule();
   option.useIpairs = true;
   when! projDir {
      if projDir ~= "/" {
         if not projDir.find( "/$" ## ) {
            option.projDir = projDir .. "/";
         } else {
            option.projDir = projDir;
         }
      }
   }
   return option;
}

__test case1(ctrl) {
   LuaVer.setCurVer( 53 );
   let option = analyze( [ "lune/base/Option.lns", "exe" ] );
   __t._eq(ctrl, option.mode, ModeKind.Exec );
   __t._eq(ctrl, option.scriptPath, "lune/base/Option.lns" );
}
