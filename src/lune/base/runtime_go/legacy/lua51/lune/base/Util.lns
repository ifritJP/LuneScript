/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control default_async_all;

import lune.base.Depend;
import lune.base.Log;
import lune.base.Str;

pri let mut debugFlag = true;
pub fn setDebugFlag( flag:bool ) {
   debugFlag = flag;
}
pri let mut errorCode = 1;
pub fn setErrorCode( code:int ) {
   errorCode = code;
}

pub fn errorLog( message: str ) {
   io.stderr.write( message .. "\n" );
}

pub fn err( message:str ): __ {
   if debugFlag {
      error( message );
   }
   errorLog( message );
   os.exit( errorCode );
}

/**
txt 文字列から、 pattern で構成される文字列を抜き出してリストを返す。
*/
pub fn splitStr( txt:str, pattern:str ) : List<str> {
   let mut list:List<str> = [];
   __unsafe {
      apply token of string.gmatch( txt, pattern ) {
         list.insert( token );
      }
   }
   return list;
}

pub fn splitModule( modPath:str ) : List<str> {
   return splitStr( modPath, '[^%./:]+' );
}

pub class OrderedSet<T> {
   pri let mut set:Set<&T>;
   pri let mut list:List<&T> {pub&};

   pub fn __init() {
      self.set = (@);
      self.list = [];
   }

   pub fn add( val:&T ) mut : bool {
      if not self.set.has( val ) {
         self.set.add( val );
         self.list.insert( val );
         return true;
      }
      return false;
   }

   pub fn clone(): OrderedSet<T> {
      let mut obj = new OrderedSet<T>();
      foreach val in self.list {
         obj.set.add( val );
         obj.list.insert( val );
      }
      return obj;
   }

   pub fn has( val:&T ) : bool {
      return self.set.has( val );
   }

   pub fn removeLast() mut {
      if #self.list == 0 {
         err( "empty" );
      }
      self.set.del( self.list[ #self.list ] );
      self.list.remove(##);
   }
}

pub class OrderdMap<KEY,VAL> {
   let mut map:Map<KEY,VAL> {pub&};
   let mut keyList:List<KEY> {pub&};

   pub fn __init() {
      self.map = {};
      self.keyList = [];
   }

   pub fn clear() mut {
      self.map = {};
      self.keyList = [];
   }

   pub fn add( key:KEY, val:VAL, overwrite:bool ) mut {
      if self.map[ key ] {
         if overwrite {
            self.map[ key ] = val;
         }
         return;
      }
      self.map[ key ] = val;
      self.keyList.insert( key );
   }
}

pub class memStream extend (oStream) {
   let mut txt: Str.Builder;
   pub fn __init() {
      self.txt = new Str.Builder();
   }
   pub fn get_txt() mut : str {
      self.txt.flush();
      return self.txt.$txt;
   }
   pub fn write( val: str ) mut : stem!, str! {
      self.txt.add( val );
      return self, nil;
   }
   pub fn close() mut {
      self.txt.flush();
   }
   pub fn flush() mut {
      self.txt.flush();
   }
}

pub class TxtStream extend (iStream) {
   let txt: str {pub};
   let lineList:&List<str>;
   let mut start: int;
   let mut eof: bool;
   let mut lineNo: int {pub};
   pub fn __init( txt: str ) {
      self.txt = txt;
      self.start = 1;
      self.eof = false;
      self.lineList = Str.getLineList( self.txt );
      self.lineNo = 1;
   }

   /**
指定範囲の文字列を取得する。

fromLineNo: 1,  toLineNo: 2 を指定した場合、 1 行目だけを取得する。

行番号は、 1 から。


@param fromLineNo 取得開始する行番号
@param toLineNo 取得終了する行番号。
   */
   pub fn getSubstring( fromLineNo:int, toLineNo:int! ) : str {
      let mut txt = "";
      let to = unwrap toLineNo default #self.lineList + 1;
      for index = fromLineNo, to - 1 {
         if index < 1 or index > #self.lineList {
            break;
         }
         txt = "%s%s" (txt, self.lineList[ index ] );
      }
      return txt;
   }

   pub fn read( mode:stem! ) mut : str! {
      if mode ~= '*l' {
         err( "not support -- %s" (mode) );
      }
      if self.lineNo > #self.lineList {
         return nil;
      }
      self.lineNo = self.lineNo + 1;
      let line = self.lineList[ self.lineNo - 1 ];
      if Str.endsWith( line, "\n") {
         return line.sub( 1, #line - 1 );
      }
      return line;
   }
   pub fn close() mut {
   }
}



pub class NullOStream extend (oStream) {
   pub fn write( val: str ) mut : stem!, str! {
      return self, nil;
   }
   pub fn close() mut {
   }
   pub fn flush() mut {
   }
}


pub interface SourceStream {
   pub abstract fn write( txt: str ) mut;
   pub abstract fn writeln( txt: str ) mut;
   pub abstract fn pushIndent( newIndent:int! ) mut;
   pub abstract fn popIndent() mut;
   pub abstract fn switchToHeader() mut;
   pub abstract fn returnToSource() mut;
}

pub class SimpleSourceOStream extend (SourceStream) {
   let mut nowStream:oStream;
   let mut srcStream:oStream;
   let mut headStream:oStream;
   let mut needIndent:bool;
   let stepIndent:int;
   let mut curLineNo:int;
   pri let mut indentQueue: List<int>;
   let mut indentSpace:str;


   static let indentSpaceList:&List<str>;

   __init {
      let list:List<str> = [];
      let mut txt = "";
      for _ = 1, 100 {
         list.insert( txt );
         txt = txt .. " ";
      }
      SimpleSourceOStream.indentSpaceList = list;
   }

   pub fn __init( stream:oStream, headStream:oStream!, stepIndent:int ) {
      self.srcStream = stream;
      self.nowStream = stream;
      self.headStream = unwrap headStream default stream;
      self.needIndent = true;
      self.curLineNo = 0;
      self.stepIndent = stepIndent;
      self.indentQueue = [ 0 ];
      self.indentSpace = "";
   }

   fn get_indent(): int {
      if #self.indentQueue > 0 {
         return self.indentQueue[ #self.indentQueue ];
      }
      return 0;
   }
   
   pub fn writeRaw( txt: str ) mut {
      if self.needIndent {
         //stream.write( string.rep( " ", self.$indent ) );
         self.nowStream.write( self.indentSpace );
         self.needIndent = false;
      }
      self.nowStream.write( txt );
   }

   pub fn write( mut txt: str ) mut {
      if not txt.find( "\n", 1, true ) {
         self.writeRaw( txt );
         return;
      }
      let mut stream = self.nowStream;
      foreach line in Str.getLineList( txt ) {
         if self.needIndent {
            //stream.write( string.rep( " ", self.$indent ) );
            stream.write( self.indentSpace );
            self.needIndent = false;
         }

         if #line > 0 and line[ #line ] == ?\n {
            self.curLineNo = self.curLineNo + 1;
         }
         stream.write( line );
      }
   }

   pub fn writeln( txt: str ) mut {
      self.write( txt );
      self.write( "\n" );
      self.needIndent = true;
   }

   pub fn pushIndent( newIndent:int! ) mut {
      let indent = unwrap newIndent default self.$indent + self.stepIndent;
      self.indentQueue.insert( indent );
      if indent > #SimpleSourceOStream.indentSpaceList {
         err( "overflow indent -- %d" (indent) );
      }
      self.indentSpace = SimpleSourceOStream.indentSpaceList[ indent + 1 ];
   }

   pub fn popIndent() mut {
      if #self.indentQueue == 0 {
         err( "self.indentQueue == 0" );
      }
      self.indentQueue.remove(##);
      self.indentSpace = SimpleSourceOStream.indentSpaceList[ self.$indent + 1 ];
   }

   pub fn switchToHeader() mut {
      self.nowStream = self.headStream;
   }
   pub fn returnToSource() mut {
      self.nowStream = self.srcStream;
   }
}

pub fn log( message:str ) {
   if debugFlag {
      errorLog( message );
   }
}

pub fn printStackTrace() {
   errorLog( Depend.getStackTrace() );
}

/**
tgtPath のファイルが depPath のファイルに依存している時、
tgtPath のファイル が depPath ファイルより新しいか調べる。

*/
pub fn getReadyCode( depPath:str, tgtPath:str ): bool {
   let! tgtTime, depTime =
      Depend.getFileLastModifiedTime( tgtPath ),
      Depend.getFileLastModifiedTime( depPath )
   {
      // errorLog( "getReadyCode: false, %s %s" (tgtPath, depPath ) );
      return false;
   };
   if tgtTime >= depTime {
      return true;
   }
   Log._log( .Warn, `{ return "not ready %g < %g : %s, %s"
                       ( tgtTime, depTime, tgtPath, depPath ); } );
   return false;
}

pub fn scriptPath2Module( path:str ):str {
   if path.find( "^/" ## ) {
      err( "script must be relative-path -- " .. path );
   }
   let mod = path.gsub( "^./", "" ).gsub( "/", "." );
   return ( string.gsub( mod, "%.lns$", "" ) );
}

pub fn scriptPath2ModuleFromProjDir( mut path:str, projDir:str! ):str {
   when! projDir {
      let workpath;
      if not projDir.find( "/$" ## ) {
         workpath = projDir .. "/";
      } else {
         workpath = projDir;
      }
      path = path.gsub( "^" .. workpath, "" );
   }
   return scriptPath2Module( path );
}

pub fn pathJoin( dir:str, path:str ) : str {
   if path.find( "^/" ## ) {
      return path;
   }
   if dir.find( "/$" ## ) {
      return "%s%s" (dir, path);
   }
   return "%s/%s" (dir, path);
}

pub fn parentPath( mut path:str ) : str {
   if path.find( "/$" ## ) {
      path = path.gsub( "/$", "" );
   }
   return (path.gsub( "/[^/]+$", "" ));
}

pub fn searchProjDir( dir:str ) : str! {
   let mut work = dir;
   while work ~= "" {
      if Depend.existFile( pathJoin( work, "lune.js" ) ) {
         return work;
      }
      work = work.gsub( "/[^/]+$", "" );
   }
   return nil;
}


__test case1(ctrl) {
   {
      // splitStr のテスト
      let splitList = splitStr( "123 456 789", "[0-9]+" );
      __t._eq( ctrl, #splitList, 3 );
      __t._eq( ctrl, splitList[ 1 ], "123" );
      __t._eq( ctrl, splitList[ 2 ], "456" );
      __t._eq( ctrl, splitList[ 3 ], "789" );
   }

   {
      // OrderedSet<T> のテスト
      let mut orderdSet = new OrderedSet<str>();
      orderdSet.add( "abc" );
      orderdSet.add( "def" ); 
      orderdSet.add( "ghi" );
      orderdSet.add( "jkl" );
      orderdSet.add( "nmo" );
      orderdSet.add( "pqr" );
      orderdSet.add( "stu" );
      orderdSet.add( "vwx" );
      orderdSet.add( "yz" );

      // 同じものを追加して、登録されないことを確認する。
      orderdSet.add( "jkl" ); 

      // 順番通りにリストされることを確認する
      let mut concat = "";
      foreach val in orderdSet.$list {
         concat = concat .. val;
      }
      __t._eq( ctrl, "abcdefghijklnmopqrstuvwxyz", concat );
   }

   {
      // memStream のテスト
      let mut stream = new memStream();
      stream.write( "12345" );
      stream.write( "67890" );
      __t._eq( ctrl, stream.$txt, "1234567890" );
   }

   {
      // SimpleSourceOStream のテスト
      let mut stream = new memStream();
      let mut sourceStream = new SimpleSourceOStream( stream, nil, 3 );

      sourceStream.writeln( "{" );
      sourceStream.pushIndent( ## );
      sourceStream.writeln( "let val = 1;" );
      sourceStream.writeln( "{" );
      sourceStream.pushIndent( ## );
      sourceStream.writeln( "let val2 = 2;" );
      sourceStream.popIndent();
      sourceStream.writeln( "}" );
      sourceStream.popIndent();
      sourceStream.write( "}" );
      sourceStream.popIndent();

      __t._eq( ctrl, stream.$txt,
```{
   let val = 1;
   {
      let val2 = 2;
   }
}``` );
   }
}
