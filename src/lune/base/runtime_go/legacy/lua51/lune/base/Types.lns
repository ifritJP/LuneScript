/*
MIT License

Copyright (c) 2018,2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control default_async_all;

pub enum Lang {
   // 変換先言語と同じ。
   Same,
   Lua,
   Go,
   C,
}

/** meta ファイルの更新必要性チェックモード */
pub alge CheckingUptodateMode {
   /** mod のモジュールは必ずビルドしなおす */
   Force1 (mod:str),
   /** uptodate チェックせずに必ずビルドしなおす */
   ForceAll,
   /** uptodate チェックし、 uptodate だった場合なにもしない */
   Normal,
   /** uptodate チェックし、 uptodate だった場合 touch だけ行なう */
   Touch,
}

pub class TransCtrlInfo {
   /** shadowing をワーニングにする */
   pub let mut warningShadowing:bool;
   /** コメントを従来互換の処理する */
   pub let mut compatComment:bool;
   /** ## を明示していない時の warning を出力するかどうか。 trueの場合出力する。*/
   pub let mut checkingDefineAbbr:bool;
   /** warning 発生した場合、 AST 解析を続けるかどうか。 true の場合止める。*/
   pub let mut stopByWarning:bool;
   pub let mut uptodateMode:CheckingUptodateMode;
   pub let mut validLuaval:bool;
   /** 指定しない場合のモードを lazy にする */
   pub let mut defaultLazy:bool;
   /** mutable の型チェックを有効にするかどうか。 */
   pub let mut validCheckingMutable:bool;
   /**
   以前の mutable 制御モードかどうか。
   mut 宣言しないと、変数の型が immutable になる。
   */ 
   pub let mut legacyMutableControl:bool;
   pub let mut validAstDetailError:bool;
   /** async 制御を有効にする */
   pub let mut validAsyncCtrl:bool;
   /** async 属性の default を __async にする */
   pub let mut defaultAsync:bool;
   /** test を有効にする */
   pub let mut testing:bool;
   /** AST の multi phase 解析を有効化  */
   pub let mut validMultiPhaseTransUnit:bool;
   /** 1 つの AST 解析の thread 個数 0 以上。 0 は、同期処理。 */
   pub let mut threadPerUnitThread:int;
   /**
マクロ展開の parse を非同期処理に切り替える stmt の長さ。
非同期処理にはオーバーヘッドがかかるので、常に非同期で処理すれば良いわけではない。
0 は非同期にしない。
*/
   pub let mut macroAsyncParseStmtLen:int;
   /** マクロの実行を非同期で行なうかどうか。 */
   pub let mut validMacroAsync:bool;

   pub fn __init() {
      self.macroAsyncParseStmtLen = 500;
      self.warningShadowing = false;
      self.compatComment = false;
      self.checkingDefineAbbr = true;
      self.stopByWarning = false;
      self.uptodateMode = .Touch;
      self.validLuaval = false;
      self.defaultLazy = false;
      self.validCheckingMutable = true;
      self.legacyMutableControl = false;
      self.validAstDetailError = false;
      self.validAsyncCtrl = false;
      self.defaultAsync = false;
      self.testing = false;
      self.validMultiPhaseTransUnit = true;
      self.threadPerUnitThread = __lns.capability.async and 5 or 0;
      self.validMacroAsync = false;
   }
}

pub static fn TransCtrlInfo.create_normal(): TransCtrlInfo {
   return new TransCtrlInfo();
}


pub class Position extend (Mapping,__absimmut) {
   pub let lineNo: int;
   pub let column: int;
   pub let streamName: str;
   /**
マクロ展開では、 streamName, lineNo, column が擬似的なものになる。
TransUnit においては 擬似的な値にする必要がある。
一方で、 lnstags のように token の位置情報を記録する場合は、
擬似的な値では扱い難い。
そこで、擬似的な値に対応する、元のソースの位置情報を記録する。
マクロ展開等ではない通常の token 位置の場合、orgPos が nil。
*/
   pub let orgPos: &Position!;

   pub fn __init( lineNo: int, column: int, streamName: str, orgPos:&Position! ) {
      self.lineNo = lineNo;
      self.column = column;
      self.streamName = streamName;
      self.orgPos = orgPos;
   }

   pub fn get_orgPos() : &Position {
      if! self.orgPos {
         return _exp.$orgPos;
      }
      return self;
   }

   pub fn get_RawOrgPos() : &Position! {
      return self.orgPos;      
   }

   pub static fn create( lineNo: int, column: int,
                         streamName: str, orgPos:&Position! ) : &Position
   {
      return new Position( lineNo, column, streamName, orgPos );
   }

   pub fn getDisplayTxt() : str {
      let txt = "%s:%d:%d" (self.streamName, self.lineNo, self.column );
      let orgPos = self.$orgPos;
      if self ~= orgPos {
         let txt2 = "%s:%d:%d" (orgPos.streamName, orgPos.lineNo, orgPos.column );
         return "%s: (%s)" (txt2, txt);
      }
      return txt;
   }
}

pub enum TokenKind {
   Cmnt,
   Str,
   Int,
   Real,
   Char,
   Symb,
   Dlmt,
   Kywd,
   Ope,
   Type,
   Sheb,
   Eof,
}

pub class Token extend (Mapping) {
   pub let kind: TokenKind;
   pub let txt: str;
   pub let pos: &Position;
   /** 直前のトークンと連続しているトークンかどうか。 true の場合連続。 */
   pub let consecutive: bool;
   pri let allmut commentList: &List<&Token> { pub };

   pub fn __init( kind: TokenKind, txt: str, pos: &Position,
                  consecutive:bool, commentList: &List<&Token>! )
   {
      self.kind = kind;
      self.txt = txt;
      self.pos = pos;
      self.consecutive = consecutive;
      self.commentList = unwrap commentList default [];
   }

   pub fn getExcludedDelimitTxt() : str {
      if self.kind ~= .Str {
         return self.txt;
      }
      switch self.txt[1] {
         case ?\', ?\" {
            return self.txt.sub( 2, #self.txt - 1 );
         }
         case ?` {
            return self.txt.sub( 1 + 3, #self.txt - 3 );
         }
      }
      error( "illegal delimit -- %s" (self.txt) );
   }

   // pub fn set_commentList( commentList: &List<&Token> ) {
   //    self.commentList = commentList;
   // }

   pub fn getLineCount():int {
      let mut count = 1;
      __luaDepend {
         apply _ of self.txt.gmatch( "\n" ) {
            count = count + 1;
         }
      }
      return count;
   }
}

pub let noneToken = new Token( .Eof, "", new Position( 0, -1, "eof" ## ), false, [] );

pub class StdinFile {
   let mod:str {pub};
   let txt:str {pub};
}

pub alge ParserSrc {
   LnsCode( code:str, path:str, pipeSize:int! ),
   LnsPath( path:str, moduleName:str, pipeSize:int! ),
   Parser( path: str, luaMode: bool, moduleName:str, pipeSize:int! ),
}

pub let defaultParserPipeSize = 100;
