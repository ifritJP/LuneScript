/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.Util;
import lune.base.Nodes;
import lune.base.Ast;
import lune.base.Parser;
import lune.base.Types;
import lune.base.Formatter;
//import lune.base.Depend;


fn loadCode( code:str ) : Luaval<&stem> {
   let loaded, mess = _load( code ## );
   when! loaded {
      if! let obj = loaded(##) {
         return obj;
      }
      error( "failed to load" );
   }
   error( "%s -- %s" (mess, code) );
}
   

pub form toListLua( val:Luaval<&stem> ) : &List<&stem>;
pub let toList = loadCode( "return function( ... ) return { ... } end" )@@toListLua;
pub form toListEmptyLua() : &List<&stem>;
pub let toListEmpty = loadCode( "return function() return {} end" )@@toListEmptyLua;
pub form toLuavalLua( val:&stem! ) : &stem!;
pub let toLuaval = loadCode( "return function( val ) return val end" )@@toLuavalLua;


class MacroMetaArgInfo extend (Mapping) {
   pub let name:str;
   pub let typeId:int;
}
class MacroMetaInfo extend (Mapping) {
   pub let name:str;
   pub let pos:&List<int>;
   pub let argList:&List<MacroMetaArgInfo>;
   pub let symList:&List<MacroMetaArgInfo>;
   pub let stmtBlock:str!;
   pub let tokenList:&List<&List<stem>>;
}


class MacroPaser extend Parser.Parser {
   let tokenList: &List<&Parser.Token>;
   let mut pos: int;
   let name: str;
   let overridePos:&Types.Position!;

   pub fn __init( tokenList: &List<&Parser.Token>,
                  name: str, overridePos:&Types.Position! )
   {
      super();
      self.pos = 1;
      self.tokenList = tokenList;
      self.name = name;
      self.overridePos = overridePos;
   }

   pub override fn createPosition( lineNo: int, column: int ) : &Types.Position {
      return Types.Position.create( lineNo, column,
                                    self.getStreamName(), self.overridePos );
   }
   
   pub override fn getToken() mut : &Parser.Token! {
      if #self.tokenList < self.pos {
         return nil;
      }
      let token = self.tokenList[ self.pos ];
      self.pos = self.pos + 1;

      // Util.errorLog( "getToken: %s" (token.txt) );

      if! self.overridePos {
         return new Types.Token(
            token.kind, token.txt,
            self.createPosition( token.pos.lineNo, token.pos.column ),
            token.consecutive, token.$commentList );
      }
      return token;
   }
   pub override fn getStreamName(): str {
      return self.name;
   }
}


fn getLiteralMacroVal( obj:Nodes.Literal ) : stem! {
   _match obj {
      case .Nil {
         return nil;
      }
      case .Int( val ) {
         return val;
      }
      case .Real( val ) {
         return val;
      }
      case .Str( val ) {
         return val;
      }
      case .Bool( val ) {
         return val;
      }
      case .Symbol( val ) {
         return [ val ];
      }
      case .Field( val ) {
         return val;
      }
      case .LIST( list ) {
         let mut newList:List<stem!> = [];
         foreach item, index in list {
            newList[ index ] = getLiteralMacroVal( item );
         }
         return newList;
      }
      case .ARRAY( list ) {
         let mut newList:List<stem!> = [];
         foreach item, index in list {
            newList[ index ] = getLiteralMacroVal( item );
         }
         return newList;
      }
      case .SET( list ) {
         let mut newSet:Set<stem> = (@);
         foreach item in list {
            if! getLiteralMacroVal( item ) {
               newSet.add( _exp );
            }
         }
         return newSet;
      }
      case .MAP( map ) {
         let mut newMap:Map<&stem,&stem> = {};
         foreach val, key in map {
            let keyObj = getLiteralMacroVal( key );
            let valObj = getLiteralMacroVal( val );
            when! keyObj, valObj {
               newMap[ keyObj ] = valObj;
            }
         }
         return newMap;
      }
   }
}

class ExtMacroInfo extend Nodes.MacroInfo {
   pri let mut name:str {pub};
   pri let mut argList:&List<&Nodes.MacroArgInfo>;
   pri let mut tokenList:&List<&Parser.Token>;

   pub override fn getArgList():&List<&Nodes.MacroArgInfo> {
      return self.argList;
   }
   pub override fn getTokenList():&List<&Parser.Token>{
      return self.tokenList;
   }

   pub fn __init( name:str, func: Luaval<Nodes.macroStatmentProc>,
                  symbol2MacroValInfoMap: Map<str,Nodes.MacroValInfo>,
                  argList:&List<&Nodes.MacroArgInfo>,
                  tokenList:&List<&Parser.Token> )
   {
      super( func, symbol2MacroValInfoMap );
      self.name = name;
      self.argList = argList;
      self.tokenList = tokenList;
   }
}

pub class MacroAnalyzeInfo {
   let typeInfo:&Ast.TypeInfo {pub};
   let mode:Nodes.MacroMode {pub};
   let mut argIndex:int {pub};

   pub fn __init( typeInfo:&Ast.TypeInfo, mode:Nodes.MacroMode ) {
      self.typeInfo = typeInfo;
      self.mode = mode;
      self.argIndex = 1;
   }

   pub fn equalsArgTypeList( argTypeList: &List<&Ast.TypeInfo>! ) : bool {
      return self.typeInfo.$argTypeInfoList == argTypeList;
   }
   pub fn getCurArgType():&Ast.TypeInfo {
      if #self.typeInfo.$argTypeInfoList < self.argIndex {
         return Ast.builtinTypeNone;
      }
      return self.typeInfo.$argTypeInfoList[ self.argIndex ];
   }
   pub fn nextArg() mut {
      self.argIndex = self.argIndex + 1;
   }

   pub fn isAnalyzingSymArg(): bool {
      return self.mode == .AnalyzeArg and self.getCurArgType() == Ast.builtinTypeSymbol;
      // if self.mode == .AnalyzeArg {
      //    switch self.getCurArgType() {
      //       case Ast.builtinTypeExp {
      //       }
      //       default {
      //          return true;
      //       }
      //    }
      // }
      // return false;
   }
   pub fn isAnalyzingExpArg(): bool {
      return self.mode == .AnalyzeArg and self.getCurArgType() == Ast.builtinTypeExp;
   }
}

pub class MacroCtrl
{
   let mut useModuleMacroSet:Set<&Ast.TypeInfo> {pub&};
   /** マクロを展開する際にマクロを評価する MacroEval のオブジェクト */
   pri let macroEval: Nodes.MacroEval;
   /** マクロの TypeId -> マクロ情報 */
   let mut typeId2MacroInfo: Map<&Ast.IdInfo,Nodes.MacroInfo> {pub&};
   /**
   * 現在展開中の macro-expand 内で利用できるシンボルと値の紐付けマップ。
   * macro-statment 内の stat の展開でも利用する。
   */
   pri let mut symbol2ValueMapForMacro: Map<str,Nodes.MacroValInfo>;
   /** マクロのモード */
   pri let mut analyzeInfo: MacroAnalyzeInfo {pub};
   pri let mut macroAnalyzeInfoStack: List<MacroAnalyzeInfo>;
   /** true の場合、Token 展開中 */
   pri let mut tokenExpanding:bool {pub};
   /** マクロをコールしている行番号 */
   pri let mut macroCallLineNo: int {pub};
   /**
   * マクロ内で利用可能な、マクロ共通ローカルマップ。
   * マクロ横断で共通。
   */
   pri let mut macroLocalVarMap:Luaval<&stem>;
   /** マクロ定義中の場合 true */
   pri let mut isDeclaringMacro:bool {pub};

   pub fn __init( macroEval: Nodes.MacroEval )
   {
      self.isDeclaringMacro = false;
      self.tokenExpanding = false;
      self.useModuleMacroSet = (@);
      self.typeId2MacroInfo = {};
      self.symbol2ValueMapForMacro = {};
      self.macroEval = macroEval;
      self.analyzeInfo = new MacroAnalyzeInfo( Ast.builtinTypeNone, .None );
      self.macroCallLineNo = 0;
      self.macroAnalyzeInfoStack = [ self.analyzeInfo ];
      self.macroLocalVarMap = toListEmpty();
   }
}

fn equalsType( typeInfo:&Ast.TypeInfo, builtinType:&Ast.TypeInfo ) : bool {
   return typeInfo.$srcTypeInfo == builtinType;
}

/**
指定マクロ macroTypeInfo を展開し、展開したマクロを Parse する Parser を返す。

@param streamName 現在のストリーム名
@param firstToken マクロを展開する場所
@param macroTypeInfo 展開するマクロの型
@param expList マクロに渡す引数
@return Parser.Parser! 展開したマクロの Parser。 失敗した場合 nil
@return str! マクロ展開に失敗した場合のエラーメッセージ
*/
pub fn MacroCtrl.evalMacroOp(
   streamName:str, firstToken: &Parser.Token, macroTypeInfo: &Ast.TypeInfo,
   expList: &Nodes.ExpListNode! ) mut: Parser.Parser!, str!
{
   self.useModuleMacroSet.add( macroTypeInfo.getModule() );

   when! expList {
      foreach exp in expList.$expList {
         let kind = exp.$kind;
         switch kind {
            case Nodes.NodeKind.$LiteralNil,
                 Nodes.NodeKind.$LiteralChar,
                 Nodes.NodeKind.$LiteralInt,
                 Nodes.NodeKind.$LiteralReal,
                 Nodes.NodeKind.$LiteralArray,
                 Nodes.NodeKind.$LiteralList,
                 Nodes.NodeKind.$LiteralMap,
                 Nodes.NodeKind.$LiteralString,
                 Nodes.NodeKind.$LiteralBool,
                 Nodes.NodeKind.$LiteralSymbol,
                 Nodes.NodeKind.$RefField,
                 Nodes.NodeKind.$ExpMacroStat,
                 Nodes.NodeKind.$ExpMacroArgExp,
                 Nodes.NodeKind.$ExpOmitEnum,
                 Nodes.NodeKind.$ExpCast,
                 Nodes.NodeKind.$ExpOp2
            {
            }
            default {
               let mess = "Macro arguments must be literal value. -- %d:%d:%s"
                   ( exp.$pos.lineNo, exp.$pos.column, 
                     Nodes.getNodeKindName(kind));
               return nil, mess;
            }
         }
      }
   }

   let macroInfo = unwrap self.typeId2MacroInfo[ macroTypeInfo.$typeId ];

   // マクロに渡す引数をセットする
   let mut argValMap:Map<int,Luaval<&stem>> = {};
   let mut macroArgValMap:Map<str,&stem> = { "__var": self.macroLocalVarMap };
   let macroArgNodeList = macroInfo.getArgList();
   let mut macroArgName2ArgNode:Map<str,&Nodes.Node> = {};
   when! expList {
      foreach argNode, index in expList.$expList {
         let literal, mess = argNode.getLiteral();
         when! literal {
            if! let val = getLiteralMacroVal( literal ) {
               argValMap[ index ] = toLuaval(val);
               let declArgNode = macroArgNodeList[ index ];

               if argNode.$expType == Ast.builtinTypeSymbol {
                  macroArgValMap[ declArgNode.$name ] = val[ 1 ];
               }
               else {
                  macroArgValMap[ declArgNode.$name ] = val;
               }
               macroArgName2ArgNode[ declArgNode.$name ] = argNode;
            }
         }
         else {
            let errmess = "not support node at arg(%d) -- %s:%s"
                ( index, Nodes.getNodeKindName( argNode.$kind ), mess );
            return nil, errmess;
         }
      }
   }

   // マクロの macro-statment を実行
   let func = macroInfo.func;
   let mut macroVars = func( macroArgValMap );

   // macroVars.__var に、 macro-statment 内で実行した結果が入ってくるので
   // self.macroLocalVarMap に入れなおす。
   self.macroLocalVarMap = unwrap macroVars.__var;

   // macro-statment の実行結果から、
   // symbol2ValueMapForMacro にシンボル名と値を紐付け
   foreach name in (unwrap macroVars.__names)@@List<str> {
      let! valInfo = macroInfo.symbol2MacroValInfoMap[ name ] {
         Util.err( "not found macro symbol -- %s" (name) );
      };
      let typeInfo = valInfo.typeInfo;
      let mut valList:Luaval<&stem>;
      if! let mut val = macroVars[ name ] {
         if equalsType( typeInfo, Ast.builtinTypeSymbol ) {
            valList = toList( val );
         } else {
            valList = val;
         }
      } else {
         valList = toListEmpty();
      }
      self.symbol2ValueMapForMacro[ name ] =
         new Nodes.MacroValInfo( valList, typeInfo, macroArgName2ArgNode[ name ] );
   }

   //let scope = self.pushScope();


   foreach arg, index in macroInfo.getArgList() {
      if arg.$typeInfo.$kind ~= .DDD {
         let argType = arg.$typeInfo;
         let argName = arg.$name;
         //scope.add( argName, argType.expType );
         self.symbol2ValueMapForMacro[ argName ] =
            new Nodes.MacroValInfo( argValMap[ index ],
                                    argType, macroArgName2ArgNode[ argName ] );
      }
      else {
         return nil, "not support ... in macro";
      }
   }

   // foreach macroValInfo, symbol in self.symbol2ValueMapForMacro {
   //     Util.errorLog( "HOGE: %s %s" (symbol, macroValInfo) );
   // }


   return new MacroPaser(
      macroInfo.getTokenList(),
      "%s:%d:%d: (macro %s)" ( streamName, firstToken.pos.lineNo, firstToken.pos.column,
                               macroTypeInfo.getTxt(##)),
      firstToken.pos.$orgPos ), nil;
}


pub fn MacroCtrl.importMacro(
   processInfo:Ast.ProcessInfo, lnsPath:str, 
   macroInfoStem:&stem!, macroTypeInfo:&Ast.TypeInfo,
   typeId2TypeInfo: &Map<int,&Ast.TypeInfo> ) mut
{
   let macroInfo, err = MacroMetaInfo._fromStem( macroInfoStem );
   when! macroInfo {
      let orgPos;
      if #macroInfo.pos == 2 {
         orgPos = new Types.Position(
            macroInfo.pos[ 1 ], macroInfo.pos[ 2 ], lnsPath );
      } else {
         Util.err( "macroInfo.pos is illegal" );
      }
      let mut argList:List<&Nodes.MacroArgInfo> = [];
      let mut argNameList:List<str> = [];
      let mut symbol2MacroValInfoMap:Map<str,Nodes.MacroValInfo> = {};
      foreach argInfo in macroInfo.argList {
         let argTypeInfo = unwrap typeId2TypeInfo[ argInfo.typeId ];
         argList.insert( new Nodes.MacroArgInfo( argInfo.name, argTypeInfo ) );
         argNameList.insert( argInfo.name );
         // symbol2MacroValInfoMap[ argInfo.name ] =
         //    new Nodes.MacroValInfo( nil, argTypeInfo );
      }
      foreach symInfo in macroInfo.symList {
         let symTypeInfo = unwrap typeId2TypeInfo[ symInfo.typeId ];
         symbol2MacroValInfoMap[ symInfo.name ] =
            new Nodes.MacroValInfo( nil, symTypeInfo, nil );
      }


      let mut tokenList:List<&Parser.Token> = [];
      let mut lineNo = 0;
      let mut column = 1;
      foreach tokenInfo in macroInfo.tokenList {
         let txt = tokenInfo[2]@@str;
         if txt == "\n" {
            lineNo = lineNo + 1;
            column = 1;
         }
         else {
            let pos = Types.Position.create(
               lineNo, column, "macro:%s" (macroInfo.name), orgPos );
            tokenList.insert(
               new Parser.Token(
                  unwrap Parser.TokenKind._from( tokenInfo[1]@@int ),
                  txt, pos, false ## ) );
            column = column + #txt + 1;
         }
      }


      self.typeId2MacroInfo[ macroTypeInfo.$typeId ] =
         new ExtMacroInfo(
            macroInfo.name,
            self.macroEval.evalFromCode(
               processInfo, macroInfo.name, argNameList, macroInfo.stmtBlock ),
            symbol2MacroValInfoMap, argList, tokenList );
   }
   else {
      Util.errorLog( "macro load fail -- %s: %s "
                     (macroTypeInfo.getTxt(##), unwrap err default "") );
   }
}


pub fn MacroCtrl.regist(
   processInfo:Ast.ProcessInfo, node:Nodes.DeclMacroNode, macroScope:&Ast.Scope ) mut
{
   let macroObj = self.macroEval.eval( processInfo, node );

   // registVar() した時に確定していない変数の型を、ここで確定する。
   let mut remap:Map<str,Nodes.MacroValInfo> = {};
   foreach macroValInfo, name in self.symbol2ValueMapForMacro {
      if equalsType( macroValInfo.typeInfo, Ast.builtinTypeEmpty ) {
         if! let typeInfo = macroScope.getTypeInfoChild( name ) {
            remap[ name ] = new Nodes.MacroValInfo(
               macroValInfo.val, typeInfo, macroValInfo.argNode );
         } else {
            remap[ name ] = macroValInfo;
         }
      } else {
         remap[ name ] = macroValInfo;
      }
   }
   // マクロ情報を登録
   self.typeId2MacroInfo[ node.$expType.$typeId ] =
      new Nodes.DefMacroInfo( macroObj, node.$declInfo, remap );

   self.symbol2ValueMapForMacro = {};
   self.isDeclaringMacro = false;
}

fn expandVal( tokenList:List<&Parser.Token>,
              workval: Luaval<&stem>!, pos: &Parser.Position ): str!
{
   when! workval {
      let val = workval@@stem;
      switch type( val ) {
         case "boolean" {
            let token = "%s" (val);
            let kind = Parser.TokenKind.Kywd;
            tokenList.insert( new Parser.Token( kind, token, pos, false ## ) );
         }
         case "number" {
            let num = "%g" (val@@real);
            let mut kind = Parser.TokenKind.Int;
            if string.find( num, ".", 1, true ) {
               kind = Parser.TokenKind.Real;
            }
            tokenList.insert( new Parser.Token( kind, num, pos, false ## ) );
         }
         case "string" {
            tokenList.insert(
               new Parser.Token(
                  Parser.TokenKind.Str,
                  //'%q' (val@@str),
                  Parser.quoteStr( val@@str ),
                  pos, false ## ) );
            // val 中に \n 等の制御コードが入ると正常に処理されない。
            // val 内の制御コードを \xXX に変換する必要がある。
         }
         default {
            return "not support ,, List -- %s" ( type( val ) );
         }
      }
   }
   return nil;
}

/**
txtList の文字列リストを parse して、
pushbackParser に pushback する。

@param pushbackParser PushbackParser
@param txtList 文字列リスト
@param streamName ストリーム名
@param pos parse したトークンの位置情報に置き換える値
*/
fn pushbackTxt( pushbackParser:Parser.PushbackParser,
                txtList:&List<str>, streamName:str, pos:&Parser.Position )
{
   let mut tokenList:List<&Parser.Token> = [];
   foreach txt in txtList {
      let mut stream = new Parser.TxtStream( txt );
      let mut parser = new Parser.StreamParser(
         stream, "macro symbol -- %s" (streamName), false, pos.$RawOrgPos );
      let mut workParser = new Parser.DefaultPushbackParser( parser );
      while true {
         let worktoken = workParser.getTokenNoErr();
         if worktoken.kind == .Eof {
            break;
         }
         tokenList.insert( new Parser.Token(
            worktoken.kind, worktoken.txt, pos, false ## ) );
      }
   }
   for index = #tokenList, 1, -1 {
      pushbackParser.pushbackToken( tokenList[ index ] );
   }
}


/**
macro-expand 内のトークン処理。

,, や ,,,の展開を行なう。

*/
pub fn MacroCtrl.expandMacroVal(
   typeNameCtrl:&Ast.TypeNameCtrl, scope:&Ast.Scope,
   parser:Parser.PushbackParser, mut token:&Parser.Token ) mut : &Parser.Token
{
   if self.tokenExpanding {
      return token;
   }

   fn getToken(): &Parser.Token {
      self.tokenExpanding = true;
      let work = parser.getTokenNoErr();
      self.tokenExpanding = false;
      return work;
   }
   

   let tokenTxt = token.txt;

   // let mut nextToken = getToken();
   
   // if nextToken.txt ~= "~~" {
   //    parser.pushbackToken( nextToken );
   // }
   
   if tokenTxt == ',,' or tokenTxt == ',,,' or tokenTxt == ',,,,' {
      let mut nextToken = getToken();

      let! macroVal = self.symbol2ValueMapForMacro[ nextToken.txt ] {
         parser.error( "unknown macro val -- %s" (nextToken.txt) );
      };

      if tokenTxt == ',,' {
         //Util.errorLog( "nextToken: %s" ( nextToken.txt ) );
         if equalsType( macroVal.typeInfo, Ast.builtinTypeSymbol ) {
            let mut txtList:List<str> = [];
            foreach txt in (unwrap macroVal.val)@@str[] {
               txtList.insert( txt );
            }
            pushbackTxt( parser, txtList, nextToken.txt, nextToken.pos ); 
         }
         elseif equalsType( macroVal.typeInfo, Ast.builtinTypeStat ) or
            equalsType( macroVal.typeInfo, Ast.builtinTypeExp ) or
            equalsType( macroVal.typeInfo, Ast.builtinTypeMultiExp ) 
         {
            let pos = macroVal.argNode$.$pos$.$RawOrgPos or
               nextToken.pos.$RawOrgPos or token.$pos.$orgPos;
            parser.pushbackStr( "macroVal %s" (nextToken.txt),
                                (unwrap macroVal.val)@@str, pos );
         }
         elseif macroVal.typeInfo.$kind == .Array or
            macroVal.typeInfo.get_kind() == .List
         {
            if equalsType( macroVal.typeInfo.$itemTypeInfoList[ 1 ],
                           Ast.builtinTypeStat )
            {
               let pos = macroVal.argNode$.$pos$.$RawOrgPos or
                  nextToken.pos.$RawOrgPos or token.$pos.$orgPos;
               let strList = (unwrap macroVal.val)@@str[];
               for index = #strList, 1, -1 {
                  parser.pushbackStr(
                     "macroVal %s[%d]" (nextToken.txt, index),
                     strList[ index ], pos );
               }
            }
            else {
               let mut tokenList: List<&Parser.Token> = [];

               if! let argNode = macroVal.argNode {
                  if not argNode.setupLiteralTokenList( tokenList ) {
                     parser.error( "illegal macro val ,, -- %s" (nextToken.txt) );
                  }
               }
               else {
                  parser.error( "not support ,, -- %s" (nextToken.txt) );
               }

               parser.newPushback( tokenList );
            }
         }
         elseif macroVal.typeInfo.get_kind() == .Enum {
            let enumTypeInfo = unwrap macroVal.typeInfo.$aliasSrc@@@Ast.EnumTypeInfo;
            let fullname = macroVal.typeInfo.getFullName( typeNameCtrl, scope, true );
            let mut nameList:List<str> = [];
            apply name of fullname.gmatch( "[^%.]+" ) {
               nameList.insert( name );
            }
            let enumValInfo = unwrap enumTypeInfo.$val2EnumValInfo[ unwrap macroVal.val ];
            nextToken = new Parser.Token(
               .Symb, enumValInfo.$name, nextToken.pos, false ## );
            parser.pushbackToken( nextToken );
            for index = #nameList, 1, -1 {
               nextToken = new Parser.Token( .Dlmt, ".", nextToken.pos, false ## );
               parser.pushbackToken( nextToken );
               nextToken = new Parser.Token(
                  .Symb, nameList[ index ], nextToken.pos, false ## );
               parser.pushbackToken( nextToken );
            }
         }
         else {
            let mut tokenList: List<&Parser.Token> = [];

            if! let argNode = macroVal.argNode {
               if not argNode.setupLiteralTokenList( tokenList ) {
                  parser.error( "illegal macro val ,, -- %s" (nextToken.txt) );
               }
            }
            else {
               expandVal( tokenList, macroVal.val, nextToken.pos );
            }

            parser.newPushback( tokenList );
         }
      }
      elseif tokenTxt == ',,,' {
         if equalsType( macroVal.typeInfo, Ast.builtinTypeString ) {
            pushbackTxt( parser, [ (unwrap macroVal.val)@@str ],
                         nextToken.txt, nextToken.pos );
         }
         else {
            parser.error( "',,,' does not support this type -- %s"
                          (macroVal.typeInfo.getTxt(##)) );
         }
      }
      elseif tokenTxt == ',,,,' {
         if equalsType( macroVal.typeInfo, Ast.builtinTypeSymbol ) {
            let txtList = (unwrap macroVal.val)@@str[];
            let mut newToken = "";
            foreach txt in txtList {
               newToken = "%s%s" (newToken, txt);
            }
            nextToken = new Parser.Token(
               Parser.TokenKind.Str, "'%s'" (newToken), nextToken.pos, false ## );
            parser.pushbackToken( nextToken );
         }
         elseif equalsType( macroVal.typeInfo, Ast.builtinTypeStat ) or
            equalsType( macroVal.typeInfo, Ast.builtinTypeExp ) or
            equalsType( macroVal.typeInfo, Ast.builtinTypeMultiExp )
         {
            let txt = (unwrap macroVal.val)@@str;
            let rawTxt;
            if txt.find( "^```"## ) {
               //rawTxt = "%q" (txt);
               rawTxt = Parser.quoteStr( txt );
            }
            else {
               //rawTxt = "%q" (txt);
               rawTxt = Parser.quoteStr( txt );
            }
            nextToken = new Parser.Token(
               Parser.TokenKind.Str, rawTxt, nextToken.pos, false ##);
            parser.pushbackToken( nextToken );
         }
         else {
            parser.error( "not support this symbol -- %s%s"
                          (tokenTxt, nextToken.txt) );
         }
      }
      nextToken = getToken();

      token = nextToken;
   }

   self.tokenExpanding = false;

   return token;
}

pub class ErrorMess {
   pub let pos:Parser.Position;
   pub let mess:str;
}

pub fn MacroCtrl.expandSymbol(
   parser:Parser.PushbackParser, prefixToken:&Parser.Token,
   mut exp:&Nodes.Node, nodeManager:Nodes.NodeManager,
   errMessList:List<&ErrorMess>) mut : &Nodes.LiteralStringNode
{
   let nextToken = parser.getTokenNoErr();
   if nextToken.txt ~= "~~" {
      parser.pushbackToken( nextToken );
   }
   
   let mut format = prefixToken.txt == ",,," and "' %s '" or '"\'%s\'"';

   if prefixToken.txt == ",," {
      if! let refNode = exp@@@Nodes.ExpRefNode {
         let symbolInfo = refNode.$symbolInfo;
         let macroInfo = self.symbol2ValueMapForMacro[ symbolInfo.$name ];
         when! macroInfo {
            let valType = macroInfo.typeInfo;
            if equalsType( valType, Ast.builtinTypeSymbol ) or
               equalsType( valType, Ast.builtinTypeExp ) or
               equalsType( valType, Ast.builtinTypeMultiExp ) or
               equalsType( valType, Ast.builtinTypeStat )
            {
               format = "' %s '";
            }
            elseif valType.$kind == .List and
               equalsType( valType.$itemTypeInfoList[1], Ast.builtinTypeStat )
            {
               format = "' %s '";
               exp = Nodes.ExpMacroStatListNode.create(
                  nodeManager, prefixToken.pos,
                  self.analyzeInfo.$mode == .AnalyzeArg, [ Ast.builtinTypeString ], exp );
            }
            elseif equalsType( Ast.builtinTypeString, valType ) {
               //
            }
            elseif equalsType( valType, Ast.builtinTypeInt ) or
               equalsType( valType, Ast.builtinTypeReal )
            {
               format = "' %s' ";
            }
            else {
               errMessList.insert(
                  new ErrorMess( unwrap symbolInfo.$pos,
                                 "not support ,, -- %s" (valType.getTxt(##)) ) );
            }
         }
         else {
            if equalsType( exp.$expType, Ast.builtinTypeInt ) or
               equalsType( exp.$expType, Ast.builtinTypeReal )
            {
               format = "' %s' ";
            }
            elseif equalsType( exp.$expType, Ast.builtinTypeSymbol ) or
               equalsType( exp.$expType, Ast.builtinTypeExp ) or
               equalsType( exp.$expType, Ast.builtinTypeMultiExp ) or
               equalsType( exp.$expType, Ast.builtinTypeStat )
            {
               format = "' %s '";
            }
         }
      }
   }
   let newToken = new Parser.Token(
      Parser.TokenKind.Str, format, prefixToken.pos, prefixToken.consecutive ## );

   let expListNode = Nodes.ExpListNode.create(
      nodeManager, exp.$pos, self.analyzeInfo.$mode == .AnalyzeArg,
      exp.$expTypeList, [ exp ], nil, false );
   let dddNode = Nodes.ExpToDDDNode.create(
         nodeManager, exp.$pos, self.analyzeInfo.$mode == .AnalyzeArg,
         exp.$expTypeList, expListNode );
   
   let literalStr = Nodes.LiteralStringNode.create(
      nodeManager, prefixToken.pos, self.analyzeInfo.$mode == .AnalyzeArg,
      [ Ast.builtinTypeString ], newToken,
      expListNode,
      Nodes.ExpListNode.create(
         nodeManager, exp.$pos, self.analyzeInfo.$mode == .AnalyzeArg,
         exp.$expTypeList, [ dddNode ], nil, false ), false );
   return literalStr;
}

/**
macro-statment 内で定義している変数を登録する。

このときはまだ変数宣言しているだけなので、
実際の値はマクロ展開時にセットする。

変数の型

@param symbolList 変数一覧
*/
pub fn MacroCtrl.registVar( symbolList:&List<&Ast.SymbolInfo> ) mut
{
   foreach symbolInfo in symbolList {
      let mut info = new Nodes.MacroValInfo( nil, symbolInfo.$typeInfo, nil);
      self.symbol2ValueMapForMacro[ symbolInfo.$name ] = info;
   }
}

pub fn MacroCtrl.startDecl() mut {
   self.symbol2ValueMapForMacro = {};
   self.isDeclaringMacro = true;   
}

pub form EvalMacroCallback();

pub fn MacroCtrl.finishMacroMode() mut {
   self.macroAnalyzeInfoStack.remove(##);
   self.analyzeInfo = self.macroAnalyzeInfoStack[ #self.macroAnalyzeInfoStack ];
}


pub fn MacroCtrl.startExpandMode(
   lineNo:int, typeInfo:&Ast.TypeInfo, callback:EvalMacroCallback ) mut
{
   self.analyzeInfo = new MacroAnalyzeInfo( typeInfo, .Expand );
   self.macroCallLineNo = lineNo;
   self.macroAnalyzeInfoStack.insert( self.analyzeInfo );

   callback();

   self.finishMacroMode();
}

pub fn MacroCtrl.startAnalyzeArgMode( macroFuncType:&Ast.TypeInfo ) mut {
   self.analyzeInfo = new MacroAnalyzeInfo( macroFuncType, .AnalyzeArg );
   self.macroAnalyzeInfoStack.insert( self.analyzeInfo );
}

pub fn MacroCtrl.switchMacroMode() mut {
   self.analyzeInfo = self.macroAnalyzeInfoStack[ #self.macroAnalyzeInfoStack - 1 ];
   self.macroAnalyzeInfoStack.insert( self.analyzeInfo );
}

pub fn MacroCtrl.restoreMacroMode() mut {
   self.macroAnalyzeInfoStack.remove(##);
   self.analyzeInfo = self.macroAnalyzeInfoStack[ #self.macroAnalyzeInfoStack ];
}

/**
現在の Macroモード が AnalyzeArg か調べる。
Macroモード がネストされている場合、ネストを辿って調べる。
*/
pub fn MacroCtrl.isInAnalyzeArgMode(): bool {
   if #self.macroAnalyzeInfoStack == 0 {
      return false;
   }
   foreach info in self.macroAnalyzeInfoStack {
      if info.$mode == .AnalyzeArg {
         return true;
      }
   }
   return false;
}


pub fn nodeToCodeTxt(node:&Nodes.Node, moduleTypeInfo:&Ast.TypeInfo ):str
{
   let mut memStream = new Util.memStream();
   let mut formatter = Formatter.createFilter( moduleTypeInfo, memStream );

   node.processFilter( formatter, new Formatter.Opt( node ) );
   
   return memStream.$txt;
}

__test case1(ctrl) {
}
