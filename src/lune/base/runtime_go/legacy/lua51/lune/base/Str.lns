/*
MIT License

Copyright (c) 2018,2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control limit_conv_code lua;
_lune_control default_async_all;


/**
txt の先頭が ptn の文字列で始まっているかどうか調べる。

@return ptn の文字列で始まっている場合 true
*/
pub fn startsWith( txt:str, ptn:str ) : bool {
   return txt.find( ptn, 1, true ) ~= nil;
}

/**
txt の先頭が ptn の文字列で始まっているかどうか調べる。

@return ptn の文字列で始まっている場合 true
*/
pub fn endsWith( txt:str, ptn:str ) : bool {
   return txt.find( ptn, #txt - #ptn + 1, true ) ~= nil;
}

/**
txt を行ごとに分割したリストを返す
*/
pub fn getLineList( txt:str ) : List<str> {
   let mut list:List<str> = [];

   __asyncLock {
      // 改行までの文字列
      apply line of string.gmatch( txt, "[^\n]*\n" ) {
         list.insert( line );
      }
      apply last of string.gmatch( txt, "[^\n]+$" ) {
         list.insert( last );
      }
   }
   return list;
}

pub class Builder {
   let mut txt: str;
   let mut progress: str;

   pub fn get_txt() :str {
      if #self.progress == 0 {
         return self.txt;
      }
      return self.txt .. self.progress;
   }
   pub fn __init() {
      self.txt = "";
      self.progress = "";
   }
   pub fn add( val: str ) mut {
      if #self.progress + #val > 1000 {
         self.txt = "%s%s%s" (self.txt, self.progress, val );
         self.progress = "";
      } else {
         self.progress = self.progress .. val;
      }
   }
   pub fn len() : int {
      return #self.txt + #self.progress;
   }
   pub fn clear() mut {
      self.txt = "";
      self.progress = "";
   }
   pub fn flush() mut {
      self.txt = self.txt .. self.progress;
      self.progress = "";
   }
}

pub fn isValidStrBuilder() : bool {
   return false;
}
