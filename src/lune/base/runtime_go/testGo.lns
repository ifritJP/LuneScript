{
   fn func( work:&List<Map<str,int>> ) {
      foreach list in work {
         foreach val, key in list {
            print( key, val );
         }
      }
   }
   let mut work = [{ "ab":1 }, { "xyz":2 }];
   work.remove(##);
   work.insert( {"eee":10} );
   func( work );
}
{
   fn func( val1:int!, val2:int! ) {
      when! val1, val2 {
         print( val1 + val2 );
      }
      else {
         print( val1, val2 );
      }
   }
   func( 1, 10 );
   func( nil, 10 );
   func( 10, nil );
   func( nil, nil );
}
{
   fn func( val1:int!, val2:int! ) {
      if! let val10, val20 = val1, val2 {
         print( val10 + val20 );
      }
      else {
         print( val1, val2 );
      }
   }
   func( 1, 10 );
   func( nil, 10 );
   func( 10, nil );
   func( nil, nil );
}
{
   fn func( val1:int!, val2:int! ) {
      let! val10, val20 = val1, val2 {
         print( val1, val2 );
         return;
      }
      then {
         print( val10 + val20 );
      };
      print( val10 - val20 );
   }
   func( 1, 10 );
   func( nil, 10 );
   func( 10, nil );
   func( nil, nil );
}
{
   class Test {
      pro let val1:int;
      pro let val2:int;
      pub fn sub1(): int {
         return self.val1 + 100;
      }
      pub fn sub2(): int {
         return self.val2 + 100;
      }
   }
   class Sub extend Test {
      let val3:int;
      pub override fn sub1(): int {
         return self.val1 + 200;
      }
      pub fn sub3(): int {
         return self.val3 + 200;
      }
   }
   class SubSub extend Sub {
      pub override fn sub1(): int {
         return self.val1 + 300;
      }
      pub override fn sub2(): int {
         return self.val2 + 300;
      }
   }

   fn func1( test:&Test ): int, int {
      if! let sub = test@@@Sub {
         print( "OK", sub.sub2() );
      }
      else {
         print( "CAN'T CAST" );
      }
      return test.sub1(), test.sub2();
   }

   fn func2( test:&stem ) {
      if! let sub = test@@@Sub {
         print( "OK", sub.sub2() );
      }
      else {
         print( "CAN'T CAST" );
      }
   }

   let test = new Test( 1, 2 );
   print( func1( test )** );
   func2( test );

   let sub = new Sub( 1, 2, 3 );
   print( sub.sub3(), func1( sub )** );
   func2( sub );

   let subsub = new SubSub( 1, 2, 3 );
   print( subsub.sub3(), func1( subsub )** );
   func2( subsub );
}
{
   class Test {
      let val1:int;
      let val2:int;
      pub fn __init(val1:int, val2:int) {
         self.val1 = val1;
         self.val2 = val2;
      }
      pub fn func() {
         print( self.val1, self.val2 );
      }
   }

   fn func():int,int {
      return 1, 2;
   }

   class Sub extend Test {
   }

   class SubSub extend Sub {
      let val3:int;
      pub fn __init() {
         super( 0, (func()));
         self.val3 = 3;
      }
      pub override fn func() {
         super();
         print( self.val3 );
      }
   }

   let test = new SubSub();
   test.func();
}
{
   class Test {
      let val:int;
      pub fn func():int {
         return self.val;
      }
   }
   class Sub extend Test {
      pub override fn func():int {
         return super() + 100;
      }
   }
   let list = [ new Sub( 1 ), new Test( 10 ) ];
   foreach val in list {
      print( val.func() );
   }
}
{
   fn func( val:str ) {
      switch val {
         case "1", "2" {
            print( "A" );
         }
         case "3", "4" {
            print( "B" );
         }
         default {
            print( "C" );
         }
      }
   }

   foreach val in [ "1", "2", "3", "4", "5" ] {
      func( val );
   }
}
{
   let mut val = 1;
   while true {
      if val > 10 {
         break;
      }
      print( val );
      val = val + 1;
   }
}
{
   let mut val = 1;
   repeat {
      print( val );
      val = val + 1;
   } val > 10;
}
{
   class Test {
      let mut val:int {pub,pub};
   }

   let mut test = new Test( 10 );
   test.set_val( test.$val + 100 );
   print( test.$val );   
}
class Testggg {
   static let val:int;

   __init {
      Testggg.val = 1;
   }
   pub fn func():int {
      return Testggg.val + 10;
   }
   pub static fn sfunc():int {
      return 10;
   }
}
{
   let test = new Testggg();
   print( test.func(), Testggg.sfunc() );
}
{
   enum Test {
      Val1,
      Val2,
   }
   foreach val in Test.$_allList {
      print( val + 10 );
   }
   enum Test2 {
      Val1 = "a",
      Val2 = "b",
   }
   foreach val, index in Test2.$_allList {
      print( index, val, Test2._from( val ), val.get__txt(), val.$_txt );
   }
}
{
   enum Test {
      Val1,
      Val2,
   }

   fn func( val:Test ) {
      print( val + 1 );
   }

   func( .Val1 );
}
{
   alge Val {
      val1,
      val2( int, str ),
   }

   fn sub( val:Val ) {
      match val {
         case .val2( val1, val2 ) {
            print( "val2 %s" (val2) );
         }
         default {
            print( "other" );
         }
      }
      if val == .val1 {
         print( "equal" );
      }
      print( val.$_txt );
   }
   sub( Val.val1 );
   sub( Val.val2( 100, "xyz" ) );
}
{
   fn func( val:int, ... ) {
      print( ..., val );
   }

   func( 1, 2, "abc" );
}
{
   fn func( val:int, ... ) {
      let list = [ ... ];
      foreach item in list {
         print( item );
      }
   }

   func( 1, 2, "abc" );
}
{
   let val = -1.5;
   for index = 10,1, val {
      print( index );
   }
}
{
   form TestForm( val:str ):int, int;
   fn func( txt:str ) : TestForm! {
      return fn ( val:str ):int,int { print( val .. txt ); return 1, 2; };
   }
   let sub = func( "xyz" );
   when! sub {
      print( sub( "hoge" )** );
   }
}
{
   class Test0 {
      pub let val:int {pub};
   }
   class Test1 {
      pub let val0:Test0 {pub};
   }
   class Test2 {
      pub let val1:Test1! {pub};
   }
   class Test3 {
      pub let val2:Test2! {pub};
   }
   fn func(test:Test3) {
      print( test.val2$.val1$.val0$.val );
   }
   func( new Test3(##) );
   func( new Test3( new Test2(##)) );
   func( new Test3( new Test2( new Test1( new Test0( 10 )  ))) );
}
