/*
MIT License

Copyright (c) 2018, 2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control use_async;
_lune_control default_async_all;


pub class PipeItem<T> {
   let item:T {pub};
}

/**
T 型のデータを生成して返す処理を別スレッドにする。
*/
pub abstract class Pipe<T> {
   let mut pipe:__pipe<T>!;
   let mut started:bool;
   let mut setuped:bool;
   
   pro fn __init( pipe:__pipe<T>! ) {
      //super();
      self.pipe = pipe;
      self.started = false;
      self.setuped = false;
   }

   pro abstract fn setup() mut;
   pro abstract fn access() mut : PipeItem<T>!;

   pub fn getNext() mut : PipeItem<T>! {
      if self.started {
         if! let mut pipe = self.pipe {
            let! val = pipe.get() {
               return nil;
            };
            return new PipeItem( val );
         }
      }
      return self.access();
   }

   //pro override fn loop() mut {
   pub fn run() mut {
      self.setup();
      self.setuped = true;
      let! mut pipe = self.pipe {
         return;
      };
      while true {
         let! mut val = self.access() {
            pipe.put( nil );
            break;
         };
         pipe.put( val.$item );
      }
   }

   pub fn start() mut {
      self.started = true;
   }
   pub fn stop() mut {
      self.started = false;
      if not self.setuped {
         self.setup();
      }
   }

}


/**
複数の型 T! のデータ生成を並列に行ない、マージする際に利用する runner の基底クラス。

このクラスを派生したクラスは、 runMain() で 1 つの型 T! のデータ生成を行なう。

Waiter<T> クラスの startRunner() で、この派生クラスの処理を開始し、
Waiter<T> クラスの wait() で、処理終了を待ちマージを行なう。
*/
abstract class RunnerBase<T> extend (__Runner, __AsyncItem ) {
   /** 処理終了を通知する pipe */
   let pipe:__pipe<RunnerBase<T>>!;
   /** この runner で生成した T 型のデータ */
   let mut artifact:T! {pub};
   /** この runner を実行済みかどうか */
   let mut ranFlag:bool {pub};

   /**
Waiter<T> から取得した pipe を指定して、クラスを生成する。
   */
   pub fn __init( pipe:__pipe<RunnerBase<T>>! ) __async {
      self.pipe = pipe;
      self.artifact = nil;
      self.ranFlag = false;
   }

   /**
T! 型のデータを生成する処理。

@return 生成した T! 型のデータ。
   */
   pro abstract fn runMain() __async mut : T!;


   /**
runner 実行処理。
   */
   pub fn run() __async mut {
      self.artifact = self.runMain();
      self.ranFlag = true;
      
      if! let pipe = self.pipe {
         pipe.put( self );
      }
   }
}

form EndProcessFunc<T>( t:RunnerBase<T> ) __trans;

class Waiter<T> {
   /** 処理済みの RunnerBase<T> を受けとる pipe */
   let pipe:__pipe<RunnerBase<T>>! {pub};
   /** 非同期に実行した RunnerBase<T> の数 */
   let mut asyncNum:int;
   /** 非同期に実行しなかった RunnerBase<T> のリスト */
   let finRunnerList:List<RunnerBase<T>>;

   /**
生成する

@param pipeItemCount pipe で同時に入れられるアイテム数
   */
   pub fn __init(pipeItemCount:int) __async {
      self.pipe = __lns.Sync._createPipe( RunnerBase<str>, pipeItemCount );
      self.asyncNum = 0;
      self.finRunnerList = [];
   }

   /**
指定の RunnerBase<T> を開始する。

@param runner RunnerBase<T>
@param mode __run() の開始モード
@param name RunnerBase<T> の実行名
@return __run() の戻り値
   */ 
   local fn startRunner( runner: RunnerBase<T>, mode:int, name:str ) mut : bool {
      self.asyncNum = self.asyncNum + 1;
      let result = __run( runner, mode, name );
      if not self.pipe or not result {
         self.asyncNum = self.asyncNum - 1;
         self.finRunnerList.insert( runner );
      }
      return result;
   }

/**
startRunner() で実行した runner の処理終了を待つ。

@param func runner が処理終了した時に呼ばれる処理。
処理終了随時呼ばれる。
*/
   pub fn wait( func:EndProcessFunc<T> ) __async mut {
      foreach runner in self.finRunnerList {
         func( runner );
      }
      if! let pipe = self.pipe {
         for _ = 1, self.asyncNum {
            let! mut runner = pipe.get() {
               break;
            };
            func( runner );
         }
      }
   }
}
