/*
MIT License

Copyright (c) 2018,2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control limit_conv_code lua;


import lune.base.frontInterface;
import lune.base.Util;
//import lune.base.Nodes;

_lune_control ignore_symbol_;

pub form LoadFunc(...) __async :&stem!;

/**
lua コードを LuneScript コンパイラ上で動かす。

この Lua コードからは、 _lnsLoad( "lnsCode" )  を実行することで、
.Lns コードのトランスコンパイルした Lua コードを取得できる。

@return Luaval<LoadFunc>!
  成功した場合、ロードした Lua コードを実行するための関数。
@return エラー内容を示す文字列
*/
pub fn runLuaOnLns(
   luaCode:str, baseDir:str!, async:bool ) __async : Luaval<LoadFunc>!, str {
   let mut newEnv:Map<str,stem> = {};
   foreach val, key in _G {
      newEnv[ key ] = val;
   }
   newEnv[ "_lnsLoad" ] = fn ( name:str, txt:str ): Luaval<&stem> {
      let mut importModuleInfo = new frontInterface.ImportModuleInfo();
      let mut val = frontInterface.loadFromLnsTxt( importModuleInfo, baseDir, name, txt );
      return val;
   };

   let loaded, err;
   if async {
      __luaDepend {
         loaded, err = _load( luaCode, newEnv );
      }
   } else {
      __luaLock {
         loaded, err = _load( luaCode, newEnv );
      }
   }

   when! loaded {
      return loaded@@LoadFunc, "";
   }
   when! err {
      return nil, err;
   }
   return nil, "";
}

/**
指定のローカル変数の値を取得する。
*/
global fn __luneGetLocal( varName:str ):stem!
{
   let mut index = 1;
   while true {
      let name, val = debug.getlocal( 3, index );
      if name == varName {
	 return val;
      }
      if not name {
	 break;
      }
      //print( name, val )
      index = index + 1;
   }
   // 指定のローカル変数の値を取得できないのはバグ
   error( "not found -- " .. varName );
}

global fn __luneSym2Str( val:stem! ):str! {
   if! val {
      if type( _exp ) ~= "table" {
         return string.format( "%s", _exp );
      }

      let mut txt = "";
      foreach item in _exp@@str[] {
         txt = txt .. item;
      }
      return txt;
   }
   return nil;
}

/**
go/gihub:com.***.****.**** で import/module 宣言した lua モジュールのパスを
package.path に追加する。
これをしないと、lua 版 LuneScript で実行できない。
*/
pub fn addGoModPath( list:&List<str> ) __async {
   __luaLock {
      let loaded, mess = _load( ```
return function( pathList )
  for index, path in ipairs( pathList ) do
     package.path = string.format( "%s;%s", package.path, path )
  end
end
```## );
      when! loaded {
         if! let func = loaded(##) {
            let luaPathList:List<str> = [];
            foreach path in list {
               luaPathList.insert( Util.pathJoin( path, "?.lua") );
            }
            (func@@form)( luaPathList );
         } else {
            error( "failed to load func" );
         }
      } else {
         Util.println( mess );
      }
   }
}
