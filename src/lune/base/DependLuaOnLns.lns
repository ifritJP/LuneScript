import lune.base.frontInterface;
//import lune.base.Nodes;

_lune_control ignore_symbol_;

pub form LoadFunc():&stem!;

/**
lua コードを LuneScript コンパイラ上で動かす。

この Lua コードからは、 _lnsLoad( "lnsCode" )  を実行することで、
.Lns コードのトランスコンパイルした Lua コードを取得できる。

@return Luaval<LoadFunc>!
  成功した場合、ロードした Lua コードを実行するための関数。
@return エラー内容を示す文字列
*/
pub fn runLuaOnLns( luaCode:str ): Luaval<LoadFunc>!, str {

   let mut newEnv:Map<str,stem> = {};
   foreach val, key in _G {
      newEnv[ key ] = val;
   }
   newEnv[ "_lnsLoad" ] = fn ( name:str, txt:str ): Luaval<&stem> {
      let mut importModuleInfo = new frontInterface.ImportModuleInfo();
      let mut val = frontInterface.loadFromLnsTxt( importModuleInfo, name, txt );
      return val;
   };

   let loaded, err = _load( luaCode, newEnv );
   when! loaded {
      return loaded@@LoadFunc, "";
   }
   when! err {
      return nil, err;
   }
   return nil, "";
}


global fn __luneGetLocal( varName:str ):stem!
{
   let mut index = 1;
   while true {
      let name, val = debug.getlocal( 3, index );
      if name == varName {
	 return val;
      }
      if not name {
	 break;
      }
      //print( name, val )
      index = index + 1;
   }
   error( "not found -- " .. varName );
}

global fn __luneSym2Str( val:stem! ):str! {
   if! val {
      if type( _exp ) ~= "table" {
         return string.format( "%s", _exp );
      }

      let mut txt = "";
      foreach item in _exp@@str[] {
         txt = txt .. item;
      }
      return txt;
   }
   return nil;
}
