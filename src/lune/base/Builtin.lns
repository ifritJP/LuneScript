/*
MIT License

Copyright (c) 2018, 2019 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.Types;
import lune.base.Parser;
import lune.base.Util;
import lune.base.Ast;
import lune.base.LuaVer;
import lune.base.Log;

import lune.base.TransUnitIF;
import lune.base.BuiltinTransUnit;

_lune_control ignore_symbol_;

pub class Builtin {
   let transUnit:BuiltinTransUnit.TransUnit;
   /**
トランスコンパイル先の lua バージョン
   */
   let targetLuaVer:&LuaVer.LuaVerInfo;
   let ctrl_info: &Types.TransCtrlInfo;
   let processInfo:Ast.ProcessInfo;
   let modifier:TransUnitIF.Modifier;

   let mut hasLuaval:bool;

   pub fn __init( targetLuaVer:&LuaVer.LuaVerInfo,
                  ctrl_info: &Types.TransCtrlInfo )
   {
      self.hasLuaval = false;
      self.processInfo = Ast.getRootProcessInfo();
      self.transUnit = new BuiltinTransUnit.TransUnit( ctrl_info, self.processInfo );
      self.targetLuaVer = targetLuaVer;
      self.ctrl_info = ctrl_info;
      self.modifier = new TransUnitIF.Modifier( true, self.processInfo );
   }
}

macro _DefBuiltinFuncType(
   class2symMapList:List<Map<str,Map<str,Map<str,List<str>>>>>,
   algesymList:List<Map<str,List<Map<str,List<str>>>>> )
{
   {
      let mut defMemberList:List<stat> = [];
      let mut initMemberList:List<stat> = [];
      let mut declProcessList:List<stat> = [];
      let mut caseList:List<stat> = [];
      let mut classCaseList:List<stat> = [];
      foreach class2symMap in class2symMapList {
         forsort symbolMap, genClassName in class2symMap {
            let className = genClassName.gsub( "<.*", "" ).gsub( "%.", "_" );
            let mut subcaseList:List<stat> = [];

            let classTypeName = "%s_" ( className ~= "" and className.lower() or "lns" );
            defMemberList.insert( `{
               pub let mut ,,,classTypeName:&Ast.TypeInfo;
            } );
            initMemberList.insert( `{
               self.,,,classTypeName = Ast.headTypeInfo;
            });
            classCaseList.insert( `{
               case ,,className ~~{
                  self. ,,,classTypeName = classInfo;
               }
            });
            
            
            forsort _, memberName in symbolMap {
               if memberName ~= "__attrib" {
                  let typeName =
                     "%s_%s" ( className ~= "" and className.lower() or "lns",
                               memberName );
                  let symName = "%s_sym" (typeName);
                  defMemberList.insert( `{
                     pub let mut ,,,typeName:&Ast.TypeInfo;
                     pub let mut ,,,symName:&Ast.SymbolInfo;
                  } );
                  initMemberList.insert( `{
                     self.,,,typeName = Ast.headTypeInfo;
                     self.,,,symName = Ast.dummySymbol;
                  });
                  subcaseList.insert( `{
                     case ,,memberName ~~{
                        builtinFunc. ,,,typeName = typeInfo;
                        builtinFunc. ,,,symName = symInfo;
                        builtinFunc.register( symInfo );
                     }
                  });
               }
            }
            if #subcaseList > 0 {
               declProcessList.insert( `{
                  fn ,,,"process_%s" (className) ~~ () {
                     switch fieldName {
                        ,,subcaseList
                     }
                  }
               });
               caseList.insert( `{
                  case ,,className {
                     ,,,"process_%s" (className) ~~ ();
                  }
               });
            }
         }
      }

      let mut algeCaseList:List<stat> = [];
      foreach algeMap in algesymList {
         foreach _, genAlgeName in algeMap {
            let algeName = genAlgeName.gsub( "<.*", "" ).gsub( "%.", "_" );

            let algeTypeName = "%s_" ( algeName ~= "" and algeName.lower() or "lns" );
            defMemberList.insert( `{
               pub let mut ,,,algeTypeName:&Ast.TypeInfo;
            } );
            initMemberList.insert( `{
               self.,,,algeTypeName = Ast.headTypeInfo;
            });
            algeCaseList.insert( `{
               case ,,algeName ~~{
                  self. ,,,algeTypeName = algeInfo;
               }
            });
         }
      }
   }
   /**
builtin 関数の TypeInfo を保持するクラス。
   */
   pub class BuiltinFuncType {
      ,,defMemberList;

      let mut allSymbol:List<&Ast.SymbolInfo> {pub};
      let mut allClass:List<&Ast.TypeInfo> {pub};

      let mut allFuncTypeSet:Set<&Ast.TypeInfo> {pub};
      let mut allSymbolSet:Set<&Ast.SymbolInfo> {pub};
      let mut needThreadingTypes:Set<&Ast.TypeInfo> {pub};
      let luavalFuncTypeSet:Set<&Ast.TypeInfo>;
      
      pub fn __init() {
         ,,initMemberList;

         self.allSymbol = [];
         self.allClass = [];
         self.allSymbolSet = (@);
         self.allFuncTypeSet = (@);
         self.needThreadingTypes = (@);
         self.luavalFuncTypeSet = (@);
      }

      local fn addLuavalFunc( typeInfo:&Ast.TypeInfo ) mut {
         self.luavalFuncTypeSet.add( typeInfo );
      }
      
      pub fn isLuavalFunc( typeInfo:&Ast.TypeInfo ) __async : bool {
         return self.luavalFuncTypeSet.has( typeInfo );
      }

      local fn register( symbolInfo:&Ast.SymbolInfo ) mut {
         self.allSymbol.insert( symbolInfo );
         self.allSymbolSet.add( symbolInfo );
      }
      local fn registerClass( classInfo:&Ast.TypeInfo ) mut {
         self.allClass.insert( classInfo );
         switch classInfo.$rawTxt {
            ,,classCaseList
         }
      }
      local fn registerAlge( algeInfo:&Ast.TypeInfo ) mut {
         self.allClass.insert( algeInfo );
         switch algeInfo.$rawTxt {
            ,,algeCaseList
         }
      }
   }

   let mut builtinFunc = new BuiltinFuncType();

   pub fn getBuiltinFunc() : &BuiltinFuncType {
      return builtinFunc;
   }

   fn setupBuiltinTypeInfo( name:str, fieldName:str, symInfo:&Ast.SymbolInfo ) {
      let typeInfo = symInfo.$typeInfo;
      
      ,,declProcessList;

      switch name {
         ,,caseList
      }
   }

   fn getBuiltInInfo(): &List<&Map<str,&Map<str,&Map<str,&List<str>>>>> {
      return ,,class2symMapList;
   }
   fn getBuiltinAlgeInfo(): List<Map<str,List<Map<str,List<str>>>>> {
      return ,,algesymList;
   }
}

_DefBuiltinFuncType( [
   {
      "__Er": {
         "__attrib": { "type": [ "interface" ] },
         "get_txt": { "type": [ "method" ], "arg": [ ], "ret": [ "str" ] },
      },
   },
   {
      "": {
         "type": { "arg": [ "&stem!" ], "ret": ["str"] },
         "error": { "arg": [ "str" ], "ret": [ "__" ] },
         "print": { "arg": [ "&..." ], "ret": [] },
         "tonumber": { "arg": [ "str", "int!" ], "ret": ["real!"] },
         "tostring": { "arg": [ "&stem" ], "ret": ["str"] },
         //"load": { "arg": [ "str", "str!", "str!", "stem!" ], "ret": ["form!", "str!"] },
         "loadfile": { "arg": [ "str" ], "ret": ["Luaval<form>!", "str!"] },
         "require": { "arg": [ "str" ], "ret": ["Luaval<stem>"] },
         "collectgarbage": { "arg": [ ], "ret": [] },
         "_fcall": { "arg": [ "form", "&..." ], "ret": [""] },
         "_load": { "arg": [ "str", "stem!" ], "ret": ["Luaval<form>!", "str!"] },
         "_kind": { "arg": [ "stem!" ], "ret":[ "int" ] },
         "expandLuavalMap": { "arg": [ "Luaval<&stem>!" ], "ret":[ "&stem!" ] },
         "__run": { "arg": [ "__Runner", "int", "str!" ], "ret":[ "bool" ] },
         "__join": { "arg": [ "&__Runner" ], "ret":[ "" ] },
         "__serr": { "arg": ["str"], "ret": [ "__Er"] },
      },
   },
   {
      "iStream": {
         "__attrib": { "type": [ "interface" ] },
         "read": { "type": [ "mut" ], "arg": [ "stem!" ], "ret": [ "str!" ] },
         "close": { "type": [ "mut" ], "arg": [], "ret": [] },
      },
   },
   {
      "oStream": {
         "__attrib": { "type": [ "interface" ] },
         "write": { "type": [ "mut" ], "arg": [ "str" ], "ret": [ "stem!", "str!"] },
         "close": { "type": [ "mut" ], "arg": [], "ret": [] },
         "flush": { "type": [ "mut" ], "arg": [], "ret": [] },
      },
   },
   {
      "__pipe<T>": {
         "put": { "type": [ "method" ], "arg": [ "T!" ], "ret": [ ] },
         "get": { "type": [ "method" ], "arg": [], "ret": [ "T!" ] },
      },
   },
   {
      "__lns.runMode" : {
         "__attrib": { "type": [ "class" ] },
         "Sync": { "type": [ "var" ], "typeInfo": ["int"] },
         "Queue": { "type": [ "var" ], "typeInfo": ["int"] },
         "Skip": { "type": [ "var" ], "typeInfo": ["int"] },
      },
   },
   {
      "__lns.runtime" : {
         "log": { "arg": [ "str" ], "ret": [] },
         "enableLog": { "arg": [ "bool" ], "ret": [] },
         "enableDebugLog": { "arg": [ "bool" ], "ret": [] },
         "dumpLog": { "arg": [ "oStream" ], "ret": [] },
      },
   },
   {
      "__lns.capability" : {
         // 非同期処理が可能かどうか。 lua 変換時は false。 go 変換時は true。
         "async": { "type": [ "var" ], "typeInfo": ["bool"] },
      },
   },
   {
      "__lns.Sync.Flag" : {
         "__attrib": { "type": [ "interface" ] },
         "wait": { "type": [ "method" ], "arg": [ ], "ret": [] },
         "set": { "type": [ "mut" ], "arg": [ ], "ret": [] },
      },
   },
   {
      "__lns.Sync" : {
         "__attrib": { "type": [ "class" ] },
         "createFlag": { "arg": [], "ret": [ "__lns.Sync.Flag!"] },
         "createProcesser": { "arg": [ "str" ], "ret": [ "__Processor"] },
         "_createPipe": { "type": ["macro"], "arg": [ "__exp", "int" ], "ret": [ "__pipe!"] },
      },
   },
   {
      "luaStream": {
         "__attrib": { "type": [ "interface" ], "implements": [ "iStream", "oStream" ] },
         "read": { "type": [ "mut" ], "arg": [ "stem!" ], "ret": [ "str!" ] },
         "write": { "type": [ "mut" ], "arg": [ "str" ], "ret": [ "stem!", "str!" ] },
         "close": { "type": [ "mut" ], "arg": [], "ret": [] },
         "flush": { "type": [ "mut" ], "arg": [], "ret": [] },
         "seek": { "type": [ "mut" ], "arg": [ "str", "int"], "ret": [ "int!", "str!" ] },
      },
   },
   {
      "Mapping": {
         "__attrib": { "type": [ "interface" ] },
         "_toMap": { "type": [ "method" ], "arg": [], "ret": [ "&Map<str,&stem>" ] },
      },
   },
   {
      "__Runner": {
         "__attrib": { "type": [ "interface" ] },
         "run": { "type": [ "mut" ], "arg": [], "ret": [ ] },
      },
   },
   {
      "__Processor": {
         "__attrib": { "type": [ "interface" ], "implements": [ "__Runner" ] },
         "end": { "type": [ "mut" ], "arg": [], "ret": [ ] },
      },
   },
   {
      "io": {
         "__attrib": { "type": [ "module" ] },
         "stdin": { "type": [ "var" ], "typeInfo": [ "iStream" ] },
         "stdout": { "type": [ "var" ], "typeInfo": [ "oStream" ] },
         "stderr": { "type": [ "var" ], "typeInfo": [ "oStream" ] },
         "open": { "arg": [ "str", "str!" ], "ret": ["luaStream!", "str!"] },
         "popen": { "arg": [ "str" ], "ret": ["Luaval<luaStream>!"] },
      },
   },
   {
      "package": {
         "__attrib": { "type": [ "module" ] },
         "path": { "type": [ "var" ], "typeInfo": [ "str" ] },
         "searchpath": { "arg": [ "str", "str" ], "ret": ["str!"] },
      },
   },
   {

      "os": {
         "__attrib": { "type": [ "module" ] },
         "clock": { "arg": [], "ret": ["real"] },
         "exit": { "arg": [ "int!" ], "ret": [ "__" ] },
         "remove": {"arg": [ "str" ], "ret": [ "bool!", "str!"] },
         "date": {"arg": [ "str!", "stem!" ], "ret": [ "Luaval<stem>!"] },
         "time": {"arg": [ "stem!" ], "ret": [ "stem!"] },
         "difftime": {"arg": [ "&stem", "&stem" ], "ret": [ "int"] },
         "rename": {"arg": [ "str", "str" ], "ret": [ "stem!", "str!"] },
      },
   },
   {
      "string": {
         "__attrib": { "type": [ "module" ] },
         "find": { "arg": [ "str", "str", "int!", "bool!" ], "ret": ["...<int>"] },
         "byte": { "arg": [ "str", "int!", "int!" ], "ret": ["...<int>"] },
         "format": { "arg": [ "str", "&..." ], "ret": ["str"] },
         "rep": { "arg": [ "str", "int" ], "ret": ["str"] },
         "gmatch": { "arg": [ "str", "str" ], "ret": ["Luaval<form>", "stem!", "stem!"] },
         "gsub": { "arg": [ "str", "str", "str" ], "ret": ["str", "int"] },
         "sub": { "arg": [ "str", "int", "int!" ], "ret": ["str"] },
         "dump": { "arg": [ "&Luaval<form>", "bool!" ], "ret": ["str"] },
         "lower": { "arg": [ "str" ], "ret": ["str"] },
         "upper": { "arg": [ "str" ], "ret": ["str"] },
         "reverse": { "arg": [ "str" ], "ret": ["str"] },
      },
   },
   {
      "str": {
         "__attrib": { "implements": [ "Mapping" ] },
         "find": { "type": [ "method" ], "arg": [ "str", "int!", "bool!" ], "ret": ["...<int>"] },
         "byte": { "type": [ "method" ], "arg": [ "int!","int!" ], "ret": ["...<int!>"] },
         "format": { "type": [ "method" ], "arg": [ "&..." ], "ret": ["str"] },
         "rep": { "type": [ "method" ], "arg": [ "int" ], "ret": ["str"] },
         "gmatch": { "type": [ "method" ], "arg": [ "str" ], "ret": ["Luaval<form>", "stem!", "stem!"] },
         "gsub": { "type": [ "method" ], "arg": [ "str", "str" ], "ret": ["str", "int"] },
         "replace": { "type": [ "method" ], "arg": [ "str", "str" ], "ret": ["str" ] },
         "sub": { "type": [ "method" ], "arg": [ "int", "int!" ], "ret": ["str"] },
         "lower": { "type": [ "method" ], "arg": [ ], "ret": ["str"] },
         "upper": { "type": [ "method" ], "arg": [ ], "ret": ["str"] },
         "reverse": { "type": [ "method" ], "arg": [ ], "ret": ["str"] },
      },
   },
   {
      "List<T>": {
         "__less": { "type": [ "formfunc" ],
                        "arg": [ "T", "T" ], "ret":[ "bool" ] },
         "insert": { "type": [ "mut" ], "arg": [ "T" ], "ret": [""] },
         "remove": { "type": [ "mut" ], "arg": [ "int!" ], "ret": ["T!"] },
         "unpack": { "type": [ "method" ], "arg": [ ], "ret": ["..."] },
         "sort": { "type": [ "mut" ], "arg": [ "__less!" ], "ret": [] },
         //"__new": { "type": [ "method" ], "arg": [ "int" ], "ret": ["List<T>"] },
      },
   },
   {
      "Array<T>": {
         "__less": { "type": [ "formfunc" ],
                        "arg": [ "T", "T" ], "ret":[ "bool" ] },
         "unpack": { "type": [ "method" ], "arg": [ ], "ret": ["..."] },
         "sort": { "type": [ "mut" ], "arg": [ "__less!" ], "ret": [] },
      },
   },
   {
      "Set<T>": {
         "add": { "type": [ "mut" ], "arg": [ "T" ], "ret": [] },
         "del": { "type": [ "mut" ], "arg": [ "T" ], "ret": [] },
         "has": { "type": [ "method" ], "arg": [ "T" ], "ret": [ "bool" ] },
         "and": { "type": [ "mut" ], "arg": [ "&Set<T>" ], "ret": [ "Set<T>" ] },
         "or": { "type": [ "mut" ], "arg": [ "&Set<T>" ], "ret": [ "Set<T>" ] },
         "sub": { "type": [ "mut" ], "arg": [ "&Set<T>" ], "ret": [ "Set<T>" ] },
         "clone": { "type": [ "method" ], "arg": [], "ret": [ "Set<T>" ] },
         "len": { "type": [ "method" ], "arg": [], "ret": [ "int" ] },
      },
   },
   {
      "math": {
         "__attrib": { "type": [ "module" ] },
         "random": { "arg": [ "int!", "int!" ], "ret": ["real"] },
         "randomseed": { "arg": [ "int" ], "ret": [] },
      }
   },
   {
      "debug": {
         "__attrib": { "type": [ "module" ] },
         "getinfo": { "arg": ["int"], "ret": ["Map<str,stem>!"] },
         "getlocal": { "arg": ["int", "int"], "ret": ["str!", "stem!"] },
      },
   },
   {
      "Nilable<_T>": {
         "val": { "type": [ "method" ], "arg": [ ], "ret": [ "_T!" ] },
      }
   }
   // {
   //    "__lns.Err" : {
   //       "__attrib": { "type": [ "class" ] },
   //       "create": { "arg": ["str"], "ret": [ "__Er"] },
   //    },
   // }
],
[
   {
      "__Ret<T1,T2>": [
         { "Ok": [ "T1" ] },
         { "Err": [ "T2" ] }
      ]
   }
]
 );

pub fn BuiltinFuncType.isStrFormFunc( typeInfo:&Ast.TypeInfo ) __async :bool {
   if typeInfo.$srcTypeInfo == self.string_format {
      return true;
   }
   return false;
}

fn Builtin.getTypeInfo( mut typeName:str ) mut : &Ast.TypeInfo {

   switch typeName {
      case "_T" {
         return Ast.builtinTypeBox.$boxingType;
      }
      case "_T!" {
         return Ast.builtinTypeBox.$boxingType.$nilableTypeInfo;
      }
   }

   fn getTypeInfoFromScope(
      scope:&Ast.Scope, symbol:str, genTypeList:List<&Ast.TypeInfo> ) :
   &Ast.TypeInfo!
   {
      fn getTypeInfo( mut workScope:&Ast.Scope ) : &Ast.TypeInfo! {
         let nameList = Util.splitModule( symbol );
         if #nameList <= 1 {
            return workScope.getTypeInfo( symbol, workScope, false, .Normal );
         } else {
            foreach name, index in nameList {
               let workTypeInfo;
               if index == 1 {
                  workTypeInfo = workScope.getTypeInfo(
                     name, workScope, false, .Normal );
               } else {
                  workTypeInfo = workScope.getTypeInfoChild( name );
               }
               when! workTypeInfo {
                  if index == #nameList {
                     return workTypeInfo;
                  }
                  if! workTypeInfo.$scope {
                     workScope = _exp;
                  } else {
                     return nil;
                  }
               } else {
                  return nil;
               };
            }
         }
         return nil;
      }
      let! typeInfo = getTypeInfo( scope ) {
         return nil;
      };
      let mut validGenType = false;
      foreach genType in genTypeList {
         if genType.$kind ~= .Alternate {
            validGenType = true;
            break;
         }
      }
      if validGenType {
         switch typeInfo.$kind {
            case .Map {
               if #genTypeList ~= 2 {
                  Util.err( "illegal map param -- %d" (#genTypeList) ); // バグ
               }
               let keyType = genTypeList[ 1 ];
               let valType = genTypeList[ 2 ];
               return self.processInfo.createMap(
                  .Pub, typeInfo.$parentInfo, keyType, valType, typeInfo.$mutMode );
            }
            case .Ext {
               self.hasLuaval = true;
               if #genTypeList ~= 1 {
                  Util.err( "illegal param -- %d" (#genTypeList) ); // バグ
               }
               match self.processInfo.createLuaval( genTypeList[ 1 ], true ) {
                  case .OK( workType, _ ) {
                     if self.ctrl_info.validLuaval {
                        return workType;
                     }
                     // luaval が無効な場合は、元の型を返す。
                     // self.processInfo.createLuaval() を実行しないと、
                     // builtin 関数の typeId が変ってしまうので、
                     // luaval が無効でもダミーで実行する。
                     return genTypeList[ 1 ];
                  }
                  case .Err( mess ) {
                     Util.err( mess ); // バグ
                  }
               }
            }
            case .DDD {
               if #genTypeList ~= 1 {
                  Util.err( "illegal map param -- %d" (#genTypeList) ); // バグ
               }
               return self.processInfo.createDDD( genTypeList[ 1 ], true, false );
            }
            default {
               Util.err( "not support type -- %s" (typeInfo.getTxt(##)) ); // バグ
            }
         }
      }

      
      return typeInfo;
   }

   let mut mutable = true;
   if typeName.find( "^&" ## ) {
      mutable = false;
      typeName = typeName.gsub( "^&", "" );
   }
   let mut genTypeList:List<&Ast.TypeInfo> = [];
   let _, endIndex = typeName.find( "[%w%.]+<" ## );
   let mut suffix = "";
   when! endIndex {
      let mut genTypeName = typeName.sub( endIndex + 1## );
      while true {
         if! let tailIndex = genTypeName.find( "[,>]" ## ) {
            let genType = self.getTypeInfo( genTypeName.sub( 1, tailIndex - 1 ) );
            genTypeList.insert( genType );
            genTypeName = genTypeName.sub( tailIndex + 1## );
         }
         else {
            suffix = genTypeName.sub( 1## );
            break;
         }
      }
      typeName = typeName.sub( 1, endIndex - 1 ) .. suffix;
   }


   let mut typeInfo:&Ast.TypeInfo = Ast.headTypeInfo;
   if typeName.find( "!$" ## ) {
      let orgTypeName = typeName.gsub( "!$", "" );
      if! getTypeInfoFromScope( self.transUnit.$scope, orgTypeName, genTypeList ) {
         typeInfo = _exp;
      }
      else {
         Util.err( "not found builtin -- %s" (orgTypeName) ); // バグ
      }
      typeInfo = typeInfo.$nilableTypeInfo;
   }
   else {
      if! getTypeInfoFromScope( self.transUnit.$scope, typeName, genTypeList ) {
         typeInfo = _exp;
      }
      else {
         Util.err( "not found builtin -- %s" (typeName) ); // バグ
      }
   }
   if mutable {
      return typeInfo;
   }
   typeInfo = self.modifier.createModifier( typeInfo, .IMut );
   return typeInfo;
}

fn Builtin.processField( name:str, fieldName:str, info:&Map<str,&List<str>>,
                         parentInfo:&Ast.TypeInfo ) mut
{
   self.hasLuaval = false;
   if self.targetLuaVer.isSupport( "%s.%s" (name, fieldName) ) {
      switch info.type$[1] {
         case "var" {
            let symbol = unwrap self.transUnit.$scope.add(
               self.processInfo, .Var, false, true, fieldName, nil,
               self.getTypeInfo( unwrap info.typeInfo$[1] ), .Pub,
               true, .Mut, true, false );
            //builtinFunc.register( symbol );
            setupBuiltinTypeInfo( name, fieldName, symbol );
         }
         default {
            let mut argTypeList: List<&Ast.TypeInfo> = [];
            foreach argType in unwrap info[ "arg" ] {
               argTypeList.insert( self.getTypeInfo( argType ) );
            }

            let mut retTypeList: List<&Ast.TypeInfo> = [];
            foreach retType in unwrap info[ "ret" ] {
               let retTypeInfo = self.getTypeInfo( retType );
               retTypeList.insert( retTypeInfo );
            }

            let funcType = info.type$[1];
            let mutable;

            let staticFlag;
            let kind:Ast.TypeInfoKind;
            let symbolKind:Ast.SymbolKind;
            let abstractFlag:bool;
            let accessMode:Ast.AccessMode;
            switch funcType {
               case "method", "mut" {
                  staticFlag = false;
                  kind = .Method;
                  symbolKind = .Mtd;
                  abstractFlag = false;
                  accessMode = .Pub;
                  mutable = funcType == "mut";
               }
               case "abstract" {
                  staticFlag = false;
                  kind = .Method;
                  symbolKind = .Mtd;
                  abstractFlag = true;
                  accessMode = .Pro;
                  mutable = true;
               }
               case "macro" {
                  staticFlag = true;
                  kind = .Macro;
                  symbolKind = .Mac;
                  abstractFlag = false;
                  accessMode = .Pub;
                  mutable = false;
               }
               case "formfunc" {
                  staticFlag = true;
                  kind = .FormFunc;
                  symbolKind = .Typ;
                  abstractFlag = false;
                  accessMode = .Pub;
                  mutable = false;
               }
               default {
                  staticFlag = true;
                  kind = .Func;
                  symbolKind = .Fun;
                  abstractFlag = false;
                  accessMode = .Pub;
                  mutable = false;
               }
            }
         
            self.transUnit.pushScope( .Other ## );

            let mut scope = self.transUnit.$scope;
            let asyncMode:Ast.Async;
            // if self.hasLuaval {
            //    asyncMode = .Noasync;
            // } else {
            //    asyncMode = .Async;
            // }
            asyncMode = .Async;
            
            let mut typeInfo = self.processInfo.createFuncAsync(
               abstractFlag, true, scope, kind,
               parentInfo, Ast.getBuiltinMut( parentInfo),
               false, true, staticFlag, accessMode,
               fieldName, asyncMode, nil, argTypeList, retTypeList,
               mutable and Ast.MutMode.Mut or Ast.MutMode.IMut );     
            if self.hasLuaval {
               builtinFunc.addLuavalFunc( typeInfo );
            }
            

            self.transUnit.popScope();

            builtinFunc.$allFuncTypeSet.add( typeInfo );

            Ast.addBuiltinMut( typeInfo, scope );
            let symInfo = unwrap self.transUnit.$scope.add(
               self.processInfo, symbolKind, false, kind == .Func,
               fieldName, nil, typeInfo, accessMode, staticFlag,
               mutable and Ast.MutMode.Mut or Ast.MutMode.IMut, true, false );

            setupBuiltinTypeInfo( name, fieldName, symInfo );
         }
      }
   }
}

fn Builtin.registClass(
   nameList:&List<str>, name2FieldInfo:&Map<str,&Map<str,&List<str>>>,
   pos:&Parser.Position, genTypeList:List<&Ast.AlternateTypeInfo> ) mut : &Ast.TypeInfo
{
   let mut classKind = TransUnitIF.DeclClassMode.Class;
   if! let types = name2FieldInfo.__attrib$.type {
      if #types > 0 {
         switch types[ 1 ] {
            case "interface" {
               classKind = .Interface;
            }
            case "module" {
               classKind = .Module;
            }
         }
      }
   }
   let mut interfaceList:List<&Ast.TypeInfo> = [];
   if! name2FieldInfo.__attrib$.implements {
      foreach ifname in _exp {
         let ifType = self.getTypeInfo( ifname );
         interfaceList.insert( ifType );
      }
   }
   fn registerClass(regName:str,index:int, last:bool ) : &Ast.TypeInfo {
      let workClassKind;
      if last {
         workClassKind = classKind;
      } else {
         if index == 1 {
            workClassKind = .Module;
         } else {
            workClassKind = .Class;
         }
      }
      
      let mut classType:&Ast.TypeInfo = Ast.headTypeInfo;
      switch workClassKind {
         case .Class, .Interface {
            let declMode;
            if workClassKind == .Class {
               declMode = TransUnitIF.DeclClassMode.Class;
            } else {
               declMode = .Interface;
            }
            classType = self.transUnit.pushClassLow(
               self.processInfo, pos,
               declMode, declMode ~= .Interface or regName == "Nilable",
               false, nil, interfaceList,
               genTypeList, true, regName, true, .Pub ## );
            builtinFunc.registerClass( classType );
         }
         case .Module {
            classType = self.transUnit.pushModuleLow(
               self.processInfo, true, regName, true );

            self.transUnit.$scope.$outerScope.add(
               self.processInfo, .Typ , false, false, regName, nil,
               classType, .Local, true, Ast.MutMode.Mut, true, false );
         }
      }
      return classType;
   }
   let mut parentInfo = Ast.headTypeInfo;
   foreach name, index in nameList {
      parentInfo = registerClass( name, index, index == #nameList );
   }
   return parentInfo;
}

fn Builtin.createGenType(
   typeName:str, genTypeList:List<&Ast.AlternateTypeInfo>) mut : str
{
   let mut name = typeName;
   if typeName.find( "<" ## ) {
      name = "";
      __luago {
         apply token of typeName.gmatch( "[^<>,%s]+" ) {
            if #name == 0 {
               name = token;
            }
            else {
               genTypeList.insert(
                  (self.processInfo.createAlternate(
                     true, #genTypeList + 1,
                     token, .Pri, Ast.headTypeInfo ## )) );
            }
         }
      }
   }
   return name;
}

fn Builtin.createBuiltinAlge(
   algesymList:List<Map<str,List<Map<str,List<str>>>>> ) __noasync mut
{
   let parentInfo = Ast.headTypeInfo;
   
   foreach algeMap in algesymList {
      foreach valMapList, genAlgeName in algeMap {
         let mut genTypeList:List<&Ast.AlternateTypeInfo> = [];
         let algeName = self.createGenType( genAlgeName, genTypeList );

         let typename2typeInfo:Map<str,&Ast.TypeInfo> = {};
         foreach genType in genTypeList {
            typename2typeInfo[ genType.$rawTxt ] = genType;
         }

         let mut algeScope = new Ast.Scope(
            self.processInfo, self.transUnit.$scope, .Class, nil## );
         let mut algeTypeInfo = self.processInfo.createAlge(
            algeScope, parentInfo, Ast.getBuiltinMut( parentInfo ),
            false, .Pub, algeName, genTypeList );
         Ast.addBuiltinMut( algeTypeInfo, algeScope );
         builtinFunc.registerAlge( algeTypeInfo );

         self.transUnit.$scope.addAlge(
            self.processInfo, .Pub, algeName, nil, algeTypeInfo );

         foreach valMap in valMapList {
            foreach valTypeNameList, valName in valMap {
               let algeValSym = unwrap algeScope.addAlgeVal(
                  self.processInfo, valName, Types.nonePos, algeTypeInfo );
               let valTypeList:List<&Ast.TypeInfo> = [];
               foreach typeName in valTypeNameList {
                  valTypeList.insert(
                     typename2typeInfo[ typeName ] or self.getTypeInfo( typeName ) );
               }
               let algeValInfo = new Ast.AlgeValInfo(
                  algeValSym.$name, valTypeList, algeTypeInfo, algeValSym );
               algeTypeInfo.addValInfo( algeValInfo );
            }
         }
      }
   }
}


let mut readyBuiltin = false;
pub fn Builtin.registBuiltInScope() mut : BuiltinFuncType {
   if readyBuiltin {
      return builtinFunc;
   }
   readyBuiltin = true;

   let builtInInfo = getBuiltInInfo();


   //self.scope = Ast.rootScope;

   let mut builtinModuleName2Scope:Map<str,Ast.Scope> = {};

   let mapType = self.processInfo.createMap(
      .Pub, Ast.headTypeInfo, Ast.builtinTypeString, Ast.builtinTypeStem, .Mut );
   self.transUnit.$scope.addVar(
      self.processInfo, .Global, "_ENV", nil, mapType, .IMutRe, true );
   self.transUnit.$scope.addVar(
      self.processInfo, .Global, "_G", nil, mapType, .IMutRe, true );
   self.transUnit.$scope.addVar(
      self.processInfo, .Global, "__line__", nil, Ast.builtinTypeInt, .IMut, true );

   fn processCopyAlterList( alterList:List<&Ast.AlternateTypeInfo>,
                            typeList:&List<&Ast.TypeInfo> )
   {
      foreach typeInfo in typeList {
         alterList.insert( unwrap typeInfo@@@Ast.AlternateTypeInfo );
      }
   }

   let pos = new Parser.Position( 0, 0, "@builtin@" ## );
   
   foreach builtinClassInfo in builtInInfo {
      foreach name2FieldInfo, className in builtinClassInfo {
         let mut name = className;
         let mut genTypeList:List<&Ast.AlternateTypeInfo> = [];

         switch className {
            case "List<T>" {
               name = "List";
               processCopyAlterList(
                  genTypeList, Ast.builtinTypeList.$itemTypeInfoList );
            }
            case "Array<T>" {
               name = "Array";
               processCopyAlterList(
                  genTypeList, Ast.builtinTypeArray.$itemTypeInfoList );
            }
            case "Set<T>" {
               name = "Set";
               processCopyAlterList(
                  genTypeList, Ast.builtinTypeSet.$itemTypeInfoList );
            }
            case "Map<K,V>" {
               name = "Map";
               processCopyAlterList(
                  genTypeList, Ast.builtinTypeMap.$itemTypeInfoList );
            }
            case "Nilable<_T>" {
               name = "Nilable";
               processCopyAlterList(
                  genTypeList, Ast.builtinTypeBox.$itemTypeInfoList );
            }
            default {
               name = self.createGenType( className, genTypeList );
            }
         }

         let nameList = Util.splitModule( name );
         
         let mut parentInfo:&Ast.TypeInfo = Ast.headTypeInfo;
         if name ~= "" {
            parentInfo = self.registClass( nameList, name2FieldInfo, pos, genTypeList );
         }
         if not builtinModuleName2Scope[ name ]
         {
            if name ~= "" {
               builtinModuleName2Scope[ name ] = self.transUnit.$scope;
            }

            // typeid が一定になるようにソートする
            forsort info, fieldName in name2FieldInfo {
               switch fieldName {
                  case "__attrib" {
                  }
                  default {
                     self.processField(
                        name.gsub( "%.", "_"), fieldName, info, parentInfo );         
                  }
               }
            }
         }
         if name ~= "" {
            foreach _ in nameList {
               self.transUnit.popClass();
            }
         }
      }
   }

   self.createBuiltinAlge( getBuiltinAlgeInfo() );

   // スレッド毎に処理を分ける必要がある builtin 関数を登録する
   let threadSafeSet =
       (@
         builtinFunc.lns_error,
         builtinFunc.lns_print,
         builtinFunc.lns_type,
         builtinFunc.lns_tonumber,
         builtinFunc.io_open,

         // 以下はとりあえず ok とする
         builtinFunc.set_has,
         builtinFunc.set_add
       );
   
   foreach typeInfo in builtinFunc.$allFuncTypeSet {
      if not threadSafeSet.has( typeInfo ) {
         builtinFunc.$needThreadingTypes.add( typeInfo );
      }
   }

   return builtinFunc;
}

pub fn Builtin.getBuiltInFuncType() mut : BuiltinFuncType {
   if readyBuiltin {
      return builtinFunc;
   }
   Util.err( "builtinFunc is not ready" ); // バグ
}
