/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control default_async_all;
_lune_control default_strict_generics;

import lune.base.LuaMod;

pub enum BitOp {
   /** ビット演算子がある */
   HasOp,
   /** ビット演算モジュールがある */
   HasMod,
   /** ビット演算はない */
   Cant,
}

pub enum VerKind {
   v51 = 51,
   v52 = 52,
   v53 = 53,
}

pub class LuaVerInfo {
   let verKind:VerKind {pub};
   let hasBitOp: BitOp {pub};
   let hasTableUnpack: bool {pub};
   let canFormStem2Str: bool {pub};
   let hasSearchPath: bool {pub};
   let loadStrFuncName: str {pub};
   let canUseMetaGc: bool {pub};
   let loadKind: LuaMod.CodeKind;
   let noSupportSymMap: &Set<str>;

   pub fn isSupport( symbol:str ): bool {
      return not self.noSupportSymMap.has( symbol );
   }

   pub fn getLoadCode(): str {
      return LuaMod.getCode( self.loadKind );
   }
}

pub let ver51 = new LuaVerInfo( .v51, .Cant, false, false, false, "loadstring51",
                                false, .LoadStr51,
                                (@ "package.searchpath" ));
pub let ver52 = new LuaVerInfo( .v52, .HasMod, true, true, true, "loadstring52",
                                true, .LoadStr52, (@) );
pub let ver53 = new LuaVerInfo( .v53, .HasOp, true, true, true, "loadstring52",
                                true, .LoadStr52, (@) );
let kind2verMap = {
   VerKind.v51: ver51,
   VerKind.v52: ver52,
   VerKind.v53: ver53
};


let mut curVer:&LuaVerInfo! = nil;
pub fn setCurVer( ver:int ) {
   let! verKind = VerKind._from( ver ) {
      return;
   };
   curVer = unwrap kind2verMap[ verKind ];
}
pub fn getCurVer() : &LuaVerInfo {
   return unwrap curVer;
}
