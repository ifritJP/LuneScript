/*
MIT License

Copyright (c) 2018,2019 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

pub class Result {
   let name:str;
   let mut okNum:int;
   let mut ngNum:int;

   pub fn outputResult(stream:oStream) {
      stream.write(
         "test total: %s %d (OK:%d, NG:%d)\n"
         (self.name, self.$okNum + self.$ngNum, self.$okNum, self.$ngNum ) );
   }

   pub fn err( mess:str, mod:str, lineNo:int ) mut {
      self.ngNum = self.ngNum + 1;
      io.stderr.write( "error: %s:%d: %s\n" ( mod, lineNo, mess ) );
   }
   
   pub fn isTrue( val1:&stem!, val1txt:str, msg:str!, mod:str, lineNo:int ) mut : bool
   {
      if val1 == true {
         self.okNum = self.okNum + 1;
         return true;
      }
      self.err( "not true -- %s:%s:[%s]\n" ( msg or "", val1txt, val1 ), mod, lineNo );
      return false;
   }

   pub fn isNotTrue( val1:&stem!, val1txt:str, msg:str!, mod:str, lineNo:int ) mut : bool
   {
      if not val1 {
         self.okNum = self.okNum + 1;
         return true;
      }
      self.err( "is true -- %s:%s:[%s]\n" ( msg or "", val1txt, val1 ), mod, lineNo );
      return false;
   }

   pub fn isNil( val1:&stem!, val1txt:str, msg:str!, mod:str, lineNo:int ) mut : bool
   {
      if val1 == nil {
         self.okNum = self.okNum + 1;
         return true;
      }
      self.err( "is not nil -- %s:%s:[%s]\n" ( msg or "", val1txt, val1 ), mod, lineNo );
      return false;
   }

   pub fn isNotNil( val1:&stem!, val1txt:str, msg:str!, mod:str, lineNo:int ) mut : bool
   {
      if val1 ~= nil {
         self.okNum = self.okNum + 1;
         return true;
      }
      self.err( "is nil -- %s:%s:[%s]\n" ( msg or "", val1txt, val1 ), mod, lineNo );
      return false;
   }
   
   pub fn checkEq( val1:&stem!, val2:&stem!, val1txt:str, val2txt:str,
                   msg:str!, mod:str, lineNo:int ) mut : bool
   {
      if val1 == val2 {
         self.okNum = self.okNum + 1;
         return true;
      }
      self.err(
         "not equal -- %s:%s:[%s] != %s:[%s]\n"
         ( msg or "", val1txt, val1, val2txt, val2 ), mod, lineNo );
      return false;
   }

   pub fn checkNotEq( val1:&stem!, val2:&stem!, val1txt:str, val2txt:str,
                      msg:str!, mod:str, lineNo:int ) mut : bool
   {
      if val1 ~= val2 {
         self.okNum = self.okNum + 1;
         return true;
      }
      self.err(
         "equal -- %s:%s:[%s] == %s:[%s]\n"
         ( msg or "", val1txt, val1, val2txt, val2 ), mod, lineNo );
      return false;
   }
   
}

pub class Ctrl {
   let mut result:Result {pub};

   // pub fn __init( modName:str, caseName:str ) {
   //    let mut info = unwrap testModuleMap[ modName ];
   //    let mut testcase = unwrap info.$testcaseMap[ caseName ];
   //    self.result = testcase.$result;
   // }

   advertise result;
}


pub form TestcaseFunc( ctrl:Ctrl );
class TestCase {
   let func:TestcaseFunc {pub};
   let mut result:Result {pub};
}

class TestModuleInfo {
   let mut runned:bool {pub};
   let name:str {pub};
   let mut testcaseMap:Map<str,TestCase> {pub};

   pub fn __init( name:str ) {
      self.runned = false;
      self.name = name;
      self.testcaseMap = {};
   }
   
   pub fn addCase( name:str, testCase:TestCase ) mut {
      self.testcaseMap[ name ] = testCase;
   }

   pub fn run() mut {
      self.runned = true;
      print( "module: %s %s" (self.name, string.rep( "=", 30 )) );
      foreach testcase, name in self.testcaseMap {
         print( "%s: %s" (name, string.rep( "-", 15 )) );
         testcase.$func( new Ctrl( testcase.$result) );
      }
   }

   pub fn outputResult( stream:oStream ) {
      if not self.runned {
         return;
      }
      print( "module: %s %s" (self.name, string.rep( "=", 30 )) );
      foreach testcase in self.testcaseMap {
         testcase.$result.outputResult( stream );
      }
   }
}
let mut testModuleMap:Map<str,TestModuleInfo> = {};

pub fn registerTestcase( modName:str, caseName:str, testcase:TestcaseFunc ) {
   let! mut info = testModuleMap[ modName ] {
      info = new TestModuleInfo( modName );
      testModuleMap[ modName ] = info;
   };
   let mut result = new Result(caseName,0,0);
   info.addCase( caseName, new TestCase( testcase, result ) );
}

pub fn run( modPath:str ) {
   foreach info, name in testModuleMap {
      if name == modPath {
         info.run();
      }
   }
}
pub fn runAll() {
   foreach info in testModuleMap {
      info.run();
   }
}

pub fn outputAllResult( stream:oStream ) {
   foreach info in testModuleMap {
      info.outputResult( stream );
   }
}

pub macro _eq( ctrl:sym, val1:__exp, val2:__exp ): bool {
   ,,ctrl.checkEq( ,,val1, ,,val2, ,,,,val1, ,,,,val2, nil, __mod__, __line__ )
}

pub macro _neq( ctrl:sym, val1:__exp, val2:__exp ): bool {
   ,,ctrl.checkNotEq( ,,val1, ,,val2, ,,,,val1, ,,,,val2, nil, __mod__, __line__ )
}

pub macro _isT( ctrl:sym, val:__exp ): bool {
   ,,ctrl.isTrue( ,,val, ,,,,val, nil, __mod__, __line__ )
}

pub macro _isNotT( ctrl:sym, val:__exp ): bool {
   ,,ctrl.isNotTrue( ,,val, ,,,,val, nil, __mod__, __line__ )
}

pub macro _isF( ctrl:sym, val:__exp ): bool {
   ,,ctrl.checkEq( ,,val, false, ,,,,val, "false", nil, __mod__, __line__ )
}

pub macro _isNotF( ctrl:sym, val:__exp ): bool {
   ,,ctrl.checkNotEq( ,,val, false, ,,,,val, "false", nil, __mod__, __line__ )
}

pub macro _isNil( ctrl:sym, val:__exp ): bool {
   ,,ctrl.isNil( ,,val, ,,,,val, nil, __mod__, __line__ )
}

pub macro _isNotNil( ctrl:sym, val:__exp ): bool {
   ,,ctrl.isNotNil( ,,val, ,,,,val, nil, __mod__, __line__ )
}

pub macro _err( ctrl:sym, mes:__exp ) {
   ,,ctrl.err( ,,mes, __mod__, __line__ );
}

pub macro _eqM( ctrl:sym, msg:str, val1:__exp, val2:__exp ): bool {
   ,,ctrl.checkEq( ,,val1, ,,val2, ,,,,val1, ,,,,val2, ,,msg, __mod__, __line__ )
}

pub macro _neqM( ctrl:sym, msg:str, val1:__exp, val2:__exp ): bool {
   ,,ctrl.checkEq( ,,val1, ,,val2, ,,,,val1, ,,,,val2, ,,msg, __mod__, __line__ )
}

pub macro _isTM( ctrl:sym, msg:str, val:__exp ): bool {
   ,,ctrl.isTrue( ,,val, ,,,,val, ,,msg, __mod__, __line__ )
}

pub macro _isNotTM( ctrl:sym, msg:str, val:__exp ): bool {
   ,,ctrl.isNotTrue( ,,val, ,,,,val, ,,msg, __mod__, __line__ )
}

pub macro _isNilM( ctrl:sym, msg:str, val:__exp ): bool {
   ,,ctrl.isNil( ,,val, ,,,,val, ,,msg, __mod__, __line__ )
}

