subfile owner lune.base.TransUnit;

let unsupportStatement =
    (@
      "import",
      "subfile",
      "provide"
    );

class TransUnitRunner extend TransUnit(__Runner) {
   let funcBlockCtl:FuncBlockCtlIF;
   let mut resultMap:&Map<&FuncBlockInfo,FuncBlockResult>;
   let srcTranUnit:&TransUnit;
   let alreadyToSetup:__lns.Sync.Flag!;
   
   pub fn __init(
      srcTranUnit:&TransUnit,
      moduleId:&frontInterface.ModuleId,
      importModuleInfo:&frontInterface.ImportModuleInfo,
      macroEval: &Nodes.MacroEval, enableMultiPhase:bool,
      analyzeModule:str!, mode:AnalyzeMode!,
      pos:&Parser.Position!, targetLuaVer:&LuaVer.LuaVerInfo,
      ctrl_info: &Types.TransCtrlInfo,
      builtinFunc:&Builtin.BuiltinFuncType,
      list:&List<&FuncBlockInfo>,
      managerId:int )
  {
      super( moduleId, importModuleInfo, macroEval, enableMultiPhase,
             analyzeModule, mode, pos, targetLuaVer, ctrl_info, builtinFunc );

     self.funcBlockCtl = new ListFuncBlockCtl( list );
     self.resultMap = {};
     self.nodeManager.set_managerId( managerId );
     self.srcTranUnit = srcTranUnit;
     self.alreadyToSetup = __lns.Sync.createFlag();
  }

  pub fn run() __async mut {
     self.setup( self.srcTranUnit );
     if! self.alreadyToSetup {
        _exp.set();
     }
     
     self.resultMap = self.processFuncBlockInfo(
        self.funcBlockCtl, self.parser.getStreamName() );
  }

  pub fn waitToSetup() {
     if! self.alreadyToSetup {
        _exp.wait();
     }
  }

  pub fn get() mut : &Map<&FuncBlockInfo,FuncBlockResult> {
     __join( self );
     return self.resultMap;
  }

  pro override fn analyzeStatementToken( token:&Parser.Token ) mut : Nodes.Node!
  {
     if unsupportStatement.has( token.txt ) {
        self.errorAt(
           token.pos,
           "unsupport the '%s' statement on the multi phase ast. " (token.txt) ..
           "please declare '_lune_control single_phase_ast'"
        );
     }
     return nil;
  }
 }


pub class TransUnitCtrl extend TransUnit {

   /** マクロを展開する際にマクロを評価する MacroEval のオブジェクト */
   pri let macroEval: &Nodes.MacroEval;
   
//    /** このモジュール内から直接 import しているモジュールのセット */
//    pri let importModuleSet: Set<&Ast.TypeInfo>;
   let mut importCtrl:Import.Import!;
//    /**
// インポートしているモジュール内で定義している alias 情報。

// alias で置き換えている元の Type → alias の型
//    */
//    let importedAliasMap: Map<&Ast.TypeInfo,&Ast.AliasTypeInfo> {pub&};
   pri let importModuleInfo: frontInterface.ImportModuleInfo;


   let mut stdinFile:&Types.StdinFile!;
   // let mut baseDir:str!;
   let funcBlockInfoList:List<FuncBlockInfo>;
   let mut totalFuncBlockTokenNum:int;


   /** subfile 名のリスト */
   let subfileList: List<str>;
   /** provide ノード */
   let mut provideNode: Nodes.ProvideNode!;
   

   pub fn __init( moduleId:&frontInterface.ModuleId,
                  importModuleInfo:&frontInterface.ImportModuleInfo,
                  macroEval: &Nodes.MacroEval, enableMultiPhase:bool,
                  analyzeModule:str!, mode:AnalyzeMode!,
                  pos:&Parser.Position!, targetLuaVer:&LuaVer.LuaVerInfo,
                  ctrl_info: &Types.TransCtrlInfo,
                  builtinFunc:&Builtin.BuiltinFuncType )
   {
      super( moduleId, importModuleInfo, macroEval, enableMultiPhase,
             analyzeModule, mode, pos, targetLuaVer, ctrl_info, builtinFunc );

      self.totalFuncBlockTokenNum = 0;
      self.macroEval = macroEval;

      // self.importedAliasMap = {};
      // self.importModuleSet = (@);
      self.importModuleInfo = importModuleInfo.clone();
      self.importCtrl = nil;

      self.stdinFile = nil;
      self.subfileList = [];
      self.provideNode = nil;
      // self.baseDir = nil;


      self.funcBlockInfoList = [];
   }

   fn analyzeTestCase( firstToken:&Parser.Token ) mut : Nodes.TestCaseNode;
}

pro override fn TransUnitCtrl.analyzeLuneControlToken(
   firstToken:&Parser.Token, controlToken:&Parser.Token ) mut : LuneControl.Pragma!
{
   let pragma:LuneControl.Pragma!;
   switch controlToken.txt {
      case "disable_mut_control" {
         self.validMutControl = false;
         self.modifier.set_validMutControl( false );
         pragma = LuneControl.Pragma.disable_mut_control;
      }
      case "ignore_symbol_" {
         self.ignoreToCheckSymbol_ = true;
         pragma = LuneControl.Pragma.ignore_symbol_;
      }
      case "limit_conv_code" {
         let mut codeSet:Set<LuneControl.Code> = (@);
         while true {
            let token = self.getToken(##);
            if token.txt == ";" {
               self.pushback();
               break;
            }
            if! let code = LuneControl.Code._from( token.txt ) {
               codeSet.add( code );
            }
            else {
               self.addErrMess( token.pos, "illegal code -- '%s'" (token.txt ) );
            }
         }
         pragma = LuneControl.Pragma.limit_conv_code( codeSet );
      }
      case "use_async" {
         pragma = LuneControl.Pragma.use_async;
      }
      case "default_async_func" {
         pragma = LuneControl.Pragma.default_async_func;
         self.defaultAsyncMode = .AsyncFunc;
      }
      case "default_async_all" {
         pragma = LuneControl.Pragma.default_async_all;
         self.defaultAsyncMode = .AsyncAll;
      }
      case "use_macro_special_var" {
         pragma = LuneControl.Pragma.use_macro_special_var;
         self.analyzePhase = .Main;
      }
      case "single_phase_ast" {
         pragma = LuneControl.Pragma.single_phase_ast;
         self.analyzePhase = .Main;
      }
      default {
         pragma = nil;
      }
   }
   return pragma;
}


fn TransUnitCtrl.analyzeImportFor(
   pos: &Parser.Position, modulePath:str, assignName:str,
   assigned:bool, lazyLoad:Nodes.LazyLoad ) mut : Nodes.ImportNode
{
   let mut backupScope = self.$scope;
   // スコープをルートに変更
   //self.scope = self.topScope;
   self.setScope( self.topScope, .FromScope );

   let macroMode;
   let nearCode:str!;
   if self.macroCtrl.$analyzeInfo.$mode ~= .None {
      macroMode = self.macroCtrl.$analyzeInfo.$mode.$_txt;
      nearCode = self.parser.getNearCode();
   } else {
      macroMode = "";
      nearCode = nil;
   }

   let! mut importObj = self.importCtrl {
      importObj = new Import.Import(
         self.getLatestPos(),
         self.importModuleInfo,
         self.moduleType,
         self.macroCtrl,
         self.typeNameCtrl,
         self.importedAliasMap,
         self.baseDir,
         self.validMutControl );
      self.importCtrl = importObj;
   };

   let moduleLoaderParam = new Import.ModuleLoaderParam(
      self.ctrl_info,
      self.processInfo,
      self.getLatestPos(),
      macroMode,
      nearCode,
      self.validMutControl,
      self.macroEval );
   let mut moduleLoader = importObj.processImport(
      modulePath, moduleLoaderParam );
   
   let exportInfo;
   __asyncLock {
      let work, err = importObj.loadModuleInfo( moduleLoader );
      when! work {
         exportInfo = work;
      } else {
         self.error( err );
      }
   }

   foreach symbol in exportInfo.$globalSymbolList {
      self.globalScope.addSymbolInfo( self.processInfo, symbol );
   }

   
   // スコープを元に戻す
   //self.scope = backupScope;
   self.setScope( backupScope, .FromScope );


   // モジュールの末尾のシンボルでスコープに登録する。
   // 例えば hoge.foo.bar をインポートした場合、 bar をスコープに登録する

   let provideInfo = exportInfo.$provideInfo;
   let moduleTypeInfo = provideInfo.$typeInfo;
   self.$scope.addModule( moduleTypeInfo, exportInfo.assign( assignName ) );

   let moduleSymbolKind = provideInfo.$symbolKind;
   let mut moduleSymbolInfo:&Ast.SymbolInfo!, shadowing = self.$scope.add(
      self.processInfo, moduleSymbolKind, false, false, assignName, pos,
      moduleTypeInfo, .Local, true,
      provideInfo.$mutable and Ast.MutMode.Mut or Ast.MutMode.IMut,
      true, lazyLoad ~= .Off );

   when! shadowing {
      let err = shadowing.$typeInfo ~= moduleTypeInfo;
      self.errorShadowingOp( pos, shadowing, err );
      if err {
         self.error( "failed to import -- %s" (modulePath) );
      }
      moduleSymbolInfo = shadowing;
   }
  
   when! moduleSymbolInfo {
      let info = new Nodes.ImportInfo( pos, modulePath, lazyLoad, assignName,
                                       assigned, moduleSymbolInfo, moduleTypeInfo );
      return Nodes.ImportNode.create(
         self.nodeManager, pos, self.inTestBlock,
         self.macroCtrl.isInAnalyzeArgMode(), [ moduleTypeInfo ], info );
   }
   self.error( "failed to import -- %s" (modulePath) );
}


fn TransUnitCtrl.analyzeImport( opeToken: &Parser.Token ) mut : Nodes.ImportNode {
   let lazyLoad:Nodes.LazyLoad;
   if self.getToken(##).txt == "." {
      let modeToken = self.getToken(##);
      switch modeToken.txt {
         case "l" {
            lazyLoad = .On;
         }
         case "d" {
            lazyLoad = .Off;
         }
         default {
            lazyLoad = .Off;
            self.error( "illegal import mode -- %s" (modeToken.txt) );
         }
      }
   } else {
      self.pushback();
      if self.ctrl_info.defaultLazy {
         lazyLoad = .Auto;
      } else {
         lazyLoad = .Off;
      }
   }
   if lazyLoad ~= .Off {
      self.helperInfo.useLazyLoad = true;
   }
   

   let mut moduleToken = self.getToken(##);
   let mut modulePath = moduleToken.txt;
   let mut nextToken:&Parser.Token = moduleToken;

   while true {
      nextToken = self.getToken(##);
      switch nextToken.txt {
         case ".", "/", ":" {
            let demilit = nextToken.txt;
            nextToken = self.getToken(##);
            moduleToken = nextToken;
            modulePath = "%s%s%s" ( modulePath, demilit, moduleToken.txt );
         }
         default {
            break;
         }
      }
   }
   let mut assignName = moduleToken;
   let assigned;
   if nextToken.txt == "as" {
      assignName = self.getSymbolToken( .MustNot_ );
      nextToken = self.getToken(##);
      assigned = true;
   } else {
      assigned = false;
   }
   self.checkToken( nextToken, ";" );

   let mut node;

   __asyncLock {
      node = self.analyzeImportFor(
         opeToken.pos, modulePath, assignName.txt, assigned, lazyLoad );
   }
   self.importModuleSet.add( node.$expType );
   
   return node;
}

fn TransUnitCtrl.analyzeTestCase( firstToken:&Parser.Token ) mut : Nodes.TestCaseNode
{
   let mut newScope = self.pushScope( .Other ## );

   let importNode;

   __asyncLock {
      importNode = self.analyzeImportFor(
         firstToken.pos, "lune.base.Testing", "__t", false, .Off );
   }
   
   let nameToken = self.getSymbolToken( .MustNot_ );

   self.checkNextToken( "(" );

   let ctrlToken = self.getSymbolToken( .MustNot_ );
   let ctrlName = ctrlToken.txt;
   self.checkNextToken( ")" );

   let moduleType = importNode.$expType;
   let! ctrlType = moduleType.$scope$.getTypeInfoChild$( "Ctrl" ) {
      self.error( "not found Testing.Ctrl class" );
   };
   self.addLocalVar(
      ctrlToken.pos, true, false, ctrlToken.txt, ctrlType, .IMut, false );

   self.scopeAccess = .Full;

   self.inTestBlock = true;
   let block;
   if self.ctrl_info.testing {
      block = self.analyzeBlock( .Test, .Ignore, newScope, nil );
   } else {
      // テスト無効な場合、高速化のためテストケースを解析しない。
      block = self.skipAndCreateDummyBlock();
   }
   self.inTestBlock = false;
   

   self.scopeAccess = .Normal;

   self.popScope();
   
   return Nodes.TestCaseNode.create(
      self.nodeManager, firstToken.pos, self.inTestBlock,
      self.macroCtrl.isInAnalyzeArgMode(),
      [ Ast.builtinTypeNone ], nameToken, importNode, ctrlName, block );
}

fn TransUnitCtrl.analyzeTest( firstToken:&Parser.Token ) mut : Nodes.Node
{
   let nextToken = self.getToken( ## );
   if nextToken.txt ~= "{" {
      self.pushback();
      return self.analyzeTestCase( firstToken );
   }
   self.checkToken( nextToken, "{" );

   self.inTestBlock = true;
   
   let mut stmtList:List<&Nodes.Node> = [];
   self.analyzeStatementList( stmtList, false, "}" );
   self.checkNextToken( "}" );

   self.inTestBlock = false;
   

   return Nodes.TestBlockNode.create(
      self.nodeManager, firstToken.pos, self.inTestBlock,
      self.macroCtrl.isInAnalyzeArgMode(),
      [ Ast.builtinTypeNone ], stmtList );
}


pro override fn TransUnitCtrl.analyzeDeclToken(
   accessMode: Ast.AccessMode, mut staticFlag: bool,
   firstToken: &Parser.Token, mut token: &Parser.Token ) mut : Nodes.Node!
{
   if token.txt == "__test" {
      return self.analyzeTest( firstToken );
   }
   return nil;
}


fn TransUnitCtrl.analyzeSubfile( token: &Parser.Token ) __noasync mut : Nodes.SubfileNode
{
   if self.$scope ~= self.moduleScope {
      self.error( "'module' must be top scope." );
   }


   let mode = self.getToken(##);

   let mut moduleName = "";
   while true {
      let nextToken = self.getToken(##);
      if nextToken.txt == ";" {
         break;
      }
      if moduleName == "" {
         moduleName = nextToken.txt;
      }
      else {
         moduleName = "%s%s" (moduleName, nextToken.txt);
      }
   }
   let mut usePath:str! = nil;
   if moduleName == "" {
      self.addErrMess( token.pos, "illegal subfile" );
   }
   else {
      if mode.txt == "use" {
         usePath = moduleName;
         if frontInterface.searchModule( moduleName, self.baseDir, nil ) {
            self.subfileList.insert( moduleName );
         }
         else {
            self.addErrMess(
               token.pos, "not found subfile -- %s" ( moduleName ) );
         }
      }
      elseif mode.txt == "owner" {
         if frontInterface.getLuaModulePath(
            self.moduleName, self.baseDir ) ~= moduleName
         {
            self.addErrMess(
               token.pos,
               "illegal owner module -- %s, %s"
               ( moduleName, self.moduleName ) );
         }
      }
      else {
         self.addErrMess( mode.pos, "illegal module mode -- %s" ( mode.txt ) );
      }
   }
   return Nodes.SubfileNode.create(
      self.nodeManager, token.pos, self.inTestBlock,
      self.macroCtrl.isInAnalyzeArgMode(),
      [ Ast.builtinTypeNone ], usePath );
}

fn TransUnitCtrl.analyzeProvide( firstToken: &Parser.Token ) mut : Nodes.ProvideNode {
   let token = self.getSymbolToken( .MustNot_ );
   let symbolNode = self.analyzeExpSymbol(
      firstToken, token, .Symbol, nil, true, false );
   self.checkNextToken( ";" );

   let symbolInfoList = symbolNode.getSymbolInfo();
   if #symbolInfoList ~= 1 {
      self.error( "'provide' must be symbol." );
   }
   let symbolInfo = symbolInfoList[ 1 ];


   let mut node = Nodes.ProvideNode.create(
      self.nodeManager, firstToken.pos, self.inTestBlock,
      self.macroCtrl.isInAnalyzeArgMode(), [ Ast.builtinTypeNone ], symbolInfo );
   if self.provideNode {
      self.addErrMess( firstToken.pos, "multiple provide" );
   }
   self.provideNode = node;


   if symbolInfo.$accessMode ~= .Pub {
      self.addErrMess( firstToken.pos,
                       "provide variable must be 'pub'.  -- %s"
                       (symbolInfo.$accessMode));
   }

   return node;
}

pro override fn TransUnitCtrl.analyzeStatementToken( token:&Parser.Token ) mut : Nodes.Node!
{
   let statement:Nodes.Node!;
   if token.txt == "import"  {
      statement = self.analyzeImport( token );
   } elseif token.txt == "subfile" {
      __asyncLock {
         statement = self.analyzeSubfile( token );
      }
   } elseif token.txt == "provide" {
      statement = self.analyzeProvide( token );
   } else {
      statement = nil;
   }   
   return statement;
}

local override fn TransUnitCtrl.addFuncBlockInfoList( funcBlockInfo:FuncBlockInfo ) mut
{
   self.totalFuncBlockTokenNum = self.totalFuncBlockTokenNum + #funcBlockInfo.$tokenList;
   self.funcBlockInfoList.insert( funcBlockInfo );
}

fn TransUnitCtrl.processFuncBlock(streamName:str) mut {
   let runnerList:List<TransUnitRunner> = [];
   let mut resultMap:Map<&FuncBlockInfo,FuncBlockResult> = {};

   if #self.funcBlockInfoList < 20 or self.totalFuncBlockTokenNum < 2000 {
      __lns.runtime.log(
         "disable processing async AST. %d, %d"
         (#self.funcBlockInfoList, self.totalFuncBlockTokenNum) );
   } else {
      let divCount = self.ctrl_info.threadPerUnitThread;
      if divCount > 0 {
         self.analyzePhase = .Runner;
         
         let maxTokenCount = ( self.totalFuncBlockTokenNum + divCount - 1 ) / divCount;
         let mut offset = 1;
         let len = #self.funcBlockInfoList;

         for managerId = 1, divCount {
            let list:List<&FuncBlockInfo> = [];
            let mut tokenCount = 0;
            while offset <= len {
               let funcBlockInfo = self.funcBlockInfoList[ offset ];
               offset = offset + 1;
               list.insert( funcBlockInfo );
               tokenCount = tokenCount + #funcBlockInfo.$tokenList;
               if tokenCount >= maxTokenCount {
                  break;
               }
            }

            let mut runner = new TransUnitRunner(
               self,
               self.moduleId,
               self.importModuleInfo,
               self.macroEval, false,
               self.moduleName, .Compile, nil,
               self.targetLuaVer,
               self.ctrl_info,
               self.builtinFunc,
               list, managerId );

            if __run( runner, __lns.runMode.Skip, "astMain -- %s" (streamName) ) {
               runnerList.insert( runner );
            } else {
               break;
            }
         }
      }
   }
   if #runnerList == 0 {
      // この場合、非同期処理が一つもないので、
      // self.funcBlockInfoList 全体を処理して resultMap に設定。

      self.analyzePhase = .Main;
      
      resultMap = self.processFuncBlockInfo(
         new ListFuncBlockCtl( self.funcBlockInfoList ),
         self.parser.getStreamName() );
   } else {
      foreach runner in runnerList {
         runner.waitToSetup();
      }
      // runner の setup が終るのを待ってからマージしないと、
      // runner の setup とマージが競合する。
      foreach runner in runnerList {
         let workMap = runner.get();
         self.mergeFrom( runner, resultMap );
         foreach result, key in workMap {
            resultMap[ key ] = result;
         }
      }
      __lns.runtime.log( "merged AST." );
   }
   
   foreach funcBlockInfo in self.funcBlockInfoList {
      let mut result = unwrap resultMap[ funcBlockInfo ];
      let mut declFuncInfo = funcBlockInfo.$declFuncInfo;
      declFuncInfo.set_body( result.$body );
      declFuncInfo.set_has__func__Symbol( result.$has_func_sym );
   }
}

pub fn TransUnitCtrl.createAST(
   parserSrc: &Types.ParserSrc, asyncParse:bool,
   baseDir:str!, stdinFile:&Types.StdinFile!, macroFlag: bool,
   moduleName: str!, readyExportInfo:ReadyExportInfo! ) mut : AstInfo.ASTInfo
{
   let mut parser = Parser.createParserFrom( parserSrc, asyncParse, stdinFile );

   let streamName = parser.getStreamName();

   self.stdinFile = stdinFile;
   self.baseDir = baseDir;
   
   Log._log2( .Log, "%s start -- %s on %s, %s, %s"
              (__func__, parser.getStreamName(), baseDir,
                macroFlag, self.analyzePhase.$_txt ) );

   self.moduleName = unwrap moduleName default "";

   when! moduleName {
      // 自分自身をインポートしないように、self.importModuleInfo に登録する。
      if self.importModuleInfo.len() == 0 and not self.importModuleInfo.add( moduleName )
      {
         self.error( "already imported -- %s" (moduleName) );
      }
   }
   
   let mut moduleTypeInfo:&Ast.TypeInfo = Ast.headTypeInfo;

   __asyncLock {
      when! moduleName {
         apply txt of string.gmatch(
            frontInterface.getLuaModulePath( moduleName, baseDir ), '[^%.]+' )
         {
            moduleTypeInfo = self.pushModule(
               self.processInfo, false, txt, true ).$typeInfo;
         }
      }
   }
   // // moduleScope の変数は、アクセス有無の確認をしない。
   // self.scope.set_validCheckingUnaccess( false );
   self.moduleScope = self.$scope;
   
   self.$scope.addVar(
      self.processInfo, 
      .Global, "__mod__", nil, Ast.builtinTypeString, .IMut, true );
   
   self.moduleType = moduleTypeInfo;

   self.typeNameCtrl = new Ast.TypeNameCtrl( moduleTypeInfo );


   self.setParser( new Parser.DefaultPushbackParser( parser ) );

   self.$scope.addIgnoredVar( self.processInfo );

   
   let ast:Nodes.Node;
   let exportInfo:Nodes.ExportInfo;

   fn createExportInfo(
      moduleSymboInfo:&Ast.SymbolInfo!, globalSymbolList:List<&Ast.SymbolInfo>,
      processInfo:&Ast.ProcessInfo, ) __trans : Nodes.ExportInfo
   {
      let provideInfo:frontInterface.ModuleProvideInfo;
      when! moduleSymboInfo {
         provideInfo = new frontInterface.ModuleProvideInfo(
            moduleSymboInfo.$typeInfo, moduleSymboInfo.$kind, moduleSymboInfo.$mutable );
      } else {
         provideInfo = new frontInterface.ModuleProvideInfo( moduleTypeInfo, .Typ, false );
      }

      //let processInfo = self.processInfo.duplicate();
      let importedAliasMap:Map<&Ast.TypeInfo,&Ast.AliasTypeInfo> = {};
      foreach node in self.nodeManager.getAliasNodeList() {
         importedAliasMap[ node.$typeInfo ] = node.$expType@@@Ast.AliasTypeInfo;
      }

      let mut workExportInfo = new Nodes.ExportInfo(
         moduleTypeInfo, provideInfo, processInfo, globalSymbolList,
         importedAliasMap, self.moduleId, self.moduleName,
         moduleTypeInfo.$rawTxt, streamName, {},
         self.macroCtrl.$declMacroInfoMap );;
      __lns.runtime.log( "ready meta -- %d, %d"
                         (#self.funcBlockInfoList, self.totalFuncBlockTokenNum ) );
      Log._log2( .Log, "ready meta -- %s, %d, %s, %s"
                 ( streamName, self.parser.getUsedTokenListLen(),
                   moduleTypeInfo, moduleTypeInfo.$scope ) );
      
      when! readyExportInfo {
         readyExportInfo( workExportInfo );
      }
      
      return workExportInfo;
   }
   
   
   let mut lastStatement:&Nodes.Node! = nil;
   if macroFlag {
      ast = self.analyzeBlock( .Macro, .Ignore ##);
      exportInfo = createExportInfo( nil, [], self.processInfo );
   }
   else {
      let mut children:List<&Nodes.Node> = [];
      let lastLineNo;
      lastStatement, lastLineNo = self.analyzeStatementList( children, false ## );

      let mut statement = Nodes.BlankLineNode.create(
         self.nodeManager, self.createPosition( lastLineNo + 1, 0 ),
         self.inTestBlock,
         self.macroCtrl.isInAnalyzeArgMode(), [ Ast.builtinTypeNone ], 0 );
      statement.addComment( self.commentCtrl.$commentList );
      self.commentCtrl.clear();
      children.insert( statement );
      

      let mut token = self.getTokenNoErr(##);
      if token ~= Parser.getEofToken() {
         self.error( "%s:%d:%d:(%s) not eof -- %s"
                     ( self.parser.getStreamName(),
                       token.pos.lineNo, token.pos.column,
                       token.kind.$_txt, token.txt ) );
      }

      foreach subModule in self.subfileList {
         let file;
         __asyncLock {
            if! frontInterface.searchModule( subModule, self.baseDir, nil ) {
               file = _exp;
            } else {
               self.error( "not found subfile -- %s" ( subModule ) );
            }
         }

         if self.$scope ~= self.moduleScope {
            self.error( "scope does not close" );
         }

         let mut subParser = Parser.StreamParser.create(
            Types.ParserSrc.LnsPath( file, subModule, nil ), true, self.stdinFile, nil );

         self.setParser( new Parser.DefaultPushbackParser( subParser ) );

         lastStatement = self.analyzeStatementListSubfile( children );

         token = self.getTokenNoErr(##);
         if token ~= Parser.getEofToken() {
            Util.err( "unknown:%d:%d:(%s) %s"
                      ( token.pos.lineNo, token.pos.column,
                        token.kind.$_txt, token.txt ) );
         }
      }

      let globalSymbolList:List<&Ast.SymbolInfo> = [];
      foreach node in children {
         if! let workNode = node@@@Nodes.DeclVarNode {
            foreach symbolInfo in workNode.$symbolInfoList {
               if symbolInfo.$accessMode == .Global {
                  globalSymbolList.insert( symbolInfo );
               }
            }
         }
         if! let workNode = node@@@Nodes.DeclFuncNode {
            if workNode.$declInfo.$accessMode == .Global {
               if! let symbolInfo = workNode.$declInfo.$symbol {
                  globalSymbolList.insert( symbolInfo );
               }
            }
         }
      }
      let moduleSymboInfo:&Ast.SymbolInfo!;
      if! self.provideNode {
         if lastStatement ~= _exp {
            self.addErrMess( _exp.$pos, "'provide' must be last." );
         }
         moduleSymboInfo = _exp.$symbol;
      } else {
         moduleSymboInfo = nil;
      }
      exportInfo = createExportInfo(
         moduleSymboInfo, globalSymbolList, self.processInfo.duplicate() );
      

      self.processFuncBlock( streamName );
     

      self.checkOverriededMethodOfAllClass();


      let mut rootNode = Nodes.RootNode.create(
         self.nodeManager, self.createPosition( 0, 0 ), self.inTestBlock,
         self.macroCtrl.isInAnalyzeArgMode(), [ Ast.builtinTypeNone ],
         children, self.moduleScope, self.globalScope,
         self.macroCtrl.$useModuleMacroSet,
         self.moduleId, self.processInfo, moduleTypeInfo, self.provideNode,
         self.helperInfo, self.nodeManager,
         unwrap self.importCtrl$.$importModule2ExportInfo default {},
         self.macroCtrl.$typeId2MacroInfo, self.typeId2ClassMap );
      ast = rootNode;

      ClosureFun.checkList( self.closureFunList );
   }

   when! moduleName {
      foreach _ in Util.splitStr( moduleName, '[^%.]+' ) {
         self.popModule();
      }
   }

   fn createId2proto(
      map:Map<&Ast.TypeInfo,TransUnitIF.NSInfo> ) : &Map<int,&TransUnitIF.NSInfo>
   {
      let mut id2proto:Map<int,&TransUnitIF.NSInfo> = {};
      foreach nsInfo, protoType in map {
         id2proto[ protoType.$typeId.id ] = nsInfo;
      }
      return id2proto;
   }
   
   forsort nsInfo in createId2proto( self.nsInfoMap ) {
      if nsInfo.$nobody {
         let protoType = nsInfo.$typeInfo;
         let mess;
         switch protoType.$kind {
            case .Class, .IF {
               mess = "This class doesn't have body. -- %s" ( protoType.getTxt(##) );
            }
            default {
               mess = "This function doesn't have body. -- %s" ( protoType.getTxt(##) );
            }
         }
         self.addErrMess(
            unwrap self.nsInfoMap[ protoType ]$.$pos, mess );
      }
   }

   foreach mess in TransUnitIF.sortMess( self.warnMessList ) {
      Util.errorLog( mess.$mess );
   }
   if #self.errMessList > 0 {
      foreach mess in TransUnitIF.sortMess( self.errMessList ) {
         Util.errorLog( mess.$mess );
      }
      Util.err( "has error" );
   }
   if self.ctrl_info.stopByWarning and #self.warnMessList > 0 {
      Util.err( "has error" );
   }

   switch self.analyzeMode {
      case .Diag, .Complete, .Inquire {
         os.exit( 0 );
      }
   }
   
   return new AstInfo.ASTInfo(
      ast, exportInfo, parser.getStreamName(), self.builtinFunc );
}
