/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.Util;
import lune.base.Ast;
import lune.base.LuneControl;

_lune_control ignore_symbol_;
_lune_control default_async_all;


/**
モジュールの識別情報を管理する。
*/
pub class ModuleId {
   /** ビルドした時の lns ファイルの最終更新日時 */
   let modTime:real {pub};
   /**
meta ファイルの内容が何回変ったか。
対象の lns ファイル自体に修正がなくても、import しているモジュールが変った結果、
meta ファイルの内容が変った場合はこのカウンタをインクリメントする。
逆に lns ファイル自体に修正があっても、
meta ファイルの内容が変らない場合はこのカウンタをインクリメントしない。
   */
   let buildCount:int {pub};
   let idStr:str {pub};
   pub static let tempId:ModuleId;

   pub fn __init( modTime:real, buildCount:int ) {
      self.modTime = modTime;
      self.buildCount = buildCount;
      self.idStr = "%f:%d" (modTime, buildCount );
   }

   pub fn getNextModuleId(): ModuleId {
      return new ModuleId( self.modTime, self.buildCount + 1 );
   }
   __init {
      ModuleId.tempId = new ModuleId( 0.0, 0 );
   }
}
pub static fn ModuleId.createId( modTime:real, buildCount:int ):ModuleId {
   return new ModuleId( modTime, buildCount );
}
pub static fn ModuleId.createIdFromTxt( idStr:str ):ModuleId {
   let modTime = unwrap tonumber( ( idStr.gsub( ":.*", "" ) ) ## ) default 0.0;
   let buildCount = unwrap tonumber( ( idStr.gsub( ".*:", "" ) ) ## ) default 0.0;
   return new ModuleId( modTime, buildCount@@int );
}

pub class ModuleProvideInfo {
   let typeInfo:&Ast.TypeInfo {pub};
   let symbolKind:&Ast.SymbolKind {pub};
   let mutable:bool {pub};
}

pub class LuneHelperInfo {
   pub let mut useNilAccess:bool;
   pub let mut useUnwrapExp:bool;
   pub let mut hasMappingClassDef:bool;
   pub let mut useLoad:bool;
   pub let mut useUnpack:bool;
   pub let mut useAlge:bool;
   pub let mut useSet:bool;
   pub let mut callAnonymous:bool;
   pub let mut pragmaSet:Set<LuneControl.Pragma>;
   pub let mut useLazyLoad:bool;
   pub let mut useLazyRequire:bool;

   pub fn __init() {
      self.useNilAccess = false;
      self.useUnwrapExp = false;
      self.hasMappingClassDef = false;
      self.useLoad = false;
      self.useUnpack = false;
      self.useAlge = false;
      self.useSet = false;
      self.callAnonymous = false;
      self.pragmaSet = (@);
      self.useLazyLoad = false;
      self.useLazyRequire = false;
   }
}

pub fn getRootDependModId() : int {
   return -1;
}

pub class ExportInfo {
   pri let moduleTypeInfo: &Ast.TypeInfo { pub };
   pri let provideInfo:&ModuleProvideInfo { pub };
   pri let processInfo: Ast.ProcessInfo { pub };
   pri let globalSymbolList:&List<&Ast.SymbolInfo> {pub};
}

pub class ModuleInfo extend (Ast.ModuleInfoIF) {
   pri let fullName:str{ pub };
   /**
import した TypeInfo の中で、
import 元の typeId ではなく、内部の typeId で生成された TypeInfo のマップ。
key: TypeInfo
val: import 元の TypeId
   */
   pri let localTypeInfo2importIdMap:&Map<&Ast.TypeInfo,int> { pub };
   /** import 元の typeId → 生成されている TypeInfo */
   pri let mut importId2localTypeInfoMap:Map<int,&Ast.TypeInfo> { pub& };
   pri let assignName:str{ pub };
   pri let moduleId:&ModuleId {pub};
   /**
import 元のモジュール内で定義されている alias。
alias で置き換えている元の Type → alias の型。
   */
   pri let importedAliasMap: &Map<&Ast.TypeInfo,&Ast.AliasTypeInfo> {pub};

   pri let exportInfo:ExportInfo {pub};

   pub fn __init( fullName:str, assignName:str, idMap:&Map<&Ast.TypeInfo,int>,
                  moduleId:&ModuleId, exportInfo:ExportInfo,
                  importedAliasMap: &Map<&Ast.TypeInfo,&Ast.AliasTypeInfo> )
   {
      self.exportInfo = exportInfo;
      self.moduleId = moduleId;
      self.fullName = fullName;
      self.assignName = assignName;
      self.localTypeInfo2importIdMap = idMap;
      self.importId2localTypeInfoMap = {};
      foreach importId, typeInfo in idMap {
         self.importId2localTypeInfoMap[ importId ] = typeInfo;
      }
      self.importedAliasMap = importedAliasMap;
   }

   /** インポートした typeInfo を定義しているモジュール内の typeId を返す。 */
   pub fn getImportTypeId( typeInfo:&Ast.TypeInfo ) : int! {
      if! let typeId = self.localTypeInfo2importIdMap[ typeInfo ] {
         return typeId;
      }
      // // if typeInfo.$processInfo == self.processInfo {
      // //    return typeInfo.$typeId.id;
      // // }
      return nil;
   }

   pub fn getTypeInfo( localTypeId:int ) : &Ast.TypeInfo! {
      if! let typeInfo = self.importId2localTypeInfoMap[ localTypeId ] {
         return typeInfo;
      }
      //return self.processInfo.getTypeInfo( localTypeId );
      return nil;
   }

   pub fn get_modulePath(): str {
      return self.fullName;
   }

   pub fn assign( assignName: str ) mut : ModuleInfo {
      return new ModuleInfo(
         self.fullName, assignName, self.localTypeInfo2importIdMap,
         self.moduleId, self.exportInfo, self.importedAliasMap );
   }
}

pub class ModuleMeta {
   let metaInfo:Luaval<&stem> {pub};
   let lnsPath:str {pub};
   // let processInfo:Ast.ProcessInfo! {pub};
   let mut moduleInfo:ModuleInfo! {pub,pub};
}

/**
インポートしたモジュールを管理する。
*/
pub class ImportModuleInfo {
   let mut orderedSet:Util.OrderedSet<str>;

   pub fn __init() {
      self.orderedSet = new Util.OrderedSet<str>();
   }

   pub fn add( modulePath:str ) mut : bool {
      return self.orderedSet.add( modulePath );
   }

   pub fn remove() mut {
      self.orderedSet.removeLast();
   }

   pub fn getFull() :str {
      let mut txt = "";
      foreach modulePath in self.orderedSet.$list {
         txt = "%s -> %s" ( txt, modulePath );
      }
      return txt;
   }
}

pub interface frontInterface {
   /**
指定の LuneScript のモジュールをロードする。

このメソッドは、 トランスコンパイルと実行を同時に行なうケースで、
Lua からも利用される。

@param mod モジュール (foo.bar)
@return stem! ロードしたモジュール。 失敗した場合 nil
@return &stem ロードしたモジュールのメタ情報。
   */
   pub fn loadModule( mod:str ) __noasync mut: Luaval<&stem>!, ModuleMeta;

   /**
指定の LuneScript のモジュールからメタ情報をロードする。

@param importModuleInfo ロード時のインポートモジュールを管理する。
@param mod モジュール (foo.bar)
@return &stem ロードしたモジュールのメタ情報。
   */
   pub fn loadMeta(
      importModuleInfo:ImportModuleInfo, mod:str ) __noasync mut: ModuleMeta!;
   /**
LuneScript のコード文字列からロードする。

@param importModuleInfo ロード時のインポートモジュールを管理する。
@param ロード名
@param txt LuneScript のコード文字列
@return stem ロードしたモジュール。
   */
   pub fn loadFromLnsTxt(
      importModuleInfo:ImportModuleInfo, name:str, txt:str ) __noasync mut : Luaval<&stem>;

   /**
go/github:com.ifritJP. 等の go 用のパスを、
そのモジュールのプロジェクトを起点としたモジュールパスに変換する。

詳しくは、GoMod.lns を参照。
   */
   pub fn getLuaModulePath( mod:str ) __noasync mut : str;
   pub fn searchModule( mod:str ) __noasync mut: str!;
   pub fn error( message:str ) __noasync;
}

class dummyFront extend (frontInterface) {
   pub fn loadModule( mod:str ) __noasync mut: Luaval<&stem>!, ModuleMeta {
      // error( "not implements" );
      let loaded = _load( "return {}" ## );
      let emptyTable;
      when! loaded {
         emptyTable = unwrap loaded(##);
      } else {
         error( "load error" );
      }
      let mut meta = new ModuleMeta( emptyTable, mod.gsub( "%.", "/" ) .. ".lns", nil );
      return require( mod ), meta;
   }
   pub fn loadMeta( importModuleInfo:ImportModuleInfo, mod:str ) __noasync mut : ModuleMeta! {
      error( "not implements" );
   }
   pub fn loadFromLnsTxt(
      importModuleInfo:ImportModuleInfo, name:str, txt:str ) __noasync mut : Luaval<&stem>
   {
      error( "not implements" );
   }
   pub fn getLuaModulePath( mod:str ) __noasync mut : str {
      error( "not implements" );
   }
   pub fn searchModule( mod:str ) __noasync mut: str! {
      error( "not implements" );
   }
   pub fn error( message:str ) __noasync {
      error( "not implements" );
   }
}

global let mut __luneScript:frontInterface = new dummyFront();

pub fn setFront( newFront:frontInterface ) __noasync {
   __luneScript = newFront;
}

pub fn loadModule( mod:str )  __noasync : Luaval<&stem>!, ModuleMeta {
   return __luneScript.loadModule( mod )**;
}

pub fn loadFromLnsTxt(
   importModuleInfo:ImportModuleInfo, name:str, txt:str )  __noasync : Luaval<&stem>
{
   return __luneScript.loadFromLnsTxt( importModuleInfo, name, txt );
}

pub fn loadMeta( importModuleInfo:ImportModuleInfo, mod:str ) __noasync : ModuleMeta! {
   return __luneScript.loadMeta( importModuleInfo, mod );
}

pub fn searchModule( mod:str ) __noasync: str! {
   return __luneScript.searchModule( mod );
}

pub fn getLuaModulePath( mod:str ) __noasync: str {
   return __luneScript.getLuaModulePath( mod );
}
