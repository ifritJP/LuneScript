/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

pub interface frontInterface {
   pub fn loadModule( mod:str ): stem, stem;
   pub fn loadMeta( mod:str ): stem;
   pub fn loadFromLnsTxt( name:str, txt:str, onlyMeta:bool ): stem, stem;
   pub fn searchModule( mod:str ): str!;
   pub fn error( message:str );
}

class dummyFront extend (frontInterface) {
   pub fn loadModule( mod:str ): stem, stem {
      error( "not implements" );
   }
   pub fn loadMeta( mod:str ): stem {
      error( "not implements" );
   }
   pub fn loadFromLnsTxt( name:str, txt:str, onlyMeta:bool ): stem, stem {
      error( "not implements" );
   }
   pub fn searchModule( mod:str ): str! {
      error( "not implements" );
   }
   pub fn error( message:str ) {
      error( "not implements" );
   }
}

global let mut __luneScript:frontInterface = new dummyFront();

pub fn setFront( newFront:frontInterface ) {
   __luneScript = newFront;
}

pub fn loadModule( mod:str ): stem, stem {
   return __luneScript.loadModule( mod );
}

pub fn loadFromLnsTxt( name:str, txt:str, onlyMeta:bool ): stem, stem {
   return __luneScript.loadFromLnsTxt( name, txt, onlyMeta );
}

pub fn loadMeta( mod:str ): stem {
   return __luneScript.loadMeta( mod );
}

pub fn searchModule( mod:str ): str! {
   return __luneScript.searchModule( mod );
}

pub fn error( message:str ) {
   __luneScript.error( message );
}
