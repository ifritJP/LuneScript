/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.Util;

pub class ModuleId {
   let idStr:str {pub};
   pub static let tempId:ModuleId;

   _lune_control default__init;
   
   __init {
      ModuleId.tempId = new ModuleId( "0:0" );
   }
}
pub static fn ModuleId.createId( modTime:real, buildCount:int ):ModuleId {
   return new ModuleId( "%g:%d" (modTime, buildCount ) );
}



/**
インポートしたモジュールを管理する。
*/
pub class ImportModuleInfo {
   let mut moduleSet:Map<str,bool>;
   let mut moduleList:List<str>;

   pub fn __init() {
      self.moduleSet = {};
      self.moduleList = [];
   }

   pub fn add( modulePath:str ) mut : bool {
      if self.moduleSet[ modulePath ] {
         return false;
      }
      self.moduleSet[ modulePath ] = true;
      self.moduleList.insert( modulePath );
      return true;
   }

   pub fn remove() mut {
      if #self.moduleList == 0 {
         Util.err( "self.moduleList is 0" );
      }
      self.moduleSet[ self.moduleList[ #self.moduleList ] ] = nil;
      self.moduleList.remove();
   }

   pub fn getFull() :str {
      let mut txt = "";
      foreach modulePath in self.moduleList {
         txt = "%s -> %s" ( txt, modulePath );
      }
      return txt;
   }
}

pub interface frontInterface {
   /**
指定の LuneScript のモジュールをロードする。

このメソッドは、 トランスコンパイルと実行を同時に行なうケースで、
Lua からも利用される。

@param mod モジュール (foo.bar)
@return stem! ロードしたモジュール。 失敗した場合 nil
@return &stem ロードしたモジュールのメタ情報。
   */
   pub fn loadModule( mod:str ): stem!, &stem;

   /**
指定の LuneScript のモジュールからメタ情報をロードする。

@param importModuleInfo ロード時のインポートモジュールを管理する。
@param mod モジュール (foo.bar)
@return &stem ロードしたモジュールのメタ情報。
   */
   pub fn loadMeta( importModuleInfo:ImportModuleInfo, mod:str ): &stem;
   /**
LuneScript のコード文字列からロードする。

@param importModuleInfo ロード時のインポートモジュールを管理する。
@param ロード名
@param txt LuneScript のコード文字列
@return &stem ロードしたモジュールのメタ情報。
@return stem ロードしたモジュール。
   */
   pub fn loadFromLnsTxt( importModuleInfo:ImportModuleInfo,
                          name:str, txt:str ): &stem, stem;
   pub fn searchModule( mod:str ): str!;
   pub fn error( message:str );
}

class dummyFront extend (frontInterface) {
   pub fn loadModule( mod:str ): stem!, &stem {
      // error( "not implements" );
      return require( mod ), {};
   }
   pub fn loadMeta( importModuleInfo:ImportModuleInfo, mod:str ): &stem {
      error( "not implements" );
   }
   pub fn loadFromLnsTxt( importModuleInfo:ImportModuleInfo,
                          name:str, txt:str ): &stem, stem {
      error( "not implements" );
   }
   pub fn searchModule( mod:str ): str! {
      error( "not implements" );
   }
   pub fn error( message:str ) {
      error( "not implements" );
   }
}

global let mut __luneScript:frontInterface = new dummyFront();

pub fn setFront( newFront:frontInterface ) {
   __luneScript = newFront;
}

pub fn loadModule( mod:str ): stem!, &stem {
   return __luneScript.loadModule( mod );
}

pub fn loadFromLnsTxt( importModuleInfo:ImportModuleInfo,
                       name:str, txt:str ): &stem, stem {
   return __luneScript.loadFromLnsTxt( importModuleInfo, name, txt );
}

pub fn loadMeta( importModuleInfo:ImportModuleInfo, mod:str ): &stem {
   return __luneScript.loadMeta( importModuleInfo, mod );
}

pub fn searchModule( mod:str ): str! {
   return __luneScript.searchModule( mod );
}

pub fn error( message:str ) {
   __luneScript.error( message );
}
