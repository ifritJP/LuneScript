/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.Util;

let mut luaKeywordSet:Set<str> = (@);
luaKeywordSet.add( "if" );
luaKeywordSet.add( "else" );
luaKeywordSet.add( "elseif" );
luaKeywordSet.add( "while" );
luaKeywordSet.add( "for" );
luaKeywordSet.add( "in" );
luaKeywordSet.add( "return" );
luaKeywordSet.add( "break" );
luaKeywordSet.add( "nil" );
luaKeywordSet.add( "true" );
luaKeywordSet.add( "false" );
luaKeywordSet.add( "{" );
luaKeywordSet.add( "}" );
luaKeywordSet.add( "do" );
luaKeywordSet.add( "require" );
luaKeywordSet.add( "function" );
luaKeywordSet.add( "then" );
luaKeywordSet.add( "end" );
luaKeywordSet.add( "repeat" );
luaKeywordSet.add( "until" );
luaKeywordSet.add( "goto" );
luaKeywordSet.add( "local" );

pub fn isLuaKeyword( txt:str ) : bool {
   return luaKeywordSet.has( txt );
}


fn createReserveInfo( luaMode: bool! ) :
   Set<str>, Set<str>, Set<str>, Map<str,str[@]>
{
   let mut keywordSet:Set<str> = (@);
   let mut typeSet:Set<str> = (@);
   let mut builtInSet:Set<str> = (@);

   builtInSet.add( "require" );
   foreach key in luaKeywordSet {
      if not builtInSet.has( key ) {
         keywordSet.add( key );
      }
   }


   if not luaMode {
      keywordSet.add( "null" );
      keywordSet.add( "let" );
      keywordSet.add( "mut" );
      keywordSet.add( "pub" );
      keywordSet.add( "pro" );
      keywordSet.add( "pri" );
      keywordSet.add( "fn" );
      keywordSet.add( "each" );
      keywordSet.add( "form" );
      keywordSet.add( "class" );
      builtInSet.add( "super" );
      keywordSet.add( "static" );
      keywordSet.add( "advertise" );
      keywordSet.add( "import" );
      keywordSet.add( "new" );
      keywordSet.add( "!" );
      keywordSet.add( "unwrap" );
      keywordSet.add( "sync" );

      typeSet.add( "int" );
      typeSet.add( "real" );
      typeSet.add( "stem" );
      typeSet.add( "str" );
      typeSet.add( "Map" );
      typeSet.add( "bool" );
   }

   // 2文字以上の演算子
   let mut multiCharDelimitMap: Map<str,str[@]> = {};
   multiCharDelimitMap[ "=" ] = [@ "==" ];
   multiCharDelimitMap[ "<" ] = [@ "<=" ];
   multiCharDelimitMap[ ">" ] = [@ ">=" ];

   if not luaMode {
      multiCharDelimitMap[ "|" ] = [@ "|<", "|>"];
      multiCharDelimitMap[ "|<" ] = [@ "|<<"];
      multiCharDelimitMap[ "|>" ] = [@ "|>>"];
      multiCharDelimitMap[ "[" ] = [@ "[@" ];
      multiCharDelimitMap[ "(" ] = [@ "(@" ];
      multiCharDelimitMap[ "~" ] = [@ "~=", "~~" ];
      multiCharDelimitMap[ "$" ] = [@ "$[", "$.", "$(" ];
      multiCharDelimitMap[ "$." ] = [@ "$.$" ];
      multiCharDelimitMap[ "." ] = [@ "..", ".$" ];
      multiCharDelimitMap[ ".." ] = [@ "..." ];
      multiCharDelimitMap[ "," ] = [@ ",," ];
      multiCharDelimitMap[ ",," ] = [@ ",,," ];
      multiCharDelimitMap[ ",,," ] = [@ ",,,," ];
      multiCharDelimitMap[ "@" ] = [@ "@@" ];
      multiCharDelimitMap[ "@@" ] = [@ "@@@", "@@=" ];
      multiCharDelimitMap[ "#" ] = [@ "##" ];
      multiCharDelimitMap[ "*" ] = [@ "**" ];
   }
   else {
      multiCharDelimitMap[ "." ] = [@ ".." ];
      multiCharDelimitMap[ "~" ] = [@ "~=" ];
   }

   return keywordSet, typeSet, builtInSet, multiCharDelimitMap;
}

// pub class Stream {
//    pub fn read( mode:str ): str!;
//    //pub fn read( mode:str ): str;
// }

pub class TxtStream extend (iStream) {
   pri let txt: str {pub};
   pri let mut start: int;
   pri let mut eof: bool;
   pub fn __init( txt: str ) {
      self.txt = txt;
      self.start = 1;
      self.eof = false;
   }

   pub fn get_pos():int {
      return self.start;
   }
   pub fn read( mode:stem! ) mut : str! {
      //pub override fn read( mode:str ): str{
      if self.eof {
         return nil;
      }
      let index = self.txt.find( "\n", self.start, true );
      if! index {
         let txt = self.txt.sub( self.start, _exp - 1 );
         self.start = _exp + 1;
         return txt;
      }
      self.eof = true;
      return self.txt.sub( self.start## );
   }
   pub fn close() mut {
   }
   pub fn getHead() : str {
      return self.txt.sub( 1, self.start );
   }
   pub fn getTail() : str {
      return self.txt.sub( self.start ## );
   }
}



pub class Position {
   pub let lineNo: int;
   pub let column: int;
}

pub enum TokenKind {
   Cmnt,
   Str,
   Int,
   Real,
   Char,
   Symb,
   Dlmt,
   Kywd,
   Ope,
   Type,
   Eof,
}

pub class Token {
   pub let kind: TokenKind;
   pub let txt: str;
   pub let pos: &Position;
   /** 直前のトークンと連続しているトークンかどうか。 true の場合連続。 */
   pub let consecutive: bool;
   pri let allmut commentList: &List<&Token> { pub& };

   pub fn __init( kind: TokenKind, txt: str, pos: &Position,
                  consecutive:bool, commentList: Token[]! )
   {
      self.kind = kind;
      self.txt = txt;
      self.pos = pos;
      self.consecutive = consecutive;
      self.commentList = unwrap commentList default [];
   }

   pub fn getExcludedDelimitTxt() : str {
      if self.kind ~= .Str {
         return self.txt;
      }
      switch self.txt[1] {
         case ?\', ?\" {
            return self.txt.sub( 2, #self.txt - 1 );
         }
         case ?` {
            return self.txt.sub( 1 + 3, #self.txt - 3 );
         }
      }
      error( "illegal delimit -- %s" (self.txt) );
   }

   pub fn set_commentList( commentList: &List<&Token> ) {
      self.commentList = commentList;
   }

   pub fn getLineCount():int {
      let mut count = 1;
      apply _ of self.txt.gmatch( "\n" ) {
         count = count + 1;
      }
      return count;
   }
}

pub abstract class Parser {
   pub abstract fn getToken() mut : &Token!;
   pub abstract fn getStreamName(): str;
}

pub interface PushbackParser {
   pub fn getTokenNoErr() mut : &Token;
   pub fn pushback() mut;
   pub fn pushbackToken( token: &Token ) mut;
   pub fn pushbackStr( name:str, statement: str ) mut;
   pub fn newPushback( tokenList: List<&Token> ) mut;
   pub fn getStreamName(): str;
   pub fn error( message:str ) mut :__;
}

pub class WrapParser extend Parser {
   let mut parser: Parser;
   let name: str;
   pub override fn getToken() mut : &Token! {
      let mut token = self.parser.getToken();
      return token;
   }
   pub override fn getStreamName(): str {
      return self.name;
   }
}

pub let noneToken = new Token( .Eof, "", new Position( 0, -1 ), false, [] );

/**
', ", ``` の区切り記号で囲まれた文字列から、区切り記号を取り除いた文字列を返す。

\', \" のクオートを解決した文字列を返す。
*/
pub fn convFromRawToStr( txt:str ) : str {
   if #txt == 0 {
      return txt;
   }
   switch txt[1] {
      case ?\', ?\" {
      }
      default {
         return txt.sub( 4, #txt - 3 );
      }
   }
   let findChar = txt[1];
   let mut workTxt = txt;
   let mut retTxt = "";
   let mut workIndex = 2;
   let mut setIndex = 2;
   let workPattern = "[\"'\\]";
   while true {
      let! endIndex = string.find( workTxt, workPattern, workIndex ## ) {
         // 文字列の区切り文字がない場合はエラー
         Util.err( "error: illegal string -- %s" ( workTxt ) );
      };
      let workChar = workTxt[ endIndex ];
      if workChar == findChar {
         // 対になる区切り文字だった場合は文字列として登録
         return retTxt .. workTxt.sub( setIndex, endIndex - 1 );
      } elseif workChar == ?\\ {
         let mut quote = workTxt[ endIndex + 1 ];
         switch quote {
            case ?\', ?\" {
               retTxt = "%s%s%c" (retTxt, workTxt.sub( setIndex, endIndex - 1 ), quote );
            }
            default {
               retTxt = "%s%s" (retTxt, workTxt.sub( setIndex, endIndex + 1 ) );
            }
         }
         workIndex = endIndex + 2;
         setIndex = workIndex;
      }
      else {
         workIndex = endIndex + 1;
      }
   }
}

pub class StreamParser extend Parser {
   /** stdin に紐付けている*/
   static let mut stdinStreamModuleName: str!;
   static let mut stdinTxt: str;

   __init {
      StreamParser.stdinStreamModuleName = nil;
      StreamParser.stdinTxt = "";
   }
   pub static fn setStdinStream( moduleName:str ){
      StreamParser.stdinStreamModuleName = moduleName;
      StreamParser.stdinTxt = unwrap io.stdin.read( '*a' ) default "";
   }

   let mut eof: bool;
   let mut stream : iStream;
   let streamName: str;
   let mut lineNo : int;
   let mut prevToken: &Token;
   let mut pos : int;
   let mut lineTokenList : List<&Token>;
   let keywordSet : Set<str>;
   let typeSet : Set<str>;
   let builtInSet :Set<str>;
   let multiCharDelimitMap : Map<str,str[@]>;
   pub fn __init( stream: iStream, name: str, luaMode: bool! ) {
      super();
      self.eof = false;
      self.stream = stream;
      self.streamName = name;
      self.lineNo = 0;
      self.pos = 1;
      self.lineTokenList = [];
      self.prevToken = noneToken;

      let keywordSet, typeSet, builtInSet, multiCharDelimitMap =
         createReserveInfo( luaMode );

      self.keywordSet = keywordSet;
      self.typeSet = typeSet;
      self.builtInSet = builtInSet;
      self.multiCharDelimitMap = multiCharDelimitMap;
   }

   pub override fn getStreamName(): str {
      return self.streamName;
   }

   pub static fn create( path: str, luaMode: bool, moduleName:str ): StreamParser! {
      let mut stream = new TxtStream( StreamParser.stdinTxt );
      if StreamParser.stdinStreamModuleName ~= moduleName {
         unwrap! stream = io.open( path, "r" ) {
            return nil;
         };
      }

      return new StreamParser(
         stream, path, luaMode or string.find( path, "%.lua$" ## ) and true );
   }

   pub override fn getToken() mut : &Token!;
}

pub class DefaultPushbackParser extend (PushbackParser) {
   let mut parser:Parser;
   let mut pushbackedList:List<&Token>;
   let mut usedTokenList:List<&Token>;
   let mut currentToken:&Token {pub};

   pub fn __init( parser:Parser ) {
      self.parser = parser;
      self.pushbackedList = [];
      self.usedTokenList = [];
      self.currentToken = noneToken;
   }
   
   pub fn getTokenNoErr() mut : &Token {
      if #self.pushbackedList > 0 {
         self.currentToken = self.pushbackedList[ #self.pushbackedList ];
         self.pushbackedList.remove(##);
      }
      else {
         if! let token = self.parser.getToken() {
            self.currentToken = token;
         }
         else {
            self.currentToken = noneToken;
         };
      }
      if self.currentToken.kind ~= .Eof {
         self.usedTokenList.insert( self.currentToken );
      }
      return self.currentToken;
   }
   pub fn pushbackToken( token: &Token ) mut
   {
      if token.kind ~= .Eof {
         self.pushbackedList.insert( token );
      }
      if token == self.currentToken {
         if #self.usedTokenList > 0 {
            let used = self.usedTokenList[ #self.usedTokenList ];
            if used == token { 
               self.usedTokenList.remove(##);
            }
            if #self.usedTokenList > 0 {
               self.currentToken = self.usedTokenList[ #self.usedTokenList ];
            }
            else {
               self.currentToken = noneToken;
            }
         }
         else {
            self.currentToken = noneToken;
         }
      }
   }
   pub fn pushback() mut {
      self.pushbackToken( self.currentToken );
   }
   pub fn pushbackStr( name:str, statement: str ) mut {
      let mut memStream = new TxtStream( statement );
      let mut parser = new StreamParser( memStream, name, false );

      let mut list:List<&Token> = [];
      while true {
         if! parser.getToken() {
            list.insert( _exp );
         }
         else {
            break;
         }
      }
      for index = #list, 1, -1  {
         self.pushbackToken( list[ index ] );
      }
   }
   pub fn newPushback( tokenList: List<&Token> ) mut {
      for index = #tokenList, 1, -1  {
         self.pushbackToken( tokenList[ index ] );
      }
   }
   pub fn error( message:str ) mut :__
   {
      Util.err( message );
   }

   pub fn getLastPos() : &Position {
      let mut pos:&Position = new Position( 0, 0 );
      if self.$currentToken.$kind ~= .Eof {
         pos = self.$currentToken.pos;
      }
      else {
         if #self.$usedTokenList > 0 {
            let token = self.$usedTokenList[ #self.$usedTokenList ];
            pos = token.pos;
         }
      }
      return pos;
      // Util.err( "%s:%d:%d: error:(%s) %s"
      //           ( self.getStreamName(),
      //             pospos.lineNo, pos.column, txt, mess ) );
   }
   pub fn getNearCode():str {
      let mut code = "";
      for index = #self.usedTokenList - 30, #self.usedTokenList {
         if index > 1 {
            let token = self.usedTokenList[ index ];
            if token.consecutive {
               code = "%s%s" ( code, self.usedTokenList[ index ].txt );
            }
            else {
               code = "%s %s" ( code, self.usedTokenList[ index ].txt );
            }
         }
      }
      return "%s -- current '%s'" (code, self.currentToken.txt );
   }
   pub fn getStreamName(): str {
      return self.parser.getStreamName();
   }
}

let mut quotedCharSet:Set<str> = (@);
quotedCharSet.add( 'a' );
quotedCharSet.add( 'b' );
quotedCharSet.add( 'f' );
quotedCharSet.add( 'n' );
quotedCharSet.add( 'r' );
quotedCharSet.add( 't' );
quotedCharSet.add( 'v' );
quotedCharSet.add( '\\' );
quotedCharSet.add( '"' );
quotedCharSet.add( "'" );


let mut op2Set:Set<str> = (@);
op2Set.add( '+' );
op2Set.add( '-' );
op2Set.add( '*' );
op2Set.add( '/' );
op2Set.add( '^' );
op2Set.add( '%' );
op2Set.add( '&' );
op2Set.add( '~' );
op2Set.add( '|' );
op2Set.add( '|>>' );
op2Set.add( '|<<' );
op2Set.add( '..' );
op2Set.add( '<' );
op2Set.add( '<=' );
op2Set.add( '>' );
op2Set.add( '>=' );
op2Set.add( '==' );
op2Set.add( '~=' );
op2Set.add( 'and' );
op2Set.add( 'or' );
op2Set.add( '@' );
op2Set.add( '@@' );
op2Set.add( '@@@' );
op2Set.add( '=' );

let mut op1Set:Set<str> = (@);
op1Set.add( '-' );
op1Set.add( 'not' );
op1Set.add( '#' );
op1Set.add( '~' );
op1Set.add( '*' );
op1Set.add( '`' );
op1Set.add( ',,' );
op1Set.add( ',,,' );
op1Set.add( ',,,,' );


// pub static fn getKindTxt( kind: int ) : str {
//    return unwrap kind2Txt[ kind ];
// }

pub static fn isOp2( ope: str ) : bool {
   return op2Set.has( ope );
}

pub static fn isOp1( ope: str ) : bool {
   return op1Set.has( ope );
}

fn StreamParser.parse() mut : Token[]! {
   fn readLine() : str! {
      if self.eof {
         return nil;
      }
      self.lineNo = self.lineNo + 1;
      let line = self.stream.read( '*l' );
      if not line {
         self.eof = true;
      }
      return line;
   }
   let! mut rawLine = readLine() { return nil; };

   let mut list: Token[] = [];
   let mut startIndex = 1;

   /*
    複数行コメントの処理。

    @param comIndex 現在の解析行内の複数行コメント開始位置
    @param termStr 複数行コメントの終端文字列
    */
   fn multiComment( comIndex: int, termStr: str ): str, int {
      let mut searchIndex = comIndex;
      let mut comment = "";
      while true {
         if! let _, termEndIndex = string.find(
            rawLine, termStr, searchIndex, true )
         {
            comment = comment .. rawLine.sub( searchIndex, termEndIndex );
            return comment, termEndIndex + 1;
         }
         comment = comment .. rawLine.sub( searchIndex ## ) .. "\n";
         searchIndex = 1;
         rawLine = unwrap readLine();
      }
   };

   /*
ソースをコメント、文字列、その他(ステートメント候補)に
カテゴライズした結果を登録する。

この関数内でステートメント候補の文字列をトークン毎に分割して登録する。

@param kind カテゴライズの種類。 その他は .Symb を指定する。
@param val カテゴライズした文字列
@param column 現在の解析行内の位置
    */

   fn addVal( kind: TokenKind, val: str, column: int ) {
      fn createInfo( mut tokenKind: TokenKind, token: str, tokenColumn: int ): Token {
         if tokenKind == .Symb {
            if self.keywordSet.has( token ) {
               tokenKind = .Kywd;
            }
            elseif self.typeSet.has( token ) {
               tokenKind = .Type;
            }
            elseif op2Set.has( token ) or op1Set.has( token ) {
               tokenKind = .Ope;
            }
         }
         let mut consecutive = false;
         if self.prevToken.pos.lineNo == self.lineNo and
            self.prevToken.pos.column + #self.prevToken.txt == tokenColumn
         {
            consecutive = true;
         }
         let mut newToken = new Token(
            tokenKind, token, new Position( self.lineNo, tokenColumn ), consecutive, [] );
         self.prevToken = newToken;
         return newToken;
      }

      /*
        token の startIndex から始まる数値表現領域を特定する

        @param token 文字列
        @param startIndex token 内の検索開始位置。 この位置から数値表現が始まる。
        @return int 数値表現の終了位置
        @return bool 整数かどうか
        */
      fn analyzeNumber( token: &str, beginIndex: int ) : int, bool {
         let! mut nonNumIndex = token.find( '[^%d]', beginIndex ## ) {
            return #token, true;
         };
         let mut intFlag = true;
         let mut nonNumChar = token[nonNumIndex];
         if nonNumChar == ?. { // .
            intFlag = false;
            unwrap! nonNumIndex = token.find( '[^%d]', nonNumIndex + 1 ## ) {
               return #token, intFlag;
            };
            //nonNumChar = token[nonNumIndex## );
            nonNumChar = token[ nonNumIndex ];
         }
         if nonNumChar == ?X or nonNumChar == ?x { // X or x
            unwrap! nonNumIndex = token.find( '[^%da-fA-F]', nonNumIndex + 1 ## ) {
               return #token, intFlag;
            };
            nonNumChar = token[nonNumIndex];
         }
         if nonNumChar == ?E or nonNumChar == ?e { // E or e
            intFlag = false;
            let nextChar = token[nonNumIndex + 1 ];
            if nextChar == ?- or nextChar == ?+ { // '-' or '+'
               unwrap! nonNumIndex = token.find( '[^%d]', nonNumIndex + 2 ## ) {
                  return #token, intFlag;
               };
            }
            else {
               unwrap! nonNumIndex = token.find( '[^%d]', nonNumIndex + 1 ## ) {
                  return #token, intFlag;
               };
            }
         }
         return nonNumIndex - 1, intFlag;
      }

      if kind == .Symb {
         let mut searchIndex = 1;
         while true {
            // 空白系以外の何らかの文字領域を探す
            let! tokenIndex, tokenEndIndex = string.find( val, "[%p%w]+", searchIndex ## )
            {
               break;
            };
            let columnIndex = column + tokenIndex - 2;
            searchIndex = tokenEndIndex + 1;
            let token:str = val.sub( tokenIndex, tokenEndIndex );
            let mut subIndex = 1;
            while true {
               if token.find( '^[%d]', subIndex ## ) or
                  token.find( '^-[%d]', subIndex ## )
               {
                  // 数値の場合
                  let mut checkIndex = subIndex;
                  if token[checkIndex] == ?- {
                     checkIndex = checkIndex + 1;
                  }
                  let endIndex, intFlag = analyzeNumber( token, checkIndex );
                  let mut info = createInfo(
                     intFlag and TokenKind.Int or TokenKind.Real,
                     token.sub( subIndex, endIndex ), columnIndex + subIndex );
                  list.insert( info );
                  subIndex = endIndex + 1;
               }
               else {
                  // 区切り文字を探す
                  if! string.find( token, '[^%w_]', subIndex ## ) {
                     let index = _exp;
                     if index > subIndex {
                        let mut info = createInfo(
                           .Symb, token.sub( subIndex, index - 1 ),
                           columnIndex + subIndex );
                        list.insert( info );
                     }
                     let mut delimit = token.sub( index, index );
                     let mut candidateList = self.multiCharDelimitMap[ delimit ];
                     while candidateList {
                        let mut findFlag = false;
                        foreach candidate in unwrap ( candidateList ) {
                           if candidate == token.sub(
                              index, index + #candidate - 1 )
                           {
                              delimit = candidate;
                              candidateList = self.multiCharDelimitMap[ delimit ];
                              findFlag = true;
                              break;
                           }
                        }
                        if not findFlag {
                           break;
                        }
                     }
                     subIndex = index + #delimit;

                     let mut workKind = TokenKind.Dlmt;
                     if op2Set.has( delimit ) or op1Set.has( delimit ) {
                        workKind = .Ope;
                     }
                     if delimit == "..." {
                        workKind = .Symb;
                     }
                     if delimit == "?" {
                        let nextChar = token.sub( index, subIndex );
                        list.insert( createInfo(
                           .Char, nextChar, columnIndex + subIndex ) );
                        subIndex = subIndex + 1;
                     }
                     else {
                        list.insert( createInfo(
                           workKind, delimit, columnIndex + index ) );
                     }
                  }
                  else {
                     if subIndex <= #token {
                        list.insert(
                           createInfo(
                              .Symb, token.sub( subIndex ##),
                              columnIndex + subIndex ) );
                     }
                     break;
                  }
               }
            }
         }
      }
      else {
         list.insert( createInfo( kind, val, column ) );
      }
   };

   // 検索開始位置。
   // 領域開始位置と検索開始位置が異なる場合がある。
   // たとえば、 0.12e-2 のときに - の部分が検索開始位置、 0 の部分が領域開始位置になる
   let mut searchIndex = startIndex;

   // 領域をカテゴライズする
   while true {
      let mut syncIndexFlag = true;
      //let pattern = ```[/%-%?"%'%`%[].```;
      let pattern = ```[/%-%?"%'%`].```;
      let! index = string.find( rawLine, pattern, searchIndex ## ) {
         addVal( .Symb, rawLine.sub( startIndex ##), startIndex );
         return list;
      };

      let findChar = rawLine[ index];
      let nextChar = rawLine[ index + 1];

      if findChar == ?- and nextChar ~= ?- {
         searchIndex = index + 1;
         syncIndexFlag = false;
      }
      else {
         if startIndex < index {
            addVal( .Symb, rawLine.sub( startIndex, index - 1 ), startIndex );
         }
         if findChar == ?/ {
            // コメント処理
            if nextChar == ?* {
               // 複数行コメントの場合
               let comment, nextIndex = multiComment( index + 2, "*/" );
               addVal( .Cmnt, "/*" .. comment, index );
               searchIndex = nextIndex;
            }
            elseif nextChar == ?/ {
               // 1行コメント
               addVal( .Cmnt, rawLine.sub( index ## ), index );
               searchIndex = #rawLine + 1;
            }
            else {
               addVal( .Ope, "/", index );
               searchIndex = index + 1;
            }
         }
         // elseif findChar == ?\' and nextChar == ?\' { // コメント処理
         //     if string[rawLine, index + 2 ) == ?\' {
         //         // 複数行コメントの場合
         //         let comment, nextIndex = multiComment( index + 3, "'''" );
         //         addVal( kindCmnt, "'''" .. comment, index );
         //         searchIndex = nextIndex;
         //     }
         //     else {
         //         // 1行コメント
         //         addVal( kindCmnt, rawLine.sub( index ), index );
         //         searchIndex = #rawLine + 1;
         //     }
         // }
         // elseif findChar == ?\[ {
         //     if nextChar == ?@ {
         //         addVal( kindDlmt, "[@", index );
         //         searchIndex = index + 2;
         //     }
         //     else {
         //         addVal( kindDlmt, "[", index );
         //         searchIndex = index + 1;
         //     }
         // }
         elseif findChar == ?\' or findChar == ?\" {
            // 文字列の場合
            let mut workIndex = index + 1;
            let workPattern = '["\'\\]';
            while true {
               let! endIndex = string.find( rawLine, workPattern, workIndex ## ) {
                  // 文字列の区切り文字がない場合はエラー
                  Util.err( "%s:%d:%d: error: illegal string -- %s"
                            ( self.getStreamName(), self.lineNo, index, rawLine ) );
               };
               let workChar = rawLine[ endIndex];
               if workChar == findChar {
                  // 対になる区切り文字だった場合は文字列として登録
                  addVal( .Str, rawLine.sub( index, endIndex ), index );
                  searchIndex = endIndex + 1;
                  break;
               }
               elseif workChar == ?\\ {
                  // \ の場合は、次の文字がクオートされるので +2
                  workIndex = endIndex + 2;
               }
               else {
                  workIndex = endIndex + 1;
               }
            }
         }
         elseif findChar == ?` {
            if ( nextChar == findChar and
                 rawLine[ index + 2 ] == ?` )
            { // '```'
               // 複数行文字列の場合
               let txt, nextIndex = multiComment( index + 3, '```' );
               addVal( .Str, '```' .. txt, index );
               searchIndex = nextIndex;
            }
            else {
               addVal( .Ope, '`', index );
               searchIndex = index + 1;
            }
         }
         elseif findChar == ?? {
            let mut codeChar = rawLine.sub( index + 1, index + 1 );
            if nextChar == ?\\ {
               let quoted = rawLine.sub( index + 2, index + 2 );
               if quotedCharSet.has( quoted ) {
                  codeChar = rawLine.sub( index + 1, index + 2 );
               }
               else {
                  codeChar = quoted;
               }
               searchIndex = index + 3;
            }
            else {
               searchIndex = index + 2;
            }
            addVal( .Char, codeChar, index );
         }
         else {
            Util.err( "%s:%d:%d: error: illegal syntax -- %s"
                      ( self.getStreamName(), self.lineNo, index, rawLine ) );
         }
      }
      if syncIndexFlag {
         startIndex = searchIndex;
      }
   }
}

pub override fn StreamParser.getToken() mut : &Token! {
   if #self.lineTokenList < self.pos {
      self.pos = 1;
      self.lineTokenList = [];
      while #self.lineTokenList == 0 {
         let! mut workList = self.parse() {
            return nil;
         };
         self.lineTokenList = workList;
      }
   }

   let token = self.lineTokenList[ self.pos ];
   self.pos = self.pos + 1;

   return token;
}

let eofToken = new Token( .Eof, "<EOF>", new Position( 0, 0 ), false, [] );
pub fn getEofToken(): &Token {
   return eofToken;
}
pub class DummyParser extend Parser {
   pub override fn getToken() mut : &Token! {
      return eofToken;
   }
   pub override fn getStreamName(): str {
      return "dummy";
   }
}

pub class CommentLayer {
   /** コメントトークンリスト */
   pri let mut commentList: List<&Token> {pub};
   /** commentList に追加したコメントを保持するトークンの Set */
   pri let mut tokenSet: Set<&Token>;
   /** commentList に追加したコメントを保持するトークンのリスト */
   pri let mut tokenList: List<&Token>;

   pub fn __init() {
      self.commentList = [];
      self.tokenSet = (@);
      self.tokenList = [];
   }

   pub fn addDirect( commentList:&List<&Token> ) mut {
      foreach comment in commentList {
         self.commentList.insert( comment );
      }
      
   }
   pub fn add( token:&Token ) mut {
      if not self.tokenSet.has( token ) {
         self.tokenSet.add( token );
         self.tokenList.insert( token );

         self.addDirect( token.$commentList );
      }
   }

   pub fn clear() mut {
      if #self.commentList ~= 0 {
         self.commentList = [];
         self.tokenSet = (@);
         self.tokenList = [];
      }
   }
   

   /**
文の中途半端な位置にコメントがある調べる。
 
たとえば、次のような箇所にコメントがあるかどうか。

func( val1 コメント, val )
*/
   pub fn hasInvalidComment(): &Token! {
      return #self.tokenList > 1 and self.tokenList[ 2 ].$commentList[1] or nil;
   }
}

pub class CommentCtrl {
   let mut layerStack:List<CommentLayer>;
   let mut layer:CommentLayer;

   pub fn __init() {
      self.layer = new CommentLayer();
      self.layerStack = [ self.layer ];
   }
   
   pub fn push() mut {
      self.layer = new CommentLayer();
      self.layerStack.insert( self.layer );
   }

   pub fn pop() mut {
      self.layer = self.layerStack[ #self.layerStack ];
      self.layerStack.remove(##);
   }

   advertise layer;
}

__test case1(ctrl) {
   {
      let mut stream = new TxtStream( ```
let hoge:real = 2.0;
let val = ?a;
// hoge
fn func():int {
   return "%g" val + 1 + 2.0;
}
```);
      let mut parser = new StreamParser( stream, "test" ## );

      class LowToken {
         pub let txt:str;
         pub let kind:TokenKind;
      }
      let txtList = [
         new LowToken( "let", .Kywd ), new LowToken( "hoge", .Symb ),
         new LowToken( ":", .Dlmt ), new LowToken( "real", .Type ),
         new LowToken( "=", .Ope ), new LowToken( "2.0", .Real ),
         new LowToken( ";", .Dlmt ), 
         new LowToken( "let", .Kywd ), new LowToken( "val", .Symb ),
         new LowToken( "=", .Ope ), new LowToken( "a", .Char ),
         new LowToken( ";", .Dlmt ),
         new LowToken( "// hoge", .Cmnt ),
         new LowToken( "fn", .Kywd ), new LowToken( "func", .Symb ),
         new LowToken( "(", .Dlmt ), new LowToken( ")", .Dlmt ),
         new LowToken( ":", .Dlmt ), new LowToken( "int", .Type ),
         new LowToken( "{", .Dlmt ),
         new LowToken( "return", .Kywd ), new LowToken( '"%g"', .Str ),
         new LowToken( "val", .Symb ),
         new LowToken( "+", .Ope ), new LowToken( "1", .Int ),
         new LowToken( "+", .Ope ), new LowToken( "2.0", .Real ),
         new LowToken( ";", .Dlmt ),
         new LowToken( "}", .Dlmt )
      ];
      foreach lowToken in txtList {
         if! let token = parser.getToken() {
            __t._eq( ctrl, lowToken.txt, token.txt );
            __t._eq( ctrl, lowToken.kind.$_txt, token.kind.$_txt );
         }
         else {
            __t._err( ctrl, "token is nil" );
         }
      }
   }

   {
      let mut stream = new TxtStream( "1 2 3 4 5" );
      let mut parser = new DefaultPushbackParser(
         new StreamParser( stream, "test" ## ) );

      __t._eq( ctrl, parser.getTokenNoErr().txt, "1" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "2" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "3" );
      parser.pushback(); // 3
      parser.pushback(); // 2
      __t._eq( ctrl, parser.getTokenNoErr().txt, "2" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "3" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "4" );
      parser.pushbackStr( "dummy", "a b" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "a" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "b" );
      parser.pushback(); // b
      parser.pushback(); // a
      parser.pushback(); // 4
      __t._eq( ctrl, parser.getTokenNoErr().txt, "4" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "a" );
      parser.newPushback(
         [ new Token( .Symb, "z", new Position( 0, -1 ), false, [] ),
           new Token( .Symb, "y", new Position( 0, -1 ), false, [] ) ] );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "z" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "y" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "b" );
      __t._eq( ctrl, parser.getTokenNoErr().txt, "5" );
      __t._eq( ctrl, parser.getTokenNoErr().kind, TokenKind.Eof );
      __t._eq( ctrl, parser.getTokenNoErr().kind, TokenKind.Eof );
   }
   {
      let mut stream = new TxtStream( "int" );
      let mut parser = new DefaultPushbackParser(
         new StreamParser( stream, "test" ## ) );

      __t._eq( ctrl, parser.getTokenNoErr().txt, "int" );
      __t._eq( ctrl, parser.getTokenNoErr().kind, TokenKind.Eof );
   }
}
