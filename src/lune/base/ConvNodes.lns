/*
MIT License

Copyright (c) 2019, 2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control default_strict_generics;

import lune.base.Tokenizer;
import lune.base.Nodes;
import lune.base.Util;
import lune.base.Types;

pub abstract class Filter<T> {
}

pub proto abstract class Node;
   
pub form NodeVisitor(
   node:&Node, parent:&Node, relation:str, depth:int ): Nodes.NodeVisitMode;

pub abstract class Node {
   pri let id: int { pub };
   pri let pos: &Tokenizer.Position { pub };
   pri let kind: str {pub};
   pri let hasNilAcc: bool {pub};
   pri let mut parent:&Node! {pub, pub};
   pub fn processFilter<OPT>( filter: Filter<OPT>, opt:OPT ) {
   }
   pub abstract fn visit( visitor:NodeVisitor, depth:int ): bool;
}

pub abstract class ExpNode extend Node {
   pub override fn visit( visitor:NodeVisitor, depth:int ): bool {
      return false;
   }
}

pub class DummyExpNode extend ExpNode {
   local fn __init() {
      super( 0, Tokenizer.getEofToken().pos, "DummyExpNode", false, nil );
   }
}
let dummyExpNode = new DummyExpNode();

pub class NilAccNode extend ExpNode {
   let prefix: &Node {pub};
   let mut acc:&Node{pub, pub};
   local fn __init( parent:&Node, prefix:&Node, acc:&Node ) {
      super( 0, acc.$pos, "NicAccNode", false, parent );
      self.prefix = prefix;
      self.acc = acc;
   }
   pub override fn visit( visitor:NodeVisitor, depth:int ): bool {
      switch visitor( self.prefix, self, "prefix", depth ) {
         case .Child {
            if not self.prefix.visit( visitor, depth + 1 ) {
               return false;
            }
         }
         case .End {
            return false;
         }
      }
      switch visitor( self.acc, self, "acc", depth ) {
         case .Child {
            if not self.acc.visit( visitor, depth + 1 ) {
               return false;
            }
         }
         case .End {
            return false;
         }
      }
      return true;
   }
}

// _declNode( "NoneNilAcc", false, false,
//            [ ] );

pub class State {
   pri let topNode:&Node;
   pri let mut nilAccNode:NilAccNode! {pub};
   pub fn __init( node:&Node ) {
      self.topNode = node;
      self.nilAccNode = nil;
   }
   pub fn setNilAcc( node:&Node, parent:&Node ) mut {
      if not self.nilAccNode {
         if not node.$hasNilAcc and parent.$hasNilAcc {
            self.nilAccNode = new NilAccNode( parent, node, self.topNode );
         }
      }
   }
}

macro _createNewNode( val:sym, createFunc:sym, orgNode:__exp, convNode:__exp ) {
   {}
   {
      let mut newState = new State( convNode );
      let newNode = ,,createFunc( ,,orgNode, ,,convNode, newState );
      if! let nilAccNode = newState.$nilAccNode {
         ,,val = nilAccNode;
      } else {
         ,,val = newNode;
      }
   }
   
}

form createFromFunc( node:&Nodes.Node, parent:&Node, state:State ) : Node;
let mut nodeKind2createFromFunc:Map<int,createFromFunc> = {};

static fn Node_createFromNode( node:&Nodes.Node, parent:&Node, state:State ) : Node {
   let! func = nodeKind2createFromFunc[ node.$kind ] {
      Util.err( "not support -- %s" (Nodes.getNodeKindName( node.$kind ) ) );
   };
   let mut convNode = func( node, parent, state );
   
   return convNode;
}


enum FieldIndex {
   /** field 名 */
   Name = 1,
   /** field の型 */
   Type = 2,
   /** 初期値 */
   Init = 3,
}

macro _declNode( name:str, hasOrg:bool, autoCreate:bool, fieldList:List<List<str>> ) {
   {
      let className = "%sNode" (name);
      let mut initStatList:List<stat> = [];
      let mut fieldStatList:List<stat> = [];
      let mut visitStatList:List<stat> = [];
      let mut createParamList:List<stat> = [];
      let createFromName = "%s_createFromNode" ( className );

      let initParamStat:stat;
      if hasOrg {
         initParamStat = `{ , orgNode:&Nodes.,,,className };
         initStatList.insert( `{ self.orgNode = orgNode; } );
      } else {
         initParamStat = `{};
      }
      
      
      foreach field in fieldList {
         let workName, typeName, init = field[1], field[2], field[3];
         let fieldName = workName.gsub( "^@", "" );
         initStatList.insert( `{ self.,,,fieldName = ,,,init; } );

         fieldStatList.insert( `{let mut ,,,fieldName:,,,typeName {pub,pub}; } );
         let bareTypeName = typeName.gsub( "[&!]", "" );


         // 子 Node を列挙する処理
         if typeName.find( "Node" ## ) and not workName.find( "^@"## ) {
            {
               let oneVisitStat = `{
                  switch visitor( child, self, ,,fieldName, depth ) {
                     case .Child {
                        if not child.visit( visitor, depth + 1 ) {
                           return false;
                        }
                     }
                     case .End {
                        return false;
                     }
                  }
               };

               fn processNilable( varName:str, statVar:stat ) {
                  if typeName.find( "!$" ## ) {
                     visitStatList.insert( `{
                        {
                           if! let ,,,varName = self.,,,fieldName {
                              ,,statVar;
                           }
                        }
                     });
                  }
                  else {
                     visitStatList.insert( `{
                        {
                           let ,,,varName = self.,,,fieldName;
                           ,,statVar;
                        }
                     } );
                  }
               }
               
               if typeName.find( "List<" ## ) {
                  let workStat = `{
                     foreach child in list {
                        ,,oneVisitStat;
                     }
                  };
                  processNilable( "list", workStat );
               }
               else {
                  processNilable( "child", oneVisitStat );
               }
            }


            {
               
               fn processNilable( varName:str, statVar:stat ) : stat {
                  if typeName.find( "!$" ## ) {
                     return `{
                        let! ,,,varName = node.$,,,fieldName {
                           return nil;
                        };
                        ,,statVar
                     };
                  }
                  else {
                     return `{
                        let ,,,varName = node.$,,,fieldName;
                        ,,statVar
                     };
                  }
               }

               let inStat:stat;
               if typeName.find( "List<" ## ) {
                  let workStat = `{
                     let mut expList:List<&Node> = [];
                     foreach exp in list {
                        let newConv:Node;
                        _createNewNode( newConv, Node_createFromNode, exp, convNode );
                        expList.insert( newConv );
                     }
                     return expList;
                  };
                  inStat = processNilable( "list", workStat );
               } else {
                  inStat = processNilable(
                     "child", `{
                        let paramNode = ,,,"%s_createFromNode" ( bareTypeName )(
                           child, convNode, state );
                        return paramNode;
                     } ); 
               }
               let createName = "create%s" (fieldName);
               createParamList.insert(
                  `{
                     fn ,,,createName~~() : ,,,typeName {
                        ,,inStat
                     }
                     convNode.,,,"set_%s" (fieldName) ( ,,,createName~~() );
                  }
               );
            }
         }
      }

      

      
      let createFromStat;
      let orgNodeStat;
      if hasOrg {
         orgNodeStat = `{let orgNode: &Nodes.,,,className {pub}};
      } else {
         orgNodeStat = `{};
      }
      if autoCreate {
         createFromStat = `{
            pub static fn ,,,createFromName~~(
               workNode:&Nodes.Node, parent:&Node, state:State ) : ,,,className
            {
               let! node = workNode@@@Nodes.,,,className {
                  Util.err( "illegal node -- %s, %s"
                            (Nodes.getNodeKindName( workNode.$kind ), ,,className) );
               };
               let mut convNode = new ,,,className~~(
                  node.$id, node.$effectivePos,
                  ,,className, workNode.hasNilAccess(), parent, node );
               
               ,,createParamList;

               state.setNilAcc( convNode, parent );
               
               return convNode;
            }

            nodeKind2createFromFunc[ Nodes.NodeKind.$,,,name ] =
               fn ( node:&Nodes.Node, workParent:&Node, state:State ) : Node {
                  return ,,,createFromName~~( node, workParent, state );
               };
            };
      } else {
         createFromStat = `{};
      }
      fieldStatList.insert( `{
         pub override fn processFilter<OPT>( filter: Filter<OPT>, opt:OPT ) {
            filter.,,,"process%s" (name) (self, opt );
         } } );
      let mut relateStat:List<stat> = [];
      relateStat.insert( `{
         pub abstract fn Filter. ,,,"process%s" (name) ( node: &,,,className, opt:T ) mut;
      } );
   }
   pub proto class ,,,className extend ExpNode;
   ,,relateStat;
   pub class ,,,className extend ExpNode {
      ,,orgNodeStat;
      ,,fieldStatList;

      pub fn __init( id: int, pos: &Tokenizer.Position, kind: str,
                     hasNilAcc:bool, parent:&Node! ,,initParamStat )
      {    
         super( id, pos, kind, hasNilAcc, parent );
         ,,initStatList;
      }
      pub override fn visit( visitor:NodeVisitor, depth:int ): bool {
         ,,visitStatList;
         return true;
      }
   }
   ,,createFromStat;
}

_declNode( "ExpList", true, true,
           [ [ "expList", "&List<&Node>", "[]" ] ] );
_declNode( "ExpNew", true, true,
           [ [ "argList", "&ExpListNode!", "nil" ] ] );
_declNode( "ExpUnwrap", true, true,
           [ [ "exp", "&Node", "dummyExpNode" ],
             [ "default", "&Node!", "nil" ] ] );
_declNode( "ExpRef", true, true,
           [  ] );
_declNode( "ExpOp2", true, true,
           [ [ "exp1", "&Node", "dummyExpNode" ],
             [ "exp2", "&Node", "dummyExpNode" ] ] );
_declNode( "ExpCast", true, true,
           [ [ "exp", "&Node", "dummyExpNode" ] ] );
// _declNode( "ExpToDDD", true, false,
//            [ [ "expList", "&ExpListNode", "" ] ] );

pub class ExpToDDDNode extend ExpNode {
   let orgNode:Nodes.ExpToDDDNode {pub};
   let mut expList:&ExpListNode {pub,pub};
}

pub static fn ExpToDDDNode_createFromNode(
   workNode:&Nodes.Node, parent:&Node, state:State ) : ExpToDDDNode
{
   let! node = workNode@@@Nodes.ExpToDDDNode {
      Util.err( "illegal node -- %s -- %s"
                (workNode.$kind, __func__));
   };
   let mut expList = ExpListNode_createFromNode( node.$expList, dummyExpNode, state );

   let mut convNode = new ExpToDDDNode(
      node.$id, node.$effectivePos, "ExpToDDDNode", false, parent, node, expList );
   expList.set_parent( convNode );

   state.setNilAcc( convNode, parent );
   
   return convNode;
}
nodeKind2createFromFunc[ Nodes.NodeKind.$ExpToDDD ] = fn (
   node:&Nodes.Node, parent:&Node, state:State ) : Node
{
   return ExpToDDDNode_createFromNode( node, parent, state );
};

_declNode( "ExpSubDDD", true, true,
           [ [ "src", "&Node", "dummyExpNode" ] ] );
_declNode( "ExpOp1", true, true,
           [ [ "exp", "&Node", "dummyExpNode" ] ] );
_declNode( "ExpRefItem", true, true,
           [ [ "val", "&Node", "dummyExpNode" ],
             [ "index", "&Node!", "nil" ] ] );
_declNode( "ExpCall", true, true,
           [ [ "func", "&Node", "dummyExpNode" ],
             [ "argList", "&ExpListNode!", "nil" ]] );
_declNode( "ExpMRet", true, true,
           [ [ "mRet", "&Node", "dummyExpNode" ] ] );
_declNode( "ExpAccessMRet", true, true,
           [ [ "mRet", "&Node", "dummyExpNode" ] ] );
_declNode( "ExpMultiTo1", true, true,
           [ [ "exp", "&Node", "dummyExpNode" ] ] );
_declNode( "ExpParen", true, true,
           [ [ "exp", "&Node", "dummyExpNode" ] ] );
_declNode( "ExpOmitEnum", true, true,
           [  ] );
_declNode( "RefField", true, true,
           [ [ "prefix", "&Node", "dummyExpNode" ] ] );
_declNode( "GetField", true, true,
           [ [ "prefix", "&Node", "dummyExpNode" ] ] );
_declNode( "DeclFunc", true, true,
           [  ] );
_declNode( "NewAlgeVal", true, true,
           [ [ "paramList", "&List<&Node>", "[]" ] ] );
_declNode( "LuneKind", true, true,
           [ [ "exp", "&Node", "dummyExpNode" ] ] );
_declNode( "LiteralNil", true, true,
           [  ] );
_declNode( "LiteralChar", true, true,
           [  ] );
_declNode( "LiteralInt", true, true,
           [  ] );
_declNode( "LiteralReal", true, true,
           [  ] );
_declNode( "LiteralArray", true, true,
           [ [ "expList", "&ExpListNode!", "nil" ] ] );
_declNode( "LiteralList", true, true,
           [ [ "expList", "&ExpListNode!", "nil" ] ] );
_declNode( "LiteralSet", true, true,
           [ [ "expList", "&ExpListNode!", "nil" ] ] );
pub class PairItem {
   pri let key: Node { pub };
   pri let val: Node { pub };
}
_declNode( "LiteralMap", true, false,
           [ [ "pairList", "List<&PairItem>", "[]" ] ] );
pub static fn LiteralMapNode_createFromNode(
   workNode:&Nodes.Node, parent:&Node, state:State ) : LiteralMapNode
{
   let! node = workNode@@@Nodes.LiteralMapNode {
      Util.err( "illegal node -- %s -- %s"
                (workNode.$kind, __func__));
   };
   let mut pairList:List<&PairItem> = [];
   let mut convNode = new LiteralMapNode(
      node.$id, node.$effectivePos, "LiteralMapNode", false, parent, node );
   foreach item in node.$pairList {
      let key:Node;
      _createNewNode( key, Node_createFromNode, item.$key, convNode );
      let val:Node;
      _createNewNode( val, Node_createFromNode, item.$val, convNode );
      pairList.insert( new PairItem( key, val ));
   }
   convNode.set_pairList( pairList );

   state.setNilAcc( convNode, parent );
   
   return convNode;
}
nodeKind2createFromFunc[ Nodes.NodeKind.$LiteralMap ] = fn (
   node:&Nodes.Node, parent:&Node, state:State ) : Node {
   return LiteralMapNode_createFromNode( node, parent, state );
};

_declNode( "LiteralString", true, true,
           [ [ "dddParam", "&ExpListNode!", "nil" ] ] );
_declNode( "LiteralBool", true, true,
           [  ] );
_declNode( "LiteralSymbol", true, true,
           [  ] );

//====== 追加

_declNode( "NoneNilAcc", false, false,
           [ ] );
_declNode( "CallExt", false, false,
           [ [ "exp", "&Node", "dummyExpNode" ] ] );
_declNode( "CondStackVal", false, false,
           [ [ "exp", "&Node", "dummyExpNode" ] ] );
_declNode( "GetAt", false, false,
           [ [ "exp", "&Node", "dummyExpNode" ],
             [ "index", "&Node", "dummyExpNode" ]] );

pub fn convertNodes( targetNode:&Nodes.Node ) : Node! {
   if! let createFunc = nodeKind2createFromFunc[ targetNode.$kind ] {
      let mut state = new State( dummyExpNode );
      let mut workNode = createFunc( targetNode, dummyExpNode, state );
      if! let mut nilAccNode = state.$nilAccNode {
         if nilAccNode.$acc == dummyExpNode {
            nilAccNode.set_acc( workNode );
         }
         return nilAccNode;
      }
      return workNode;
   }
   return nil;
}

__test {
   import lune.base.LuaVer;
   import lune.base.Option;
   import lune.base.convLua;

   fn conv( targetNode:&Nodes.Node ) {
      targetNode.visit(
         fn ( node:&Nodes.Node, parent:&Nodes.Node,
              relation:str, depth:int ): Nodes.NodeVisitMode
         {
            Util.println( "%s: %s: %d:%d"
               ( string.rep( " ", depth * 3 ) .. relation,
                 Nodes.getNodeKindName( node.$kind ),
                 node.$effectivePos.lineNo, node.$effectivePos.column ) );
            if! let workNode = convertNodes( node ) {
               let mut appTxt = "";
               if! let mut nilAccNode = workNode@@@NilAccNode {
                  appTxt = "%s %s %s" ( nilAccNode.$parent$.$kind,
                                        nilAccNode.$prefix.$kind,
                                        nilAccNode.$acc.$kind );                
                  Util.println( "%s: conved == %s: %d:%d %s"
                         ( string.rep( " ", depth * 3 ) .. relation,
                           workNode.$kind, workNode.$pos.lineNo,
                           workNode.$pos.column, appTxt ) );
               }
               workNode.visit(
                  fn ( convNode:&Node, convParent:&Node,
                       convRelation:str, convDepth:int): Nodes.NodeVisitMode
                  {
                     Util.println( "%s: conved -- %s: %d:%d  %s"
                            ( string.rep( " ", convDepth * 3 ) .. convRelation,
                              convNode.$kind, convNode.$pos.lineNo, convNode.$pos.column,
                              convNode.$hasNilAcc and "nilAcc" or "" ) );
                     return .Child;
                  }, depth );
               if node.$kind == Nodes.NodeKind.$DeclFunc {
                  return .Child;
               }
               return .Next;
            } else {
               return .Child;
            }
         }, 0 );
   }
}


__test case1(ctrl) {
   LuaVer.setCurVer( 53 );

   let code = ```
{
  class Test {
    let val:int {pub};
    let list:List<int> {pub};
    pub fn __init() {
      self.val = 0;
      self.list = [ 1, 2, 3 ];
    }
  }
  fn foo(): int, int {
    return 1, 2;
  }
  fn sub( val:int, ... ) {
     print( ... );
  }
  enum Val {
    Val1,
    Val2,
  }
  fn sub2( val:Val ) {
  }
  alge Bar {
    Val1(int,int)
  }
  fn func( test:Test! ) {
     let! test2 = test {
        return;
     };
     let val = (unwrap test default test2).$val;
     let val2 = val@@real;
     let val3 = #test2.$list;
     let val4 = test2.$list[1] + foo();
     let bar = Bar.Val1( 1, 2 );
     let kind = _kind( 1 );
     print( test$.$val );
     sub( foo() );
     sub2( .Val1 );
  }
  func( new Test() );
}
{
  class Test {
     let test:Test! {pub};
  
     pub fn get_test2() : &Test {
        return self;
     }
     pub fn func() : int {
        return 1;
     }
  }
  fn func( val1:int!, val2:int!, val3:int! ): int! {
     return val1 and val2 or val3;
  }
  func( 1, 2, 3 );
  fn func2( test:Test! ) {
     test$.$test$.$test$.func$();
  }
  func2( new Test( nil ) );
  fn func3( test:Test ) {
     test.$test2.$test2.$test2.func$();
     test.$test2.$test$.func$();
  }
  func3( new Test( nil ) );
}
```;
   
   let scriptPath = "test.lns";
   let option = Option.createDefaultOption( scriptPath, nil );
   let mut ast = convLua.createAst( scriptPath, code, option );

   conv( ast.$node );
}
