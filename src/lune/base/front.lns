/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.frontInterface;
import lune.base.Parser;
import lune.base.convLua;
import lune.base.TransUnit;
import lune.base.Util;
import lune.base.Option;
import lune.base.dumpNode;
import lune.base.glueFilter;
import lune.base.Depend;
import lune.base.OutputDepend;
import lune.base.Ver;

global fn _luneGetLocal( varName:str ):stem!
{
   let mut index = 1;
   while true {
      let name, val = debug.getlocal( 3, index );
      if name == varName {
	 return val;
      }     
      if not name {
	 break;
      }     
      //print( name, val )
      index = index + 1;
   }  
   error( "not found -- " .. varName );
}

global fn _luneSym2Str( val:stem! ):str! {
   if! val {
      if type( _exp ) ~= "table" {
         return string.format( "%s", _exp );
      }

      let mut txt = "";
      foreach item in _exp@@str[] {
         txt = txt .. item;
      }
      return txt;
   }
   return nil;
}

class Front extend (frontInterface.frontInterface) {
   let mut option:Option.Option;
   let mut loadedMap:Map<str,Map<str,stem>>;
   let mut loadedMetaMap:Map<str,stem>;
   let mut convertedMap:Map<str,str>;

   pub fn __init( option:Option.Option ) {
      self.option = option;
      self.loadedMap = {};
      self.loadedMetaMap = {};
      self.convertedMap = {};

      frontInterface.setFront( self );
   }

   pub fn loadModule( mod:str ): stem!, stem;
   pub fn loadMeta( importModuleInfo:frontInterface.ImportModuleInfo, mod:str ): stem;
   pub fn loadFromLnsTxt( importModuleInfo:frontInterface.ImportModuleInfo,
                          name:str, txt:str, onlyMeta:bool ): stem, stem;
   pub fn searchModule( mod:str ): str;
   pub fn error( message:str );
}

fn Front.error( message:str ) {
   Util.errorLog( message );
   Util.printStackTrace();
   os.exit( 1 );
}

fn Front.loadLua( path:str ):stem {
   let chunk, err = loadfile( path );
   when! err {
      Util.errorLog( err );
   }
   if! chunk {
      return unwrap _exp();
   }
   error( "failed to error" );
}

fn createPaser( path:str, mod:str ): Parser.Parser
{
   let mut parser = Parser.StreamParser.create( path, false, mod );
   if! parser {
      return _exp;
   }
   error( "failed to open " .. path );
}

pub fn scriptPath2Module( path:str ):str {
   let mod = string.gsub( path, "/", "." );
   return string.gsub( mod, "%.lns$", "" );
}

fn Front.createPaser(): Parser.Parser
{
   let mod = scriptPath2Module( self.option.scriptPath );
   return createPaser( self.option.scriptPath, mod );
}


fn Front.createAst( importModuleInfo:frontInterface.ImportModuleInfo,
                    parser:Parser.Parser, mod:str, analyzeModule:str!,
                    analyzeMode:TransUnit.AnalyzeMode,
                    pos:&Parser.Position! ): &TransUnit.ASTInfo
{
   let mut transUnit = new TransUnit.TransUnit(
      importModuleInfo, new convLua.MacroEvalImp( self.option.mode ),
      analyzeModule, analyzeMode, pos, self.option.targetLuaVer );
   return transUnit.createAST( parser, false, mod );
}

fn Front.convert(
   ast:&TransUnit.ASTInfo, streamName:str,
   mut stream:oStream, mut metaStream:oStream, convMode:convLua.ConvMode, inMacro:bool )  
{
   let mut conv = convLua.createFilter(
      streamName, stream, metaStream, convMode, inMacro,
      ast.$moduleTypeInfo, ast.$moduleSymbolKind,
      self.option.useLuneModule, self.option.targetLuaVer );
   ast.$node.processFilter( conv, nil, 0 );
}

fn loadFromLuaTxt( txt:str ): stem {
   //--print( txt )
   //let chunk, err = load( txt, "", "bt", _G );
   let chunk, err = _load( txt );
   if! err {
      print( _exp );
   }     
   if! chunk {
      return unwrap _exp();
   }
   error( "failed to error" );
}


fn Front.convertFromAst(
   ast:&TransUnit.ASTInfo, streamName:str, mode:convLua.ConvMode ) : str, str
{
   let mut stream = new Util.memStream();
   let mut metaStream = new Util.memStream();

   self.convert( ast, streamName, stream, metaStream, mode, false );

   return metaStream.$txt, stream.$txt;
}

fn Front.loadFromLnsTxt(
   importModuleInfo:frontInterface.ImportModuleInfo,
   name:str, txt:str, onlyMeta:bool ): stem, stem
{
   let mut transUnit = new TransUnit.TransUnit(
      importModuleInfo, new convLua.MacroEvalImp( self.option.mode ),
      nil, nil, nil, self.option.targetLuaVer );
   let mut stream = new Parser.TxtStream( txt );
   let mut parser = new Parser.StreamParser( stream, name, false );

   let ast = transUnit.createAST( parser, false, nil );


   let mut metaTxt, luaTxt = self.convertFromAst( ast, name, .Exec );
   let mut meta = loadFromLuaTxt( metaTxt );
   if onlyMeta {
      return meta, luaTxt;
   }
   return meta, loadFromLuaTxt( luaTxt );
}

fn Front.loadFile( importModuleInfo:frontInterface.ImportModuleInfo,
                   path:str, mod:str, onlyMeta:bool ): stem, stem
{
   let ast = self.createAst( importModuleInfo,
                             createPaser( path, mod ), mod, nil, .Compile );

   let mut convMode = convLua.ConvMode.Exec;
   let mut metaTxt, luaTxt = self.convertFromAst( ast, path, convMode );

   if self.option.updateOnLoad {
      fn saveFile( suffix:str, txt:str ){
         let mut newpath = "";
         if! let dir = self.option.outputDir {
            newpath = "%s/%s%s" ( dir, mod.gsub( "%.", "/" ), suffix );
         }
         else {
            newpath = path.gsub( ".lns$", suffix );
         }
         if! let mut fileObj = io.open( newpath, "w" ) {
            fileObj.write( txt );
            fileObj.close();
         }
      }
      saveFile( ".lua", luaTxt );
      saveFile( ".meta", metaTxt );
   }

   let mut meta = loadFromLuaTxt( metaTxt );
   if onlyMeta {
      return meta, luaTxt;
   }
   return meta, loadFromLuaTxt( luaTxt );
}

fn Front.searchModule( mod:str ): str! {
   let mut lnsSearchPath = package.path;
   lnsSearchPath = string.gsub( lnsSearchPath, "%.lua", ".lns" );
   //let! foundPath = package.searchpath( mod, lnsSearchPath ) {
   let! foundPath = Depend.searchpath( mod, lnsSearchPath ) {
      return nil;
   };
   return foundPath.gsub( "^./", "" );
}

fn Front.searchLuaFile( moduleFullName:str, addSearchPath:str! ) : str! {
   let mut luaSearchPath = package.path;
   if! addSearchPath {
      luaSearchPath = string.format( "%s/?.lua;%s", addSearchPath, package.path );
      //luaSearchPath = string.format( "%s/?.lua", _exp );
   }
   //let! foundPath = package.searchpath( moduleFullName, luaSearchPath ) {
   let! foundPath = Depend.searchpath( moduleFullName, luaSearchPath ) {
      return nil;
   };
   return foundPath.gsub( "^./", "" );
}

/**
指定のメタファイルが最新で更新が必要ないか調べる。

@param metaPath メタファイルのパス
@return stem! 最新の場合、ロードしたメタ情報。 最新でない場合は nil。
*/
fn Front.checkUptodateMeta( metaPath:str, addSearchPath:str! ): stem! {
   let meta = self.loadLua( metaPath )@@TransUnit._MetaInfo;
   if meta.$__formatVersion ~= Ver.metaVersion {
      return nil;
   }
   foreach dependInfo, moduleFullName in meta._dependModuleMap {
      if! let moduleLuaPath = self.searchLuaFile( moduleFullName, addSearchPath ) {
         let moduleLnsPath = moduleLuaPath.gsub( "%.lua$", ".lns" );
         if not Util.getReadyCode( moduleLnsPath, metaPath ) {
            // 依存するモジュールが更新されている場合、
            // 作成済みのメタファイルは使えないので nil を返す。
            return nil;
         }
         let moduleMetaPath = moduleLuaPath.gsub( "%.lua$", ".meta" );
         if Util.existFile( moduleMetaPath ) and
            not Util.getReadyCode( moduleMetaPath, metaPath )
         {
            return nil;
         }
      }
   }
   return meta;
}

     
fn Front.loadModule( mod:str ) mut : stem!, stem {
   if self.loadedMap[ mod ] == nil {
      if! let luaTxt = self.convertedMap[ mod ] {
         if not self.loadedMetaMap[ mod ] {
            error( "nothing meta -- %s" ( mod ) );
         }

	 let mut info:Map<str,stem> = {};
	 info.mod = loadFromLuaTxt( luaTxt );
	 info.meta = self.loadedMetaMap[ mod ];

	 self.loadedMap[ mod ] = info;
      }
      else {
         if! let lnsPath = self.searchModule( mod ) {
            let mut luaPath:str! = string.gsub( lnsPath, "%.lns$", ".lua" );

            if! let dir = self.option.outputDir {
               luaPath = self.searchLuaFile( mod, dir );
            }

            let mut loadVal:stem! = nil;
            when! luaPath {
               if Util.getReadyCode( lnsPath, luaPath ) {
	          let metaPath = string.gsub( luaPath, "%.lua$", ".meta" );
	          if Util.getReadyCode( lnsPath, metaPath ) {
	             loadVal = self.loadLua( luaPath );
                     let meta = self.checkUptodateMeta(
                        metaPath, self.option.outputDir );

                     if meta {
	                let mut info:Map<str,stem> = {};
	                info.mod = loadVal;
	                info.meta = meta;
	                self.loadedMap[ mod ] = info;
                     }
                     else {
                        loadVal = nil;
                     }
                  }           
               }  
            }  
            if loadVal == nil {
	       let meta, workVal = self.loadFile(
                  new frontInterface.ImportModuleInfo(), lnsPath, mod, false );
	       let mut info:Map<str,stem> = {};
	       info.mod = workVal;
	       info.meta = meta;

	       self.loadedMap[ mod ] = info;
            }  
         }
      }
   }
   if! self.loadedMap[ mod ] {
      return unwrap _exp.mod, unwrap _exp.meta;
   }
   error( "load error, %s" ( mod ) );
}


fn Front.loadMeta(
   importModuleInfo:frontInterface.ImportModuleInfo, mod:str ) mut : stem
{
   if self.loadedMetaMap[ mod ] == nil {
      if! self.loadedMap[ mod ] {
         self.loadedMetaMap[ mod ] = _exp.meta;
      }
      else {
         if! let lnsPath = self.searchModule( mod ) {
            let mut luaPath:str! = string.gsub( lnsPath, "%.lns$", ".lua" );

            if! let dir = self.option.outputDir {
               luaPath = self.searchLuaFile( mod, dir );
            }  

            let mut meta:stem! = nil;
            when! luaPath {
               if Util.getReadyCode( lnsPath, luaPath ) {
	          let metaPath = string.gsub( luaPath, "%.lua$", ".meta" );
	          if Util.getReadyCode( lnsPath, metaPath ) {
                     meta = self.checkUptodateMeta(
                        metaPath, self.option.outputDir );
                     when! meta {
	                self.loadedMetaMap[ mod ] = meta;
                     }
                  }  
               }  
            }  
            if meta == nil {
	       let metawork, luaTxt =
                  self.loadFile( importModuleInfo, lnsPath, mod, true );
	       self.loadedMetaMap[ mod ] = metawork;
               self.convertedMap[ mod ] = luaTxt@@str;
            }  
         }
      }
   }
   if! self.loadedMetaMap[ mod ] {
      return unwrap _exp;
   }
   error( "load meta error, %s" ( mod ) );
}

pub fn Front.dumpTokenize() mut {
   frontInterface.setFront( self );

   let mut parser = self.createPaser();
   while true {
      let! token = parser.getToken() {
         break;
      };
      print( token.kind, token.pos.lineNo, token.pos.column, token.txt );
   }
}

pub fn Front.dumpAst() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   Util.profile(
      self.option.validProf,
      fn() {
	 let ast = self.createAst(
            new frontInterface.ImportModuleInfo(),
            self.createPaser(), mod, nil, .Compile );
	 ast.$node.processFilter( new dumpNode.dumpFilter(), "", 0 );
      }, self.option.scriptPath .. ".profi" );
}

pub fn Front.checkDiag() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   Util.setErrorCode( 0 );
   self.createAst( new frontInterface.ImportModuleInfo(),
                   self.createPaser(), mod, nil, .Diag );
}

pub fn Front.complete() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   self.createAst( new frontInterface.ImportModuleInfo(), self.createPaser(), mod,
		   self.option.analyzeModule, .Complete, self.option.analyzePos );
}

pub fn Front.createGlue() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   let ast = self.createAst( new frontInterface.ImportModuleInfo(),
                             self.createPaser(), mod, nil, .Compile );
   let mut glue = new glueFilter.glueFilter( self.option.outputDir );
   ast.$node.processFilter( glue );
}

pub fn Front.convertToLua() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   let ast = self.createAst( new frontInterface.ImportModuleInfo(),
                             self.createPaser(), mod, nil, .Compile );
   let mut convMode = convLua.ConvMode.Convert;
   if self.option.mode == .LuaMeta {
      convMode = .ConvMeta;
   }
   self.convert( ast, self.option.scriptPath,
                 io.stdout, io.stdout, convMode, false );
}

pub fn Front.saveToLua() mut {
   frontInterface.setFront( self );
   
   let mod = scriptPath2Module( self.option.scriptPath );
   Util.profile(           
      self.option.validProf,       
      fn () {
	 let ast = self.createAst(
            new frontInterface.ImportModuleInfo(),
            self.createPaser(), mod, nil, .Compile );
	 let mut luaPath = self.option.scriptPath.gsub( "%.lns$", ".lua" );
	 let mut metaPath = self.option.scriptPath.gsub( "%.lns$", ".meta" );
	 if self.option.outputDir {
	    let filename = mod.gsub( "%.", "/" );
	    luaPath = string.format(
               "%s/%s.lua", self.option.outputDir, filename );
	    metaPath = string.format(
               "%s/%s.meta", self.option.outputDir, filename );
	 }


         if! let mut dependsStream = self.option.dependsStream {
            ast.$node.processFilter( OutputDepend.createFilter( dependsStream ) );
         }
         
	 if luaPath ~= self.option.scriptPath {
	    let! mut fileObj = io.open( luaPath, "w" ) {
               error( "write open error -- %s" (luaPath) );
            };
	    let mut stream = fileObj;

	    let mut metaFileObj:oStream! = nil;
	    let mut metaStream:oStream = stream;
            let mut convMode = convLua.ConvMode.Convert;
	    if self.option.mode == "SAVE" {
               convMode = .ConvMeta;
               if! io.open( metaPath, "w" ) {
		  metaStream = _exp;
               }
               else {
                  error( "write open error -- %s" (metaPath) );
               }
            }
	    
	    self.convert( ast, self.option.scriptPath,
                          stream, metaStream, convMode, false );
	    fileObj.close();
	    if! metaFileObj {     
	       _exp.close();
	    }
         }
      }, self.option.scriptPath .. ".profi" );
}


pub fn Front.exec() mut
{
   switch self.option.mode {
      case .Token {
         self.dumpTokenize();
      }
      case .Ast {
         self.dumpAst();
      }
      case .Diag {
         self.checkDiag();
      }
      case .Complete {
         self.complete();
      }
      case .Glue {
         self.createGlue();
      }
      case .Lua, .LuaMeta {
         self.convertToLua();
      }
      case .Save, .SaveMeta {
         self.saveToLua();
      }
      case .Exec {
         frontInterface.setFront( self );
         
         self.loadModule( scriptPath2Module( self.option.scriptPath ) );
      }
      default {
         print( "illegal mode" );
      }
   }
}

pub fn exec( args: str[] ) {
   let version = tonumber( _VERSION.gsub( "^[^%d]+", "" ), nil );

   // if version < 5.2 {
   //    io.stderr.write(
   //       string.format( "LuneScript doesn't support this lua version(%s). %s\n",
   //      	        version, "please use the version >= 5.2.") );
   //    os.exit( 1 );
   // }  
   
   let mut option = Option.analyze( args );
   let mut front = new Front( option );

   front.exec();
}
