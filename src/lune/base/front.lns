/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.frontInterface;
import lune.base.Parser;
import lune.base.convLua;
import lune.base.TransUnit;
import lune.base.Util;
import lune.base.Option;
import lune.base.dumpNode;
import lune.base.glueFilter;
import lune.base.Depend;
import lune.base.OutputDepend;
import lune.base.Ver;

_lune_control ignore_symbol_;

let forceUpdateMeta = true;

global fn __luneGetLocal( varName:str ):stem!
{
   let mut index = 1;
   while true {
      let name, val = debug.getlocal( 3, index );
      if name == varName {
	 return val;
      }     
      if not name {
	 break;
      }     
      //print( name, val )
      index = index + 1;
   }  
   error( "not found -- " .. varName );
}

global fn __luneSym2Str( val:stem! ):str! {
   if! val {
      if type( _exp ) ~= "table" {
         return string.format( "%s", _exp );
      }

      let mut txt = "";
      foreach item in _exp@@str[] {
         txt = txt .. item;
      }
      return txt;
   }
   return nil;
}

class LoadInfo {
   pub let mut mod:stem;
   pub let mut meta:&stem;
}

class Front extend (frontInterface.frontInterface) {
   let mut option:Option.Option;
   let mut loadedMap:Map<str,LoadInfo>;
   let mut loadedMetaMap:Map<str,stem>;
   let mut convertedMap:Map<str,str>;

   pub fn __init( option:Option.Option ) {
      self.option = option;
      self.loadedMap = {};
      self.loadedMetaMap = {};
      self.convertedMap = {};

      frontInterface.setFront( self );
   }

   pub fn loadModule( mod:str ): stem!, &stem;
   pub fn loadMeta( importModuleInfo:frontInterface.ImportModuleInfo, mod:str ): &stem!;
   pub fn loadFromLnsTxt( importModuleInfo:frontInterface.ImportModuleInfo,
                          name:str, txt:str ): stem;
   pub fn searchModule( mod:str ): str;
   pub fn error( message:str );
}

fn Front.error( message:str ) {
   Util.errorLog( message );
   Util.printStackTrace();
   os.exit( 1 );
}

fn Front.loadLua( path:str ):stem! {
   let chunk, err = loadfile( path );
   when! chunk {
      return unwrap chunk(##);
   }
   Util.errorLog( unwrap err default "load error -- %s." (path));
   return nil;
}

fn createPaser( path:str, mod:str ): Parser.Parser
{
   let mut parser = Parser.StreamParser.create( path, false, mod );
   if! parser {
      return _exp;
   }
   error( "failed to open " .. path );
}

pub fn scriptPath2Module( path:str ):str {
   let mod = string.gsub( path, "/", "." );
   return ( string.gsub( mod, "%.lns$", "" ) );
}

fn Front.createPaser(): Parser.Parser
{
   let mod = scriptPath2Module( self.option.scriptPath );
   return createPaser( self.option.scriptPath, mod );
}


fn Front.createAst(
   importModuleInfo:frontInterface.ImportModuleInfo,
   parser:Parser.Parser, mod:str, moduleId:&frontInterface.ModuleId, analyzeModule:str!,
   analyzeMode:TransUnit.AnalyzeMode, pos:&Parser.Position! ): &TransUnit.ASTInfo
{
   let mut transUnit = new TransUnit.TransUnit(
      moduleId, importModuleInfo, new convLua.MacroEvalImp( self.option.mode ),
      analyzeModule, analyzeMode, pos, self.option.targetLuaVer,
      self.option.transCtrlInfo );
   return transUnit.createAST( parser, false, mod );
}

fn Front.convert(
   ast:&TransUnit.ASTInfo, streamName:str,
   mut stream:oStream, mut metaStream:oStream, convMode:convLua.ConvMode, inMacro:bool )  
{
   let mut conv = convLua.createFilter(
      streamName, stream, metaStream, convMode, inMacro,
      ast.$moduleTypeInfo, ast.$moduleSymbolKind,
      self.option.useLuneModule, self.option.targetLuaVer );
   ast.$node.processFilter( conv, nil, 0 );
}

fn loadFromChunk( chunk:form!, err:str! ): stem! {
   when! err {
      Util.errorLog( err );
   }
   when! chunk {
      return chunk(##);
   }
   error( "failed to error" );
}

fn loadFromLuaTxt( txt:str ): stem! {
   //--print( txt )
   return loadFromChunk( _load( txt ## )** );
}

fn byteCompileFromLuaTxt( txt:str, stripDebugInfo:bool ): str {
   let chunk, err = _load( txt ## );
   when! chunk {
      return string.dump( chunk, stripDebugInfo );
   }
   error( unwrap err default "load error" );
}


fn Front.convertFromAst(
   ast:&TransUnit.ASTInfo, streamName:str, mode:convLua.ConvMode ) : str, str
{
   let mut stream = new Util.memStream();
   let mut metaStream = new Util.memStream();

   self.convert( ast, streamName, stream, metaStream, mode, false );

   return metaStream.$txt, stream.$txt;
}

/**
マクロ解析用
*/
fn Front.loadFromLnsTxt(
   importModuleInfo:frontInterface.ImportModuleInfo, name:str, txt:str ): stem
{
   let mut transUnit = new TransUnit.TransUnit(
      frontInterface.ModuleId.tempId,
      importModuleInfo, new convLua.MacroEvalImp( self.option.mode ),
      nil, nil, nil, self.option.targetLuaVer, self.option.transCtrlInfo );
   let mut stream = new Parser.TxtStream( txt );
   let mut parser = new Parser.StreamParser( stream, name, false );

   let ast = transUnit.createAST( parser, false, nil );

   let mut metaTxt, luaTxt = self.convertFromAst( ast, name, .Exec );
   return unwrap loadFromLuaTxt( luaTxt );
}

class DependMetaInfo extend (Mapping) {
   pub let use:bool;
   pub let buildId:str;
}

class MetaForBuildId extend (Mapping) {
   pub let __buildId:str;
   pub let __dependModuleMap: &Map<str,&DependMetaInfo>;
   pub let __subModuleMap: &List<str>;

   pub fn createModuleId(): &frontInterface.ModuleId {
      return frontInterface.ModuleId.createIdFromTxt( self.__buildId );
   }
}

pub static fn MetaForBuildId.LoadFromMeta( metaPath:str ): MetaForBuildId!, str! {
   if! let mut fileObj = io.open( metaPath## ) {
      let luaCode = fileObj.read( "*a" );
      fileObj.close();
      when! luaCode {
         let meta = MetaForBuildId._fromStem( loadFromLuaTxt( luaCode ) );
         return meta, luaCode;
      }
   }
   return nil, nil;
}


fn getMetaInfo( lnsPath:str, mod:str, outdir:str! ): &MetaForBuildId!, str, str {
   let mut moduleMetaPath = lnsPath;
   when! outdir {
      moduleMetaPath = "%s/%s" ( outdir , mod.gsub( "%.", "/" ) );
   }
   moduleMetaPath = moduleMetaPath.gsub( "%.lns$", ".meta" );
   if! let meta, metaCode = MetaForBuildId.LoadFromMeta( moduleMetaPath ) {
      return meta, moduleMetaPath, metaCode;
   }
   return nil, moduleMetaPath, "";
}

fn Front.searchModuleFile( mod:str, suffix:str, addPath:str! ): str! {
   let mut lnsSearchPath = package.path;
   //lnsSearchPath = string.gsub( lnsSearchPath, "%.lua", ".lns" );
   when! addPath {
      lnsSearchPath = string.format( "%s/?%s;%s", addPath, suffix, package.path );
   }

   lnsSearchPath = lnsSearchPath.gsub( "%.lua$", suffix );
   lnsSearchPath = lnsSearchPath.gsub( "%.lua;", suffix .. ";" );
   
   //let! foundPath = package.searchpath( mod, lnsSearchPath ) {
   let! foundPath = Depend.searchpath( mod, lnsSearchPath ) {
      return nil;
   };
   return (foundPath.gsub( "^./", "" ));
}

/**
指定の .lns ファイルのパス lnsPath の、ModuleId を取得する。

@param lnsPath .lns ファイルのパス
@param mod .lns ファイルのモジュール名
@param outdir .meta ファイルの出力先ディレクトリ。 nil の場合は .lns ファイルと同じ。
@param metaInfo .lns ファイルのメタ情報。 nil の場合は、この関数内で読み込む。
@return &frontInterface.ModuleId

lnsPath が存在しない場合、 frontInterface.ModuleId.tempId を返す。
メタ情報が有効な場合、 そのメタ情報に記載されている buildCount の ModuleId を返す。
メタ情報が無効な場合、 buildCount 0 の ModuleId を返す。
*/
fn getModuleId( lnsPath:str, mod:str, outdir:str!, mut metaInfo:&MetaForBuildId! ):
   &frontInterface.ModuleId
{
   let mut buildCount = 0;
   let! mut fileTime = Depend.getFileLastModifiedTime( lnsPath ) {
      return frontInterface.ModuleId.tempId;
   };
   if not metaInfo {
      metaInfo = getMetaInfo( lnsPath, mod, outdir );
   }
   when! metaInfo {
      let buildId = metaInfo.createModuleId();
      buildCount = buildId.$buildCount;
   }
   return frontInterface.ModuleId.createId( fileTime, buildCount );
}

enum ModuleUptodate {
   /** ファイルの更新が必要 */
   NeedUpdate,
   /** .meta ファイルの日付だけ更新が必要 */
   NeedTouch,
   /** 最新で処理不要 */
   Uptodate,
}

/**
lnsPath で指定する lns ファイルを更新する必要があるかどうか確認する。

次の条件を全て満す時に uptodate として判断する。
- .lns ファイルに対応する .meta ファイルが存在し、更新日時が .meta の方が新しい
- .meta に記載の依存ファイルが存在し、更新日時に変更がない

@param lnsPath lns ファイルパス
@param mod lnsPath のモジュール
@return frontInterface.ModuleId lnsPath のモジュール ID
@return bool uptodate かどうか
@return &MetaForBuildId! lnsPath ファイルに対応するメタ情報
@return str メタ情報内容そのものの文字列
*/
fn Front.getModuleIdAndCheckUptodate( lnsPath:str, mod:str ):
   &frontInterface.ModuleId, ModuleUptodate, &MetaForBuildId!, str
{
   let mut uptodate = ModuleUptodate.NeedUpdate;
   let metaInfo, metaPath, metaCode = getMetaInfo( lnsPath, mod, self.option.outputDir );

   /**
dependModuleMap のモジュールのメタファイルが、 metaTime よりも古いかどうかを確認する。

metaTime
   */
   fn checkDependUptodate(
      metaTime:real, dependModuleMap:&Map<str,&DependMetaInfo> ): ModuleUptodate
   {  
      foreach dependItem, depMod in dependModuleMap {
         let! modMetaPath = self.searchModuleFile(
            depMod, ".meta", self.option.outputDir )
         {
            // .meta ファイルがない場合、更新が必要
            return .NeedUpdate;
         };
         let! time = Depend.getFileLastModifiedTime( modMetaPath ) {
            // .meta ファイルの更新日時取得が出来ない場合、更新が必要
            return .NeedUpdate;
         };
         if time > metaTime {
            // インポート対象のモジュールのメタファイルの更新日時が
            // ビルド対象のモジュールのメタファイルよりも新しい場合、
            // .meta の内容を確認する。
            let! dependMeta = MetaForBuildId.LoadFromMeta( modMetaPath ) {
               return .NeedUpdate;
            };
            let orgMetaModuleId = frontInterface.ModuleId.createIdFromTxt(
               dependItem.buildId );
            let metaModuleId = dependMeta.createModuleId();
            if metaModuleId.$buildCount ~= 0 and
               metaModuleId.$buildCount ~= orgMetaModuleId.$buildCount
            {
               // buildCount が一致しない場合、更新する。
               return .NeedUpdate;
            }
         }
      }
      return .Uptodate;
   }
   
   
   when! metaInfo {
      // meta 情報があれば、 moduleId から更新済みかどうかを確認する
      let buildId = frontInterface.ModuleId.createIdFromTxt( metaInfo.__buildId );
      if buildId ~= frontInterface.ModuleId.tempId {
         let lnsTime = Depend.getFileLastModifiedTime( lnsPath );
         let metaTime = Depend.getFileLastModifiedTime( metaPath );
         when! lnsTime, metaTime {
            if lnsTime == buildId.$modTime {
               // 更新済みならば、依存ファイルの状態を確認する
               uptodate = checkDependUptodate( metaTime, metaInfo.__dependModuleMap );
            }
         }
      }
   }

   let moduleId = getModuleId( lnsPath, mod, self.option.outputDir, metaInfo );
   return moduleId, uptodate, metaInfo, metaCode;
}

fn Front.loadFile( importModuleInfo:frontInterface.ImportModuleInfo,
                   path:str, mod:str, onlyMeta:bool ): stem, stem
{
   let ast = self.createAst( importModuleInfo, createPaser( path, mod ),
                             mod, getModuleId( path, mod ## ), nil, .Compile, nil );

   let mut metaTxt, luaTxt = self.convertFromAst( ast, path, convLua.ConvMode.Exec );

   if self.option.updateOnLoad {
      fn saveFile( suffix:str, txt:str, byteCompile:bool,
                   stripDebugInfo:bool, checkUpdate:bool ){
         let mut newpath = "";
         if! let dir = self.option.outputDir {
            newpath = "%s/%s%s" ( dir, mod.gsub( "%.", "/" ), suffix );
         }
         else {
            newpath = path.gsub( ".lns$", suffix );
         }
         let mut saveTxt = txt;
         if byteCompile {
            saveTxt = byteCompileFromLuaTxt( saveTxt, stripDebugInfo );
         }
         if not forceUpdateMeta and checkUpdate {
            if! let mut fileObj = io.open( newpath ## ) {
               let oldTxt = fileObj.read( "*a" );
               if saveTxt == oldTxt {
                  // 同じ場合はセーブしない
                  return;
               }
            }
         }
         if! let mut fileObj = io.open( newpath, "w" ) {
            fileObj.write( saveTxt );
            fileObj.close();
         }
      }
      saveFile( ".lua", luaTxt, self.option.byteCompile,
                self.option.stripDebugInfo, false );
      saveFile( ".meta", metaTxt, self.option.byteCompile, true, true );
   }

   let mut meta = unwrap loadFromLuaTxt( metaTxt );
   if onlyMeta {
      return meta, luaTxt;
   }
   return meta, unwrap loadFromLuaTxt( luaTxt );
}

fn Front.searchModule( mod:str ): str! {
   return self.searchModuleFile( mod, ".lns", nil );
}

fn Front.searchLuaFile( moduleFullName:str, addSearchPath:str! ) : str! {
   let mut luaSearchPath = package.path;
   if! addSearchPath {
      luaSearchPath = string.format( "%s/?.lua;%s", addSearchPath, package.path );
      //luaSearchPath = string.format( "%s/?.lua", _exp );
   }
   //let! foundPath = package.searchpath( moduleFullName, luaSearchPath ) {
   let! foundPath = Depend.searchpath( moduleFullName, luaSearchPath ) {
      return nil;
   };
   return (foundPath.gsub( "^./", "" ));
}

/**
指定のメタファイルが最新で更新が必要ないか調べる。

@param metaPath メタファイルのパス
@return stem! 最新の場合、ロードしたメタ情報。 最新でない場合は nil。
*/
fn Front.checkUptodateMeta( metaPath:str, addSearchPath:str! ): stem! {
   let! metaObj = self.loadLua( metaPath ) {
      return nil;
   };
   let meta = metaObj@@TransUnit._MetaInfo;
   if meta.$__formatVersion ~= Ver.metaVersion {
      return nil;
   }
   foreach dependInfo, moduleFullName in meta.__dependModuleMap {
      if! let moduleLuaPath = self.searchLuaFile( moduleFullName, addSearchPath ) {
         let moduleLnsPath = moduleLuaPath.gsub( "%.lua$", ".lns" );
         if not Util.getReadyCode( moduleLnsPath, metaPath ) {
            // 依存するモジュールが更新されている場合、
            // 作成済みのメタファイルは使えないので nil を返す。
            return nil;
         }
         let moduleMetaPath = moduleLuaPath.gsub( "%.lua$", ".meta" );
         if Util.existFile( moduleMetaPath ) and
            not Util.getReadyCode( moduleMetaPath, metaPath )
         {
            return nil;
         }
      }
   }
   return meta;
}

     
fn Front.loadModule( mod:str ) mut : stem!, &stem {
   if self.loadedMap[ mod ] == nil {
      if! let luaTxt = self.convertedMap[ mod ] {
         if! let meta = self.loadedMetaMap[ mod ] {
	    self.loadedMap[ mod ] = new LoadInfo( unwrap loadFromLuaTxt( luaTxt ), meta );
         }
         else {
            error( "nothing meta -- %s" ( mod ) );
         }
      }
      else {
         if! let lnsPath = self.searchModule( mod ) {
            let mut luaPath:str! = string.gsub( lnsPath, "%.lns$", ".lua" );

            if! let dir = self.option.outputDir {
               luaPath = self.searchLuaFile( mod, dir );
            }

            let mut loadVal:stem! = nil;
            when! luaPath {
               if Util.getReadyCode( lnsPath, luaPath ) {
	          let metaPath = string.gsub( luaPath, "%.lua$", ".meta" );
	          if Util.getReadyCode( lnsPath, metaPath ) {
	             loadVal = self.loadLua( luaPath );
                     if! loadVal {
                        if! let meta =
                           self.checkUptodateMeta( metaPath, self.option.outputDir )
                        {
	                   self.loadedMap[ mod ] = new LoadInfo( _exp, meta );
                        }
                        else {
                           loadVal = nil;
                        }
                     }
                  }           
               }  
            }
            if loadVal == nil {
	       let meta, mut workVal = self.loadFile(
                  new frontInterface.ImportModuleInfo(), lnsPath, mod, false );
	       self.loadedMap[ mod ] = new LoadInfo( workVal, meta );
            }  
         }
      }
   }
   if! self.loadedMap[ mod ] {
      return unwrap _exp.mod, unwrap _exp.meta;
   }
   error( "load error, %s" ( mod ) );
}


fn Front.loadMeta(
   importModuleInfo:frontInterface.ImportModuleInfo, mod:str ) mut : &stem!
{
   if self.loadedMetaMap[ mod ] == nil {
      if! self.loadedMap[ mod ] {
         self.loadedMetaMap[ mod ] = _exp.meta;
      }
      else {
         if! let lnsPath = self.searchModule( mod ) {
            let mut luaPath:str! = string.gsub( lnsPath, "%.lns$", ".lua" );

            if! let dir = self.option.outputDir {
               luaPath = self.searchLuaFile( mod, dir );
            }  

            let mut meta:stem! = nil;
            when! luaPath {
               if Util.getReadyCode( lnsPath, luaPath ) {
	          let metaPath = string.gsub( luaPath, "%.lua$", ".meta" );
	          if Util.getReadyCode( lnsPath, metaPath ) {
                     meta = self.checkUptodateMeta(
                        metaPath, self.option.outputDir );
                     when! meta {
	                self.loadedMetaMap[ mod ] = meta;
                     }
                  }  
               }  
            }  
            if meta == nil {
	       let metawork, luaTxt =
                  self.loadFile( importModuleInfo, lnsPath, mod, true );
	       self.loadedMetaMap[ mod ] = metawork;
               self.convertedMap[ mod ] = luaTxt@@str;
            }
         }
      }
   }
   return self.loadedMetaMap[ mod ];
}

pub fn Front.dumpTokenize() mut {
   frontInterface.setFront( self );

   let mut parser = self.createPaser();
   while true {
      let! token = parser.getToken() {
         break;
      };
      print( token.kind, token.pos.lineNo, token.pos.column, token.txt );
   }
}

pub fn Front.dumpAst() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   Util.profile(
      self.option.validProf,
      fn() {
	 let ast = self.createAst(
            new frontInterface.ImportModuleInfo(),
            self.createPaser(), mod, getModuleId( self.option.scriptPath, mod ## ),
            nil, .Compile ## );
	 ast.$node.processFilter( new dumpNode.dumpFilter(), "", 0 );
      }, self.option.scriptPath .. ".profi" );
}

pub fn Front.checkDiag() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   Util.setErrorCode( 0 );
   self.createAst( new frontInterface.ImportModuleInfo(), self.createPaser(), mod,
                   getModuleId( self.option.scriptPath, mod ## ), nil, .Diag ## );  
}

pub fn Front.complete() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   self.createAst( new frontInterface.ImportModuleInfo(), self.createPaser(), mod,
                   getModuleId( self.option.scriptPath, mod ## ),
                   self.option.analyzeModule, .Complete, self.option.analyzePos );
}

pub fn Front.createGlue() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   let ast = self.createAst( new frontInterface.ImportModuleInfo(),
                             self.createPaser(), mod,
                             getModuleId( self.option.scriptPath, mod ## ),
                             nil, .Compile ## );          
   let mut glue = new glueFilter.glueFilter( self.option.outputDir );
   ast.$node.processFilter( glue ## );
}

/**
変換結果出力用のストリームを開く。

@return oStream Lua 用ストリーム
@return oStream meta 用ストリーム
@return oStream! 依存ファイル用ストリーム
*/
form OpenOStreamForConvert( mode:ModuleUptodate ): oStream!, oStream!, oStream!;
form CloseOStreamForConvert( stream:oStream!, metaStream:oStream!, dependStream:oStream! );

/**
指定パス path のスクリプトを Lua に変換し、ストリームに出力する。
 
@param convMode 変換モード
@param path 変換対象スクリプトのパス
@param mod 変換対象スクリプトのモジュール
@param byteCompile バイトコンパイルする場合 true
@param stripDebugInfo デバッグ情報を出力する場合 true
@param openOStream 出力先のストリームを open するコールバック
@param closeOStream openOStream で open したストリームをクローズするコールバック
@return 
*/
pub fn Front.convertLuaToStreamFromScript(
   convMode:convLua.ConvMode, path:str, mod:str, byteCompile:bool, stripDebugInfo:bool,
   openOStream:OpenOStreamForConvert, closeOStream:CloseOStreamForConvert! ) mut
{
   fn outputDependInfo( stream:oStream!, metaInfo:&MetaForBuildId! ) {
      when! stream {
         when! metaInfo {
            let mut dependInfo = new OutputDepend.DependInfo( mod );
            foreach moduleInfo, dependMod in metaInfo.__dependModuleMap {
               dependInfo.addImpotModule( dependMod );
            }  
            foreach subMod in metaInfo.__subModuleMap {
               dependInfo.addSubMod( subMod );
            }  
            dependInfo.output( stream );
         }  
         else {
            Util.err( "metaInfo is nil" );
         }
      }
   }

   let moduleId, uptodate, metaInfo, metaCode =
      self.getModuleIdAndCheckUptodate( path, mod );
   if moduleId == frontInterface.ModuleId.tempId {
      Util.err( "not found -- %s" (path) );
   }


   let mut stream, mut metaStream, mut dependsStream = openOStream( uptodate );

   switch uptodate {
      case .Uptodate {
         Util.errorLog( "uptodate -- " .. path );
         outputDependInfo( dependsStream, metaInfo );
      }
      case .NeedUpdate {
         // lns ファイルを解析して Lua/Meta を更新する
         
         when! stream, metaStream {
            let ast = self.createAst(
               new frontInterface.ImportModuleInfo(),
               createPaser( path, mod ), mod, moduleId, nil, .Compile, ## );

            when! dependsStream {
               ast.$node.processFilter( OutputDepend.createFilter( dependsStream ) ## );
            }  

            let mut oStream = stream;
            let mut oMetaStream = metaStream;

            let mut byteStream = new Util.memStream();
            let mut byteMetaStream = new Util.memStream();
            if byteCompile {
               // byteCompile 時は、出力先をメモリに切り替える
               oStream = byteStream;
               oMetaStream = byteMetaStream;
            }  
            
            self.convert(
               ast, path, oStream, oMetaStream, convMode, false );

            if byteCompile {
               // byteCompile 時は、
               // メモリに出力したコードをバイトコンパイルしてセーブする
               stream.write( byteCompileFromLuaTxt( byteStream.$txt, stripDebugInfo ) );
               if metaStream ~= stream {
                  metaStream.write( byteCompileFromLuaTxt( byteMetaStream.$txt, true ) );
               }  
            }  
         }
         else {
            Util.err( "failed to open lua stream or meta stream" );
         }
      }
      case .NeedTouch {
         // Lns は解析せずにメタファイルの更新日時だけ更新する。
         
         Util.errorLog( "touch -- " .. path );
         when! metaStream {
            metaStream.write( metaCode );
         }
         else {
            Util.err( "failed to open meta stream" );
         }
         
         outputDependInfo( dependsStream, metaInfo );
      }
   }
   
   when! closeOStream {
      closeOStream( stream, metaStream, dependsStream );
   }
}

pub fn Front.convertToLua() mut {
   frontInterface.setFront( self );

   let mod = scriptPath2Module( self.option.scriptPath );
   let mut convMode = convLua.ConvMode.Convert;
   if self.option.mode == .LuaMeta {
      convMode = .ConvMeta;
   }

   self.convertLuaToStreamFromScript(
      convMode, self.option.scriptPath, mod,
      self.option.byteCompile, self.option.stripDebugInfo,
      fn ( mode:ModuleUptodate ): oStream!, oStream!, oStream! {
         return io.stdout, io.stdout, self.option.openDepend();
      },
         fn ( stream:oStream!, metaStream:oStream!, dependStream:oStream! ) {
            when! dependStream {
               dependStream.close();
            }
         }

   );
}

pub fn Front.saveToLua() mut {
   frontInterface.setFront( self );

   fn txt2ModuleId( txt:str ) : frontInterface.ModuleId {
      let mut buildIdTxt = txt.gsub( "^_moduleObj.__buildId = ", "" ).gsub( '"', "" );
      return frontInterface.ModuleId.createIdFromTxt( buildIdTxt );
   }
   
   fn checkDiff( oldStream:Parser.TxtStream, newStream:Parser.TxtStream ) : bool, str
   {
      let mut headEndPos = 0;
      let mut tailBeginPos = 0;
      let mut buildIdLine = "";
      while true {
         let newLine = newStream.read( "*l" );
         let oldLine = oldStream.read( "*l" );
         if newLine ~= oldLine {
            let mut cont = false;
            when! newLine, oldLine {
               if oldLine.find( "^_moduleObj.__buildId" ## ) {
                  
                  tailBeginPos = oldStream.$pos;
                  let oldBuildId = txt2ModuleId( oldLine );
                  let newBuildId = txt2ModuleId( newLine );
                  let worlBuildId = frontInterface.ModuleId.createId(
                     newBuildId.$modTime, oldBuildId.$buildCount );
                  buildIdLine = "_moduleObj.__buildId = %q" (worlBuildId.$idStr);
                  cont = true;
               }
            }
            if not cont {
               return false, "";
            }
         }
         else {
            if tailBeginPos == 0 {
               headEndPos = oldStream.$pos;
            }
            if not oldLine {
               let mut txt = "";
               if buildIdLine ~= "" {
                  txt = "%s%s\n%s"
                  ( oldStream.$txt.sub( 1, headEndPos - 1 ),
                    buildIdLine,
                    oldStream.$txt.sub( tailBeginPos## ) );
               }  
               return true, txt;
            }  
         }
      }
   }

   
   let mod = scriptPath2Module( self.option.scriptPath );
   Util.profile(           
      self.option.validProf,       
      fn () {
	 let mut luaPath = self.option.scriptPath.gsub( "%.lns$", ".lua" );
	 let mut metaPath = self.option.scriptPath.gsub( "%.lns$", ".meta" );
	 if self.option.outputDir {
	    let filename = mod.gsub( "%.", "/" );
	    luaPath = "%s/%s.lua" ( self.option.outputDir, filename );
	    metaPath = "%s/%s.meta" ( self.option.outputDir, filename );
	 }

	 if luaPath == self.option.scriptPath {
            Util.errorLog( "%s is illegal filename." );
         }
         else {
            let mut convMode = convLua.ConvMode.Convert;
	    if self.option.mode == "SAVE" {
               convMode = .ConvMeta;
            }

            // .meta ファイルを更新すると、このモジュールを import している
            // モジュール全てを更新する必要がある。
            // しかし、この更新処理は無駄になることが多い。
            // 例えば、モジュール内の local な関数の挙動を変更しただけならば、
            // このモジュールを import しているモジュールには影響がないので、
            // 更新の必要はない。
            // このような無駄な更新処理をスキップできるように、
            // .meta 情報に変更がない場合は、外部モジュールの更新が行なわれないように
            // 制御を行なう。
	    let mut metaFileObj:luaStream! = nil;
            let tempMetaPath = metaPath .. ".tmp";

            self.convertLuaToStreamFromScript(
               convMode, self.option.scriptPath, mod,
               self.option.byteCompile, self.option.stripDebugInfo,
               fn ( mode:ModuleUptodate ): oStream!, oStream!, oStream!
               {
	          let mut stream:oStream! = nil;
                  if self.option.mode ~= "SAVE" or mode ~= .Uptodate {
	             let! mut fileObj = io.open( luaPath, "w" ) {
                        error( "write open error -- %s" (luaPath) );
                     };    
	             stream = fileObj;
                  }

	          let mut metaStream = stream;

                  if mode ~= .Uptodate {
                     let mut convMode = convLua.ConvMode.Convert;
	             if self.option.mode == "SAVE" {
                        convMode = .ConvMeta;
                        if! io.open( tempMetaPath, "w+" ) {
                           metaFileObj = _exp;
		           metaStream = _exp;
                        }     
                        else {
                           error( "write open error -- %s" (metaPath) );
                        }  
                     }
                  }
                  
                  return stream, metaStream, self.option.openDepend();
               },
                  fn ( stream:oStream!, metaStream:oStream!, dependStream:oStream! ) {
                     when! stream {
	                stream.close();
                     }
                     when! dependStream {
                        dependStream.close();
                     }
                     
	             when! metaFileObj {
                        // メタファイルが変っているかどうかを確認し、
                        // 変更がない場合は更新しない。
                        metaFileObj.flush();
                        metaFileObj.seek( "set", 0 );
                        let! newMetaTxt = metaFileObj.read( "*a" ) {
                           Util.err( "faled to read meta. -- %s." (tempMetaPath) );
                        };
	                metaFileObj.close();
                        let mut oldMetaTxt = "";
                        if! let mut oldFileObj = io.open( metaPath ## ) {
                           oldMetaTxt = unwrap oldFileObj.read( "*a" ) default "";
                           oldFileObj.close();
                        }
                        
                        let sameFlag, txt = checkDiff(
                           new Parser.TxtStream( oldMetaTxt ),
                           new Parser.TxtStream( newMetaTxt ) );
                        if not sameFlag {
                           os.rename( tempMetaPath, metaPath );
                        }        
                        else {
                           os.remove( tempMetaPath );
                           if txt ~= "" {
                              if! let mut fileObj = io.open( metaPath, "w" ) {
                                 fileObj.write( txt );
                                 fileObj.close();
                              }
                           }
                        }        
	             }
                  });            
         }
      }, self.option.scriptPath .. ".profi" );
}


pub fn Front.exec() mut
{
   switch self.option.mode {
      case .Token {
         self.dumpTokenize();
      }
      case .Ast {
         self.dumpAst();
      }
      case .Diag {
         self.checkDiag();
      }
      case .Complete {
         self.complete();
      }
      case .Glue {
         self.createGlue();
      }
      case .Lua, .LuaMeta {
         self.convertToLua();
      }
      case .Save, .SaveMeta {
         self.saveToLua();
      }
      case .Exec {
         frontInterface.setFront( self );
         
         self.loadModule( scriptPath2Module( self.option.scriptPath ) );
      }
      default {
         print( "illegal mode" );
      }
   }
}

pub fn exec( args: str[] ) {
   let version = tonumber( _VERSION.gsub( "^[^%d]+", "" ), nil );

   if version < 5.1 {
      io.stderr.write(
         string.format( "LuneScript doesn't support this lua version(%s). %s\n",
        	        version, "please use the version >= 5.1.") );
      os.exit( 1 );
   }  
   
   let mut option = Option.analyze( args );
   let mut front = new Front( option );

   front.exec();
}
