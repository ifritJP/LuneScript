/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.Types;
import lune.base.Str;
import lune.base.frontInterface;
import lune.base.Parser;
import lune.base.convLua;
import lune.base.convCC;
import lune.base.convGo;
import lune.base.TransUnit;
import lune.base.Util;
import lune.base.Option;
import lune.base.dumpNode;
import lune.base.glueFilter;
import lune.base.Depend;
import lune.base.OutputDepend;
import lune.base.Ver;
import lune.base.LuaVer;
import lune.base.Log;
import lune.base.Formatter;
import lune.base.Testing;
import lune.base.GoMod;
//import lune.base.TestCtrl;
import lune.base.Meta;
import lune.base.Nodes;
//import lune.base.ConvNodes;

_lune_control ignore_symbol_;


Depend.setup( fn(ver:int) {
   LuaVer.setCurVer( ver );
});


let forceUpdateMeta = true;

class LoadInfo {
   pub let mut mod:Luaval<&stem>;
   pub let mut meta:Luaval<&stem>;
}

class Front extend (frontInterface.frontInterface) {
   let mut option:&Option.Option;
   /** import 済みのモジュールと、その LoadInfoの紐付け。 */ 
   let mut loadedMap:Map<str,LoadInfo>;
   /** import 済みの Test ビルド用モジュールと、その LoadInfoの紐付け。 */ 
   let mut loadedMapTest:Map<str,LoadInfo>;
   let mut loadedMetaMap:Map<str,Luaval<&stem>>;
   let mut convertedMap:Map<str,str>;
   let gomodMap:&GoMod.ModInfo;

   /**
front で import しているものは、
loadedMap で管理する前にシステムにロードされているため、
後で import すると多重ロードになってしまう。
多重ロードを防ぐため、 loadedMap で管理する前にロードされているモジュールを保持する。
*/
   let preloadedModMap:&Map<str,Luaval<&stem>>;

   
   pub fn __init( option:&Option.Option ) {
      self.gomodMap = GoMod.getGoMap( option );
      self.option = option;
      self.loadedMap = {};
      self.loadedMapTest = {};
      self.loadedMetaMap = {};
      self.convertedMap = {};
      

      frontInterface.setFront( self );

      let mut loadedMap:Map<str,Luaval<&stem>> = {};
      foreach modval, mod in Depend.getLoadedMod() {
         // pending:
         if mod == "lune.base.Testing" {
            loadedMap[ mod ] = modval;
         }
         if option.testing and modval.__enableTest or
            not option.testing and modval.__enableTest
         {
            loadedMap[ mod ] = modval;
         }
      }
      self.preloadedModMap = loadedMap;
   }

   fn getLoadInfo( mod:str ) : LoadInfo! {
      if self.option.testing {
         return self.loadedMapTest[ mod ];
      }
      return self.loadedMap[ mod ];
   }

   fn setLoadInfo( mod:str, info:LoadInfo ) mut {
      if self.option.testing {
         self.loadedMapTest[ mod ] = info;
      }
      self.loadedMap[ mod ] = info;
   }
   

   pub fn loadModule( mod:str ) mut: Luaval<&stem>!, Luaval<&stem>;
   pub fn loadMeta(
      importModuleInfo:frontInterface.ImportModuleInfo, mod:str ) mut: Luaval<&stem>!;
   pub fn loadFromLnsTxt( importModuleInfo:frontInterface.ImportModuleInfo,
                          name:str, txt:str ): Luaval<&stem>;
   pub fn getLuaModulePath( mod:str ) : str;
   pub fn searchModule( mod:str ): str!;
   pub fn error( message:str );
}

fn Front.error( message:str ) {
   Util.errorLog( message );
   Util.printStackTrace();
   os.exit( 1 );
}

fn Front.loadLua( path:str ):Luaval<&stem>! {
   let chunk, err = loadfile( path );
   when! chunk {
      return unwrap chunk(##);
   }
   Util.errorLog( unwrap err default "load error -- %s." (path));
   return nil;
}

fn createPaser( path:str, mod:str ): Parser.Parser
{
   let mut parser = Parser.StreamParser.create( path, false, mod );
   if! parser {
      return _exp;
   }
   error( "failed to open " .. path );
}

pub fn scriptPath2Module( path:str ):str {
   return Util.scriptPath2Module( path );
}

fn Front.createPaser( scriptPath:str ): Parser.Parser
{
   let mod = scriptPath2Module( scriptPath );
   return createPaser( scriptPath, mod );
}


fn Front.createAst(
   importModuleInfo:frontInterface.ImportModuleInfo,
   parser:Parser.Parser, mod:str, moduleId:&frontInterface.ModuleId, analyzeModule:str!,
   analyzeMode:TransUnit.AnalyzeMode, pos:&Parser.Position! ): TransUnit.ASTInfo
{
   let mut transUnit = new TransUnit.TransUnit(
      moduleId, importModuleInfo, new convLua.MacroEvalImp(),
      analyzeModule, analyzeMode, pos, self.option.targetLuaVer,
      self.option.transCtrlInfo );
   return transUnit.createAST( parser, false, mod );
}

fn Front.convert(
   ast:TransUnit.ASTInfo, streamName:str,
   mut stream:oStream, mut metaStream:oStream, convMode:convLua.ConvMode, inMacro:bool )
{
   let mut conv = convLua.createFilter(
      streamName, stream, metaStream, convMode, inMacro,
      ast.$moduleTypeInfo, ast.$processInfo, ast.$moduleSymbolKind,
      self.option.useLuneModule, self.option.targetLuaVer,
      self.option.testing, self.option.useIpairs );
   ast.$node.processFilter( conv, new convLua.Opt( ast.$node ) );
}

fn loadFromChunk( chunk:Luaval<form>!, err:str! ): Luaval<&stem>! {
   when! err {
      Util.errorLog( err );
   }
   when! chunk {
      if! let mut work = chunk(##) {
         return work@@Luaval<stem>;
      }
      return nil;
   }
   error( "failed to error" );
}

fn loadFromLuaTxt( txt:str ): Luaval<&stem>! {
   //--print( txt )
   return loadFromChunk( _load( txt ## )** );
}

fn byteCompileFromLuaTxt( txt:str, stripDebugInfo:bool ): str {
   let chunk, err = _load( txt ## );
   when! chunk {
      return string.dump( chunk, stripDebugInfo );
   }
   error( unwrap err default "load error" );
}


fn Front.convertFromAst(
   ast:TransUnit.ASTInfo, streamName:str, mode:convLua.ConvMode ) : str, str
{
   let mut stream = new Util.memStream();
   let mut metaStream = new Util.memStream();

   self.convert( ast, streamName, stream, metaStream, mode, false );

   return metaStream.$txt, stream.$txt;
}

/**
マクロ解析用
*/
fn Front.loadFromLnsTxt(
   importModuleInfo:frontInterface.ImportModuleInfo, name:str, txt:str ): Luaval<&stem>
{
   let mut transUnit = new TransUnit.TransUnit(
      frontInterface.ModuleId.tempId,
      importModuleInfo, new convLua.MacroEvalImp(),
      nil, nil, nil, self.option.targetLuaVer, self.option.transCtrlInfo );
   let mut stream = new Parser.TxtStream( txt );
   let mut parser = new Parser.StreamParser( stream, name, false );

   let mut ast = transUnit.createAST( parser, false, nil );

   let _, luaTxt = self.convertFromAst( ast, name, .Exec );
   return unwrap loadFromLuaTxt( luaTxt );
}

class DependMetaInfo extend (Mapping) {
   pub let use:bool;
   pub let buildId:str;
}

class MetaForBuildId extend (Mapping) {
   pub let __buildId:str;
   pub let __dependModuleMap: &Map<str,&DependMetaInfo>;
   pub let __subModuleMap: &List<str>;
   pub let __enableTest:bool;

   pub fn createModuleId(): &frontInterface.ModuleId {
      return frontInterface.ModuleId.createIdFromTxt( self.__buildId );
   }
}

pub static fn MetaForBuildId.LoadFromMeta( metaPath:str ): &MetaForBuildId!, str! {
   if! let mut fileObj = io.open( metaPath## ) {
      let luaCode = fileObj.read( "*a" );
      fileObj.close();
      when! luaCode {
         let meta = MetaForBuildId._fromStem(
            expandLuavalMap( loadFromLuaTxt( luaCode )) );
         return meta, luaCode;
      }
   }
   return nil, nil;
}


fn getMetaInfo( lnsPath:str, mod:str, outdir:str! ): &MetaForBuildId!, str, str {
   let mut moduleMetaPath = lnsPath;
   when! outdir {
      moduleMetaPath = "%s/%s" ( outdir , (mod.gsub( "%.", "/" )) );
   }
   moduleMetaPath = moduleMetaPath.gsub( "%.lns$", ".meta" );
   if! let meta, metaCode = MetaForBuildId.LoadFromMeta( moduleMetaPath ) {
      return meta, moduleMetaPath, metaCode;
   }
   return nil, moduleMetaPath, "";
}

fn Front.searchModuleFile( mod:str, suffix:str, addPath:str! ): str!
{
   _match self.gomodMap.convLocalModulePath( mod, suffix ) {
      case .NotGo {
      }
      case .NotFound {
         return nil;
      }
      case .Found( path ) {
         return path;
      }
   }
   
   let mut lnsSearchPath = package.path;
   when! addPath {
      lnsSearchPath = string.format( "%s/?%s;%s", addPath, suffix, package.path );
   }
   lnsSearchPath = lnsSearchPath.gsub( "%.lua$", suffix );
   lnsSearchPath = lnsSearchPath.gsub( "%.lua;", suffix .. ";" );

   let! foundPath = Depend.searchpath( mod, lnsSearchPath ) {
      return nil;
   };
   return (foundPath.gsub( "^./", "" ));
}

/**
指定の .lns ファイルのパス lnsPath の、ModuleId を取得する。

@param lnsPath .lns ファイルのパス
@param mod .lns ファイルのモジュール名
@param outdir .meta ファイルの出力先ディレクトリ。 nil の場合は .lns ファイルと同じ。
@param metaInfo .lns ファイルのメタ情報。 nil の場合は、この関数内で読み込む。
@return &frontInterface.ModuleId

lnsPath が存在しない場合、 frontInterface.ModuleId.tempId を返す。
メタ情報が有効な場合、 そのメタ情報に記載されている buildCount の ModuleId を返す。
メタ情報が無効な場合、 buildCount 0 の ModuleId を返す。
*/
fn getModuleId( lnsPath:str, mod:str, outdir:str!, mut metaInfo:&MetaForBuildId! ):
   &frontInterface.ModuleId
{
   let mut buildCount = 0;
   let! mut fileTime = Depend.getFileLastModifiedTime( lnsPath ) {
      return frontInterface.ModuleId.tempId;
   };
   if not metaInfo {
      metaInfo = getMetaInfo( lnsPath, mod, outdir );
   }
   when! metaInfo {
      let buildId = metaInfo.createModuleId();
      buildCount = buildId.$buildCount;
   }
   return frontInterface.ModuleId.createId( fileTime, buildCount );
}

alge ModuleUptodate {
   /** ファイルの更新が必要 */
   NeedUpdate,
   /** .meta ファイルの日付だけ更新が必要 */
   NeedTouch( metaCode:str, metaBuildId:&MetaForBuildId ),
   /** 最新で処理不要 */
   Uptodate( metaBuildId:&MetaForBuildId ),
}

/**
lnsPath で指定する lns ファイルを更新する必要があるかどうか確認する。

次の条件を全て満す時に uptodate として判断する。
- .lns ファイルに対応する .meta ファイルが存在し、更新日時が .meta の方が新しい
- .meta に記載の依存ファイルが存在し、更新日時に変更がない

@param lnsPath lns ファイルパス
@param mod lnsPath のモジュール
@return frontInterface.ModuleId lnsPath のモジュール ID
@return bool uptodate かどうか
@return &MetaForBuildId! lnsPath ファイルに対応するメタ情報
@return str メタ情報内容そのものの文字列
*/
fn Front.getModuleIdAndCheckUptodate( lnsPath:str, mod:str ):
&frontInterface.ModuleId, ModuleUptodate
{
   let mut uptodate = ModuleUptodate.NeedUpdate;

   if self.option.transCtrlInfo.uptodateMode == .Force {
      // 必ず NeedUpdate にする
      return frontInterface.ModuleId.tempId, uptodate;
   }

   /**
dependModuleMap のモジュールのメタファイルが、 metaTime よりも古いかどうかを確認する。

metaTime
   */
   fn checkDependUptodate(
      metaTime:real, metaInfo:&MetaForBuildId, metaCode:str ): ModuleUptodate
   {
      foreach dependItem, depMod in metaInfo.__dependModuleMap {
         let! modMetaPath = self.searchModuleFile(
            depMod, ".meta", self.option.outputDir )
         {
            // .meta ファイルがない場合、更新が必要
            Log._log( .Debug, `{ return "NeedUpdate"; } );
            return ModuleUptodate.NeedUpdate;
         };
         let! time = Depend.getFileLastModifiedTime( modMetaPath ) {
            // .meta ファイルの更新日時取得が出来ない場合、更新が必要
            Log._log( .Debug, `{ return "NeedUpdate"; } );
            return ModuleUptodate.NeedUpdate;
         };
         if time > metaTime {
            // インポート対象のモジュールのメタファイルの更新日時が
            // ビルド対象のモジュールのメタファイルよりも新しい場合、
            // .meta の内容を確認する。
            let! dependMeta = MetaForBuildId.LoadFromMeta( modMetaPath ) {
               Log._log( .Debug, `{ return "NeedUpdate"; } );
               return ModuleUptodate.NeedUpdate;
            };
            let orgMetaModuleId = frontInterface.ModuleId.createIdFromTxt(
               dependItem.buildId );
            let metaModuleId = dependMeta.createModuleId();
            if metaModuleId.$buildCount ~= 0 and
               metaModuleId.$buildCount ~= orgMetaModuleId.$buildCount
            {
               // buildCount が一致しない場合、更新する。
               Log._log( .Debug, `{
                  return "NeedUpdate: %s, %d, %d" ( modMetaPath,
                                                    metaModuleId.$buildCount,
                                                    orgMetaModuleId.$buildCount );
               } );
               return ModuleUptodate.NeedUpdate;
            }
         }
      }
      if self.option.transCtrlInfo.uptodateMode == .Touch {
         return ModuleUptodate.NeedTouch( metaCode, metaInfo );
      }
      return ModuleUptodate.Uptodate( metaInfo );
   }


   let metaInfo, metaPath, metaCode = getMetaInfo( lnsPath, mod, self.option.outputDir );

   when! metaInfo {
      // meta 情報があれば、 moduleId から更新済みかどうかを確認する
      if metaInfo.__enableTest == self.option.testing {
         let buildId = frontInterface.ModuleId.createIdFromTxt( metaInfo.__buildId );
         if buildId ~= frontInterface.ModuleId.tempId {
            let lnsTime = Depend.getFileLastModifiedTime( lnsPath );
            let metaTime = Depend.getFileLastModifiedTime( metaPath );
            when! lnsTime, metaTime {
               if lnsTime == buildId.$modTime {
                  // 更新済みならば、依存ファイルの状態を確認する
                  uptodate = checkDependUptodate( metaTime, metaInfo, metaCode );
               }
            }
         }
      }
      else {
         // テストコードを持つモジュールは、テストモードがあっていないものは更新が必要
      }
   }
   else {
      Log._log( .Debug, `{ return "not found meta"; } );
   }

   let moduleId = getModuleId( lnsPath, mod, self.option.outputDir, metaInfo );
   if moduleId == frontInterface.ModuleId.tempId {
      Util.err( "not found -- %s" ( lnsPath ) );
   }
   return moduleId, uptodate;
}

/**
指定 stream 内の LuneScript をコンパイルし、 Lua コードを取得する。
*/
pub fn Front.convertLns2LuaCode(
   importModuleInfo:frontInterface.ImportModuleInfo,
   stream:iStream, streamName:str ): str
{
   let mod = scriptPath2Module( streamName );
   let mut ast = self.createAst(
      importModuleInfo,
      new Parser.StreamParser( stream, streamName, false ), mod,
      frontInterface.ModuleId.createId( 0.0, 0 ), nil, .Compile ## );

   let _, luaTxt = self.convertFromAst( ast, streamName, convLua.ConvMode.Exec );

   return luaTxt;
}


/**
指定 path の LuneScript をロードし、 meta 情報と変換した Lua コードを取得する。
*/
fn Front.loadFileToLuaCode(
   importModuleInfo:frontInterface.ImportModuleInfo,
   path:str, mod:str ): Luaval<&stem>, str
{
   let mut ast = self.createAst( importModuleInfo, createPaser( path, mod ),
                                 mod, getModuleId( path, mod ## ), nil, .Compile, nil );

   let mut metaTxt, luaTxt = self.convertFromAst( ast, path, convLua.ConvMode.Exec );

   if self.option.updateOnLoad {
      fn saveFile( suffix:str, txt:str, byteCompile:bool,
                   stripDebugInfo:bool, checkUpdate:bool ){
         let mut newpath = "";
         if! let dir = self.option.outputDir {
            newpath = "%s/%s%s" ( dir, mod.gsub( "%.", "/" ), suffix );
         }
         else {
            newpath = path.gsub( ".lns$", suffix );
         }
         let mut saveTxt = txt;
         if byteCompile {
            saveTxt = byteCompileFromLuaTxt( saveTxt, stripDebugInfo );
         }
         if not forceUpdateMeta and checkUpdate {
            if! let mut fileObj = io.open( newpath ## ) {
               let oldTxt = fileObj.read( "*a" );
               if saveTxt == oldTxt {
                  // 同じ場合はセーブしない
                  return;
               }
            }
         }
         if! let mut fileObj = io.open( newpath, "w" ) {
            fileObj.write( saveTxt );
            fileObj.close();
         }
      }
      saveFile( ".lua", luaTxt, self.option.byteCompile,
                self.option.stripDebugInfo, false );
      saveFile( ".meta", metaTxt, self.option.byteCompile, true, true );
   }

   let mut meta = unwrap loadFromLuaTxt( metaTxt );
   return meta, luaTxt;
}


/**
指定 path の LuneScript をロードし、
 meta 情報と変換した Lua コードをロードして実行した結果のオブジェクトを返す。

*/
fn Front.loadFile(
   importModuleInfo:frontInterface.ImportModuleInfo,
   path:str, mod:str ): Luaval<&stem>, Luaval<&stem>
{
   Log._log2( .Info, "start %s:%s" ( __func__, mod ) );
   
   let meta, luaTxt = self.loadFileToLuaCode( importModuleInfo, path, mod );
   
   if! let mut preLoadInfo = self.preloadedModMap[ mod ] {
      return meta, preLoadInfo;
   }
   return meta, unwrap loadFromLuaTxt( luaTxt );
}



fn Front.searchModule( mod:str ): str! {
   return self.searchModuleFile( mod, ".lns", nil );
}

fn Front.searchLuaFile( moduleFullName:str, addSearchPath:str! ) : str! {
   return self.searchModuleFile( moduleFullName, ".lua", addSearchPath );
   // let mut luaSearchPath = package.path;
   // when! addSearchPath {
   //    luaSearchPath = string.format( "%s/?.lua;%s", addSearchPath, package.path );
   //    //luaSearchPath = string.format( "%s/?.lua", _exp );
   // }
   // //let! foundPath = package.searchpath( moduleFullName, luaSearchPath ) {
   // let! foundPath = Depend.searchpath( moduleFullName, luaSearchPath ) {
   //    return nil;
   // };
   // return (foundPath.gsub( "^./", "" ));
}

/**
指定のメタファイルが最新で更新が必要ないか調べる。

@param metaPath メタファイルのパス
@return stem! 最新の場合、ロードしたメタ情報。 最新でない場合は nil。
*/
fn Front.checkUptodateMeta( metaPath:str, addSearchPath:str! ): Luaval<&stem>! {
   let! metaObj = self.loadLua( metaPath ) {
      Log._log( .Warn, `{ return "load error -- %s" ( metaPath ); } );
      return nil;
   };
   let meta = metaObj@@=Meta._MetaInfo;
   if meta.$__formatVersion ~= Ver.metaVersion {
      Log._log( .Warn, `{ return "unmatch meta version -- %s" ( metaPath ); } );
      return nil;
   }
   if meta.$__hasTest {
      // テストコードを持つモジュールは、テストモードがあっていないものは更新が必要
      if meta.$__enableTest ~= self.option.testing {
         Log._log( .Warn, `{ return "unmatch test setting -- %s" ( metaPath ); } );
         return nil;
      }
   }
   
   foreach _, moduleFullName in meta.__dependModuleMap {
      if! let lnsPath = self.searchModule( moduleFullName ) {
         if! let moduleLuaPath = self.searchLuaFile( moduleFullName, addSearchPath ) {
            if not Util.getReadyCode( lnsPath, metaPath ) {
               // 依存するモジュールが更新されている場合、
               // 作成済みのメタファイルは使えないので nil を返す。
               Log._log( .Warn, `{ return "not ready -- %s, %s"
                                  ( lnsPath, metaPath ); } );
               return nil;
            }
            let moduleMetaPath = moduleLuaPath.gsub( "%.lua$", ".meta" );
            if Depend.existFile( moduleMetaPath ) and
               not Util.getReadyCode( moduleMetaPath, metaPath )
            {
               Log._log( .Warn, `{ return "not ready -- %s, %s"
                                  ( moduleMetaPath, metaPath ); } );
               return nil;
            }
         } else {
            Log._log( .Warn, `{ return "not found .lua file for -- %s"
                               ( moduleFullName ); } );
            return nil;
         }
      } else {
         Log._log( .Warn, `{ return "not found .lns file -- %s" ( moduleFullName); } );
         return nil;
      }
   }
   return meta;
}


/**
mod のモジュールをロードする。

@return Luaval<&stem>! モジュール情報
@return Luaval<&stem> META 情報
*/
fn Front.loadModule( mut mod:str ) mut : Luaval<&stem>!, Luaval<&stem> {
   mod = self.gomodMap.getLuaModulePath( mod );
   
   if not self.getLoadInfo( mod ) {
      if! let luaTxt = self.convertedMap[ mod ] {
         if! let meta = self.loadedMetaMap[ mod ] {
            self.setLoadInfo(
               mod, new LoadInfo( unwrap loadFromLuaTxt( luaTxt ), meta ) );
         }
         else {
            error( "nothing meta -- %s" ( mod ) );
         }
      }
      else {
         if! let lnsPath = self.searchModule( mod ) {
            let mut luaPath:str! = string.gsub( lnsPath, "%.lns$", ".lua" );

            if! let dir = self.option.outputDir {
               luaPath = self.searchLuaFile( mod, dir );
            }

            let mut loadVal:Luaval<&stem>! = nil;
            when! luaPath {
               if Util.getReadyCode( lnsPath, luaPath ) {
	          let metaPath = string.gsub( luaPath, "%.lua$", ".meta" );
	          if Util.getReadyCode( lnsPath, metaPath ) {
                     if! let preLoadInfo = self.preloadedModMap[ mod ] {
                        loadVal = preLoadInfo;
                     }
                     else {
	                loadVal = self.loadLua( luaPath );
                     }
                     if! loadVal {
                        if! let meta =
                           self.checkUptodateMeta( metaPath, self.option.outputDir )
                        {
	                   self.setLoadInfo( mod, new LoadInfo( _exp, meta ) );
                        }
                        else {
                           loadVal = nil;
                        }
                     }
                  }
               }
            }
            if loadVal == nil {
	       let meta, mut workVal = self.loadFile(
                  new frontInterface.ImportModuleInfo(), lnsPath, mod );
	       self.setLoadInfo( mod, new LoadInfo( workVal, meta ) );
            }
         }
      }
   }
   if! self.getLoadInfo( mod ) {
      //TestCtrl.add( mod, _exp.mod );
      return _exp.mod, _exp.meta;
   }
   error( "load error, %s" ( mod ) );
}


pub fn Front.getLuaModulePath( mod:str ) : str {
   return self.gomodMap.getLuaModulePath( mod );
}

fn Front.loadMeta(
   importModuleInfo:frontInterface.ImportModuleInfo, mut mod:str ) mut : Luaval<&stem>!
{
   mod = self.gomodMap.getLuaModulePath( mod );
   
   if self.loadedMetaMap[ mod ] == nil {
      if! self.getLoadInfo( mod ) {
         self.loadedMetaMap[ mod ] = _exp.meta;
      }
      else {
         if! let lnsPath = self.searchModule( mod ) {
            let mut luaPath:str! = string.gsub( lnsPath, "%.lns$", ".lua" );

            if! let dir = self.option.outputDir {
               luaPath = self.searchLuaFile( mod, dir );
            }

            let mut meta:Luaval<&stem>! = nil;
            when! luaPath {
               if Util.getReadyCode( lnsPath, luaPath ) {
	          let metaPath = string.gsub( luaPath, "%.lua$", ".meta" );
	          if Util.getReadyCode( lnsPath, metaPath ) {
                     meta = self.checkUptodateMeta(
                        metaPath, self.option.outputDir );
                     when! meta {
	                self.loadedMetaMap[ mod ] = meta;
                     }
                  } else {
                     Log._log( .Warn, `{ return "%s not ready meta %s, %s"
                                         ( mod, lnsPath, metaPath ); } );
                  }
               } else {
                     Log._log( .Warn, `{ return "%s not ready lua %s, %s"
                                         ( mod, lnsPath, luaPath ); } );
               }
            } else {
               Log._log( .Warn, `{ return "%s not found lua in %s"
                                   ( mod, self.option.outputDir ); } );
            }
            if meta == nil {
	       let metawork, luaTxt =
                  self.loadFileToLuaCode( importModuleInfo, lnsPath, mod );
	       self.loadedMetaMap[ mod ] = metawork;
               self.convertedMap[ mod ] = luaTxt;
            }
         }
      }
   }
   return self.loadedMetaMap[ mod ];
}

pub fn Front.dumpTokenize( scriptPath:str ) mut {
   //frontInterface.setFront( self );

   let mut parser = self.createPaser( scriptPath );
   while true {
      let! token = parser.getToken() {
         break;
      };
      print( token.kind.$_txt, token.pos.lineNo, token.pos.column, token.txt );
   }
}

pub fn Front.dumpAst( scriptPath:str ) mut {
   //frontInterface.setFront( self );

   let mod = scriptPath2Module( scriptPath );
   Depend.profile(
      self.option.validProf,
      fn() {
	 let mut ast = self.createAst(
            new frontInterface.ImportModuleInfo(),
            self.createPaser( scriptPath ), mod, getModuleId( scriptPath, mod ## ),
            nil, .Compile ## );
	 ast.$node.processFilter(
            dumpNode.createFilter( ast.$moduleTypeInfo, ast.$processInfo, io.stdout ),
            new dumpNode.Opt( "", 0 ) );
      }, scriptPath .. ".profi" );
}

pub fn Front.format( scriptPath:str ) mut {
   //frontInterface.setFront( self );

   let mod = scriptPath2Module( scriptPath );

   let mut ast = self.createAst(
      new frontInterface.ImportModuleInfo(),
      self.createPaser( scriptPath ), mod, getModuleId( scriptPath, mod ## ),
      nil, .Compile ## );
   ast.$node.processFilter( Formatter.createFilter( ast.$moduleTypeInfo, io.stdout ),
                            new Formatter.Opt( ast.$node ) );
}

pub fn Front.checkDiag( scriptPath:str ) mut {
   //frontInterface.setFront( self );

   let mod = scriptPath2Module( scriptPath );
   Util.setErrorCode( 0 );
   self.createAst( new frontInterface.ImportModuleInfo(),
                   self.createPaser( scriptPath ), mod,
                   getModuleId( scriptPath, mod ## ), nil, .Diag ## );
}

pub fn Front.complete( scriptPath:str ) mut {
   let mod = scriptPath2Module( scriptPath );
   self.createAst( new frontInterface.ImportModuleInfo(),
                   self.createPaser( scriptPath ), mod,
                   getModuleId( scriptPath, mod ## ),
                   self.option.analyzeModule, .Complete, self.option.analyzePos );
}

pub fn Front.inquire( scriptPath:str ) mut {
   let mod = scriptPath2Module( scriptPath );
   self.createAst( new frontInterface.ImportModuleInfo(),
                   self.createPaser( scriptPath ), mod,
                   getModuleId( scriptPath, mod ## ),
                   self.option.analyzeModule, .Inquire, self.option.analyzePos );
}


pub fn Front.createGlue(scriptPath:str) mut {
   //frontInterface.setFront( self );

   let mod = scriptPath2Module( scriptPath );
   let mut ast = self.createAst(
      new frontInterface.ImportModuleInfo(), self.createPaser( scriptPath ), mod,
      getModuleId( scriptPath, mod ## ), nil, .Compile ## );
   let mut filter = glueFilter.createFilter( self.option.outputDir );
   ast.$node.processFilter( filter, 0 );
}

/**
変換結果出力用のストリームを開く。

@return oStream Lua 用ストリーム
@return oStream meta 用ストリーム
@return oStream! 依存ファイル用ストリーム
*/
form OpenOStreamForConvert( mode:ModuleUptodate ): oStream!, oStream!, oStream!;
form CloseOStreamForConvert( stream:oStream!, metaStream:oStream!, dependStream:oStream! );

/**
指定パス path のスクリプトを Lua に変換し、ストリームに出力する。

@param convMode 変換モード
@param path 変換対象スクリプトのパス
@param mod 変換対象スクリプトのモジュール
@param byteCompile バイトコンパイルする場合 true
@param stripDebugInfo デバッグ情報を出力する場合 true
@param openOStream 出力先のストリームを open するコールバック
@param closeOStream openOStream で open したストリームをクローズするコールバック
@return
*/
pub fn Front.convertLuaToStreamFromScript(
   parser:Parser.Parser!, moduleId:&frontInterface.ModuleId,
   uptodate:ModuleUptodate, convMode:convLua.ConvMode, path:str, mod:str,
   byteCompile:bool, stripDebugInfo:bool, openOStream:OpenOStreamForConvert,
   closeOStream:CloseOStreamForConvert! ) mut : TransUnit.ASTInfo!
{
   fn outputDependInfo( stream:oStream!, metaInfo:&MetaForBuildId! ) {
      when! stream {
         when! metaInfo {
            let mut dependInfo = new OutputDepend.DependInfo( mod );
            foreach _, dependMod in metaInfo.__dependModuleMap {
               dependInfo.addImpotModule( dependMod );
            }
            foreach subMod in metaInfo.__subModuleMap {
               dependInfo.addSubMod( subMod );
            }
            dependInfo.output( stream );
         }
         else {
            Util.err( "metaInfo is nil" );
         }
      }
   }

   let mut streamDst, mut metaStreamDst, mut dependsStreamDst = openOStream( uptodate );
   let mut streamMem = new Util.memStream();
   let mut metaStreamMem = new Util.memStream();
   let mut dependsStreamMem = new Util.memStream();

   let mut stream:oStream!;
   let mut metaStream:oStream!;
   let mut dependsStream:oStream!;
   
   if Str.isValidStrBuilder() {
      stream = streamMem;
      metaStream = metaStreamMem;
      dependsStream = dependsStreamMem;
   } else {
      stream = streamDst;
      metaStream = metaStreamDst;
      dependsStream = dependsStreamDst;
   }

   let mut retAst:TransUnit.ASTInfo! = nil;

   match uptodate {
      case .Uptodate( metaInfo ) {
         Util.errorLog( "uptodate -- " .. path );
         outputDependInfo( dependsStream, metaInfo );
      }
      case .NeedUpdate {
         // lns ファイルを解析して Lua/Meta を更新する

         when! stream, metaStream {
            let mut ast = self.createAst(
               new frontInterface.ImportModuleInfo(),
               createPaser( path, mod ), mod, moduleId, nil, .Compile, ## );
            retAst = ast;

            when! dependsStream {
               ast.$node.processFilter( OutputDepend.createFilter( dependsStream ), 1 );
            }

            let mut outStream = stream;
            let mut oMetaStream = metaStream;

            let mut byteStream = new Util.memStream();
            let mut byteMetaStream = new Util.memStream();
            if byteCompile {
               // byteCompile 時は、出力先をメモリに切り替える
               outStream = byteStream;
               oMetaStream = byteMetaStream;
            }

            self.convert( ast, path, outStream, oMetaStream, convMode, false );

            if byteCompile {
               // byteCompile 時は、
               // メモリに出力したコードをバイトコンパイルしてセーブする
               stream.write( byteCompileFromLuaTxt( byteStream.$txt, stripDebugInfo ) );
               if metaStream ~= stream {
                  metaStream.write( byteCompileFromLuaTxt( byteMetaStream.$txt, true ) );
               }
            }
         }
         else {
            Util.err( "failed to open lua stream or meta stream" );
         }
      }
      case .NeedTouch( metaCode, metaInfo ) {
         // Lns は解析せずにメタファイルの更新日時だけ更新する。

         Util.errorLog( "touch -- " .. path );
         if self.option.mode == .SaveMeta {
            when! metaStream {
               metaStream.write( metaCode );
            }
            else {
               Util.err( "failed to open meta stream" );
            }
         }

         outputDependInfo( dependsStream, metaInfo );
      }
   }

   if Str.isValidStrBuilder() {
      macro _write( streamName:str) {
         {
            let dstStream = "%sDst" (streamName);
            let memStream = "%sMem" (streamName);
         }
         when! ,,,dstStream {
            ,,,dstStream.write( ,,,memStream.$txt );
         }
      }
      _write( "stream" );
      _write( "metaStream" );
      _write( "dependsStream" );
   }

   
   when! closeOStream {
      closeOStream( stream, metaStream, dependsStream );
   }

   return retAst;
}

fn Front.createGoOption( scriptPath:str ) : &convGo.Option {
   let packageName;
   if! self.option.packageName {
      packageName = _exp;
   } else {
      if not scriptPath.find( "/" ## ) {
         // "/" がない場合は main
         packageName = "main";
      }
      else {
         let parentPath = scriptPath.gsub( "/[^/]+$", "" ).gsub( ".*/", "" );
         if #parentPath == 0 {
            // root ファイルの場合
            packageName = "main";
         } elseif parentPath == "." {
            packageName = "main";
         } elseif parentPath == ".." {
            packageName = "main";
         } else {
            packageName = parentPath.gsub( "[^%w]", "" );
         }
      }
   }
   return new convGo.Option( packageName, self.option.appName, self.option.mainModule );
}

fn Front.convertToLua( scriptPath:str ) mut {
   //frontInterface.setFront( self );

   let mod = scriptPath2Module( scriptPath );
   let mut convMode = convLua.ConvMode.Convert;
   if self.option.mode == .LuaMeta {
      convMode = .ConvMeta;
   }

   let mut parser = createPaser( scriptPath, mod );
   let mut ast = self.convertLuaToStreamFromScript(
      parser, frontInterface.ModuleId.tempId,
      ModuleUptodate.NeedUpdate, convMode, scriptPath, mod,
      self.option.byteCompile, self.option.stripDebugInfo,
      fn ( mode:ModuleUptodate ): oStream!, oStream!, oStream! {
         return io.stdout, io.stdout, self.option.openDepend( nil );
      },
      fn ( stream:oStream!, metaStream:oStream!, dependStream:oStream! ) {
         when! dependStream {
            dependStream.close();
         }
      }
   );

   when! ast {
      switch self.option.convTo {
         case .Go {
            let mut conv = convGo.createFilter(
               self.option.testing, "stdout", io.stdout, ast,
               self.createGoOption( scriptPath ) );
            ast.$node.processFilter( conv, new convGo.Opt( ast.$node ) );
         }
      }
   }
}

/**
Go に変換しファイルに書き込む
*/
pub fn Front.saveToGo( scriptPath:str, ast:TransUnit.ASTInfo ) mut {
   let mut path = scriptPath.gsub( "%.lns$", ".go" );

   if! let dir = self.option.outputDir {
      path = "%s/%s" (dir,path);
   }
   let! mut file = io.open( path, "w" ) {
      return;
   };
   let mut memStream = new Util.memStream();
   let mut dstStream:oStream;
   if Str.isValidStrBuilder() {
      dstStream = memStream;
   } else {
      dstStream = file;
   }

   let mut conv = convGo.createFilter(
      self.option.testing, path, dstStream, ast, self.createGoOption( scriptPath ) );
   ast.$node.processFilter( conv, new convGo.Opt( ast.$node ) );

   if Str.isValidStrBuilder() {
      file.write( memStream.$txt );
   }

   file.close();
}


/**
C に変換しファイルに書き込む
*/
pub fn Front.saveToC( scriptPath:str, ast:TransUnit.ASTInfo ) mut {
   let mut cPath = scriptPath.gsub( "%.lns$", ".c" );

   let! mut file = io.open( cPath, "w" ) {
      return;
   };

   let mut hPath = scriptPath.gsub( "%.lns$", ".h" );
   let! mut hFile = io.open( hPath, "w" ) {
      return;
   };

   let mut conv = convCC.createFilter(
      self.option.testing, self.option.mode == .Builtin , cPath, file, hFile, ast );
   ast.$node.processFilter( conv, new convCC.Opt( ast.$node ) );

   file.close();
   hFile.close();
}

pub fn Front.outputBuiltin( scriptPath:str ) mut {
   let mod = scriptPath2Module( "lns_builtin" );

   let mut ast = self.createAst(
      new frontInterface.ImportModuleInfo(),
      new Parser.DummyParser(), mod,
      frontInterface.ModuleId.createId( 0.0, 0 ), nil, .Compile ## );

   self.saveToC( scriptPath, ast );
}

class UpdateInfo {
   let scriptPath:str {pub};
   let dependsPath:str! {pub};
   let mut parser:Parser.Parser! {pub};
   let moduleId:&frontInterface.ModuleId {pub};
   let uptodate: ModuleUptodate {pub};
}

pub form AstCallback( ast: &TransUnit.ASTInfo );

/**
Lua に変換しファイルに書き込む
*/
pub fn Front.saveToLua( updateInfo:UpdateInfo, astCallback:AstCallback! ) mut : bool
{
   let scriptPath = updateInfo.$scriptPath;
   let dependsPath = updateInfo.$dependsPath;
   let mut parser = updateInfo.$parser;
   let moduleId = updateInfo.$moduleId;
   let uptodate = updateInfo.$uptodate;
   
   fn txt2ModuleId( txt:str ) : frontInterface.ModuleId {
      let mut buildIdTxt = txt.gsub( "^_moduleObj.__buildId = ", "" ).gsub( '"', "" );
      return frontInterface.ModuleId.createIdFromTxt( buildIdTxt );
   }

   /**
oldStream, newStream に格納されているモジュールのメタ情報が、
モジュールのビルド ID 情報以外が一致しているかどうかを調べる。

モジュールのビルド ID 情報以外が一致している場合、
モジュールのビルド ID 情報の部分だけを更新したメタ情報を返す。

@param oldStream 古いメタ情報
@param newStream 新しいメタ情報
@return bool 一致している場合 true。 true の場合、次の str の情報が有効。
@return str 新しく書き込むメタ情報の文字列。
   */
   fn checkDiff( oldStream:Parser.TxtStream, newStream:Parser.TxtStream ) : bool, str
   {
      macro _getBuildId( line:__exp, buildIdLine:__exp ) {
         when! ,,line {
            if #,,buildIdLine == 0 {
               if ,,line.find( "^_moduleObj.__buildId" ## ) {
                  // ビルド ID 情報を取得する。
                  ,,buildIdLine = ,,line;
               }
            }
         }
      }


      // ビルド ID よりも前のファイル内部の位置
      let mut headEndPos = 0;
      // ビルド ID よりも後のファイル内部の位置
      let mut tailBeginPos = 0;

      // 古い build ID を記録した行
      let mut oldBuildIdLine = "";
      // 新しい build ID を記録した行
      let mut newBuildIdLine = "";
      while true {
         let newLine = newStream.read( "*l" );
         let oldLine = oldStream.read( "*l" );
         _getBuildId( oldLine, oldBuildIdLine );
         _getBuildId( newLine, newBuildIdLine );

         if newLine ~= oldLine {
            // 差分がある箇所を見つけて、それが ビルド ID の場合、
            // 
            let mut cont = false;
            when! newLine, oldLine {
               if oldLine.find( "^_moduleObj.__buildId" ## ) {
                  if newLine.find( "^_moduleObj.__buildId" ## ) {
                     tailBeginPos = newStream.$lineNo;
                     cont = true;
                  }
               }
               elseif oldLine.find( "^__dependModuleMap.*buildId =" ## ) and
                  newLine.find( "^__dependModuleMap.*buildId =" ## )
               {
                  let oldSub = oldLine.gsub( "buildId =.*", "" );
                  let newSub = newLine.gsub( "buildId =.*", "" );
                  if oldSub == newSub {
                     cont = true;
                  }
               }
            }
            if not cont {
               Log._log( .Debug, `{ return "<%s>, <%s>" (oldLine, newLine ); } );
               return false, "";
            }
         }
         else {
            if tailBeginPos == 0 {
               headEndPos = newStream.$lineNo;
            }
            if not oldLine {
               // ファイル一致
               if tailBeginPos == 0 {
                  return true, oldStream.$txt;
               }

               let oldBuildId = txt2ModuleId( oldBuildIdLine );
               let newBuildId = txt2ModuleId( newBuildIdLine );
               let worlBuildId = frontInterface.ModuleId.createId(
                  newBuildId.$modTime, oldBuildId.$buildCount );
               let buildIdLine = "_moduleObj.__buildId = %q" (worlBuildId.$idStr);

               let txt = "%s%s\n%s" ( newStream.getSubstring( 1, headEndPos ),
                                      buildIdLine,
                                      newStream.getSubstring( tailBeginPos## ) );
               return true, txt;
            }
         }
      }
   }


   let mut updateFlag = true;
   let mut ast:TransUnit.ASTInfo! = nil;
   
   let mod = scriptPath2Module( scriptPath );
   let mut luaPath = scriptPath.gsub( "%.lns$", ".lua" );
   let mut metaPath = scriptPath.gsub( "%.lns$", ".meta" );
   if self.option.outputDir {
      let filename = mod.gsub( "%.", "/" );
      luaPath = "%s/%s.lua" ( self.option.outputDir, filename );
      metaPath = "%s/%s.meta" ( self.option.outputDir, filename );
   }

   if luaPath == scriptPath {
      Util.errorLog( "%s is illegal filename." (luaPath) );
   }
   else {
      let mut convMode = convLua.ConvMode.Convert;
      if self.option.mode == .SaveMeta {
         convMode = .ConvMeta;
      }

      // .meta ファイルを更新すると、このモジュールを import している
      // モジュール全てを更新する必要がある。
      // しかし、この更新処理は無駄になることが多い。
      // 例えば、モジュール内の local な関数の挙動を変更しただけならば、
      // このモジュールを import しているモジュールには影響がないので、
      // 更新の必要はない。
      // このような無駄な更新処理をスキップできるように、
      // .meta 情報に変更がない場合は、外部モジュールの更新が行なわれないように
      // 制御を行なう。
      let mut metaFileObj:luaStream! = nil;
      let tempMetaPath = metaPath .. ".tmp";
      
      ast = self.convertLuaToStreamFromScript(
         parser, moduleId, uptodate, convMode, scriptPath, mod,
         self.option.byteCompile, self.option.stripDebugInfo,
         fn ( mode:ModuleUptodate ): oStream!, oStream!, oStream!
         {
            fn openLuaStream(): oStream! {
	       let! mut fileObj = io.open( luaPath, "w" ) {
                  error( "write open error -- %s" (luaPath) );
               };
               return fileObj;
            }
            fn openStreams( luaFlag:bool ): oStream!, oStream!{
	       let mut stream:oStream! = nil;
               if luaFlag {
	          stream = openLuaStream();
               }

               let mut metaStream = stream;
               //let mut metaConvMode = convLua.ConvMode.Convert;
               if self.option.mode == .SaveMeta {
                  //metaConvMode = .ConvMeta;
                  if! io.open( tempMetaPath, "w+" ) {
                     metaFileObj = _exp;
		     metaStream = _exp;
                  }
                  else {
                     error( "write open error -- %s" (metaPath) );
                  }
               }
               return stream, metaStream;
            }
	    let mut stream:oStream! = nil;
	    let mut metaStream = stream;
            match mode {
               case .Uptodate( metaInfo ) {
               }
               case .NeedTouch( metaCode, metaInfo ) {
                  stream, metaStream = openStreams( false );
               }
               default {
                  stream, metaStream = openStreams( true );
               }
            }

            return stream, metaStream, self.option.openDepend( dependsPath );
         },
         fn ( stream:oStream!, metaStream:oStream!, dependStream:oStream! ) {
            when! stream {
	       stream.close();
            }
            when! dependStream {
               dependStream.close();
            }

	    when! metaFileObj {
	       // metaFileObj.close();
               // os.rename( tempMetaPath, metaPath );

               // メタファイルが変っているかどうかを確認し、
               // 変更がない場合はビルド情報だけ更新する。
               metaFileObj.flush();
               metaFileObj.seek( "set", 0 );
               let! newMetaTxt = metaFileObj.read( "*a" ) {
                  Util.err( "faled to read meta. -- %s." (tempMetaPath) );
               };
	       metaFileObj.close();
               let mut oldMetaTxt = "";
               if! let mut oldFileObj = io.open( metaPath ## ) {
                  oldMetaTxt = unwrap oldFileObj.read( "*a" ) default "";
                  oldFileObj.close();
               }

               let sameFlag, txt = checkDiff(
                  new Parser.TxtStream( oldMetaTxt ),
                  new Parser.TxtStream( newMetaTxt ) );
               if not sameFlag {
                  os.rename( tempMetaPath, metaPath );
               }
               else {
                  os.remove( tempMetaPath );
                  if txt ~= "" {
                     if! let mut fileObj = io.open( metaPath, "w" ) {
                        fileObj.write( txt );
                        fileObj.close();
                     }
                  }
                  else {
                     updateFlag = false;
                  }
               }
	    }
         });
   }

   if updateFlag {
      scriptPath.gsub( "%.lns$", ".lua" );
   }

   when! ast {
      switch self.option.convTo {
         case .C {
            self.saveToC( scriptPath, ast );
         }
         case .Go {
            self.saveToGo( scriptPath, ast );
         }
      }
      when! astCallback {
         astCallback( ast );
      }
   }

   return updateFlag;
}


fn Front.outputBootC( scriptPath:str )
{
   let mut stream:oStream;
   if! let path = self.option.bootPath {
      let cPath = path.gsub( "%.lns$", ".c" );
      let! mut file = io.open( cPath, "w" ) {
         print( "failed to open file -- %s" (cPath) );
         return;
      };
      stream = file;
   }
   else {
      stream = io.stdout;
   }
   let initModule = scriptPath2Module( scriptPath );
   convCC.outputBootcode( stream, initModule );
}

pub fn convertLnsCode2LuaCode( lnsCode:str, path:str ) : str
{
   let mut option = new Option.Option();
   option.scriptPath = path;
   option.useLuneModule = Option.getRuntimeModule();
   option.useIpairs = true;
   let mut front = new Front( option );
   
   return front.convertLns2LuaCode(
      new frontInterface.ImportModuleInfo(),
      new Parser.TxtStream( lnsCode ), path );
}

pub fn Front.build( astCallback:AstCallback! ) mut {
   fn createUpdateInfo( scriptPath:str, dependsPath:str! ) : UpdateInfo {
      let mod = scriptPath2Module( scriptPath );
      let moduleId, uptodate = self.getModuleIdAndCheckUptodate( scriptPath, mod );
      let mut parser:Parser.Parser!;
      _match uptodate {
         case .NeedUpdate {
            parser = createPaser( scriptPath, mod );
         }
         case .NeedTouch( _, _ ) {
            parser = nil;
         }
         case .Uptodate( _ ) {
            parser = nil;
         }
      }
      return new UpdateInfo( scriptPath, dependsPath, parser, moduleId, uptodate );
   }

   Depend.profile(
      self.option.validProf,
      fn () {
         if self.option.scriptPath == "@-" {
            let mut updateList:List<UpdateInfo> = [];
            while true {
               let! line = io.stdin.read( "*l" ) {
                  break;
               };
               if #line > 0 {
                  updateList.insert(
                     createUpdateInfo( line, (line.gsub( ".lns$", ".d" )) ) );
               }
            }

            foreach updateInfo in updateList {
               let prev = os.clock();
               self.saveToLua( updateInfo, astCallback );
               print( "%s:%g" ( updateInfo.$scriptPath, os.clock() - prev));
            }
         } else {
            self.saveToLua( createUpdateInfo( self.option.scriptPath, nil ),
                            astCallback );
         }
      }, self.option.scriptPath .. ".profi" );
}

pub fn build( option:Option.Option, astCallback:AstCallback ) mut {
   let mut front = new Front( option );
   front.build( astCallback );
}

pub fn Front.exec() mut
{
   Log._log( .Trace, `{ return self.option.mode.$_txt; } );

   switch self.option.mode {
      case .Token {
         self.dumpTokenize( self.option.scriptPath );
      }
      case .Ast {
         self.dumpAst( self.option.scriptPath );
      }
      case .Format {
         self.format( self.option.scriptPath );
      }
      case .Diag {
         self.checkDiag( self.option.scriptPath );
      }
      case .Complete {
         self.complete( self.option.scriptPath );
      }
      case .Inquire {
         self.inquire( self.option.scriptPath );
      }
      case .Glue {
         self.createGlue( self.option.scriptPath );
      }
      case .Lua, .LuaMeta {
         self.convertToLua( self.option.scriptPath );
      }
      case .Save, .SaveMeta {
         self.build( nil );
      }
      case .Shebang {
         if! let modObj = self.loadModule( scriptPath2Module( self.option.scriptPath ) )
         {
            let code = Depend.runMain( modObj.__main, self.option.shebangArgList );
            os.exit( code );
         }
      }
      case .Exec {
         let modObj = self.loadModule( scriptPath2Module( self.option.scriptPath ) );

         if self.option.testing {
            let code = ```
local Testing = require( "lune.base.Testing" )
return function( path )
  Testing.run( path );
  Testing.outputAllResult( io.stdout );
end
```;
            let loaded, mess = _load( code ## );
            when! loaded {
               if! let mod = loaded(##) {
                  (mod@@form)( scriptPath2Module( self.option.scriptPath ) );
               }
            } else {
               print( mess );
            }
         }
      }
      case .BootC {
         self.outputBootC( self.option.scriptPath );
      }
      case .Builtin {
         self.outputBuiltin( self.option.scriptPath );
      }
      case .MkMain {
         let mod = scriptPath2Module( self.option.scriptPath );
         if! let mess = convGo.outputGoMain(
            self.option.appName, mod, self.option.testing,
            self.option.outputPath, self.option.$runtimeOpt )
         {
            Util.errorLog( mess );
         }
      }
      default {
         print( "illegal mode" );
      }
   }
}

pub fn exec( args: &List<str> ) {
   let version =
      unwrap tonumber( Depend.getLuaVersion().gsub( "^[^%d]+", "" ), nil ) default 0.0;

   if version < 5.1 {
      io.stderr.write(
         string.format( "LuneScript doesn't support this lua version(%s). %s\n",
        	        version, "please use the version >= 5.1.") );
      os.exit( 1 );
   }

   let mut option = Option.analyze( args );
   let mut front = new Front( option );

   front.exec();
}

// frontInterface.setFront( self ); で front を確定させるため
// go の runtime_go/depend.go から、初期化処理として呼ぶ。
pub fn setFront() {
   let mut option = Option.createDefaultOption( "dummy.lns" );
   new Front( option );
}

__test case1(ctrl) {
   let luaCode = convertLnsCode2LuaCode( convLua.getTestLnsCode(), "test.lns" );
   convLua.runTestCode( ctrl, luaCode );

   exec( [ "lune/base/Ver.lns", "lua" ] );
}
