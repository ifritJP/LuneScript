/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


_lune_control default_async_all;
_lune_control default_strict_generics;

import lune.base.Types;
import lune.base.frontInterface;
import lune.base.Tokenizer;
import lune.base.convLua;
import lune.base.convGo;
import lune.base.convPython;
import lune.base.AstInfo;
import lune.base.TransUnit;
import lune.base.Util;
import lune.base.Option;
import lune.base.dumpNode;
import lune.base.glueFilter;
import lune.base.Depend;
import lune.base.DependLuaOnLns;
import lune.base.OutputDepend;
import lune.base.Ver;
import lune.base.LuaVer;
import lune.base.Log;
import lune.base.Formatter;
import lune.base.Testing;
import lune.base.GoMod;
import lune.base.Meta;
import lune.base.Nodes;
//import lune.base.Ast;
//import lune.base.Runner;
import lune.base.Builtin;
import lune.base.NodeIndexer;
import lune.base.Converter;

_lune_control ignore_symbol_;
_lune_control default_strict_generics;


Depend.setup( fn(ver:int) {
   LuaVer.setCurVer( ver );
});


let forceUpdateMeta = true;

class LoadInfo {
   /** モジュールの lua コードのロード結果 */
   pub let mut mod:Luaval<&stem>;
   /** モジュールのメタ情報 */
   pub let mut meta:frontInterface.ModuleMeta;
}

pub form AstCallback( ast: &AstInfo.ASTInfo );

alge UptodateInfo {
   /** 最新で更新不要。 .meta から情報を読み込んでいる */
   Uptodate(frontInterface.ModuleMeta),
   /** 更新済み。 .lns から .meta を構築している */
   Update(&frontInterface.ModuleInfo, &AstInfo.ASTInfo),
}

class ModuleMgr {
   /** mod → 更新情報 */
   let mut mod2info:Util.OrderdMap<str,UptodateInfo>;
   /** mod → ロード済みメタ情報 */
   let mut loadedMetaMap:Map<str,frontInterface.ModuleMeta>;
   
   pub fn __init() {
      self.mod2info = new Util.OrderdMap<str,UptodateInfo>();
      self.loadedMetaMap = {};
   }

   pub fn get( mod:str ) mut : UptodateInfo! {
      return self.mod2info.$map[ mod ];
   }
   
   pub fn getAst( mod:str ) mut : &AstInfo.ASTInfo! {
      let! mut info = self.get( mod ) {
         return nil;
      };
      _match info {
         case .Update( _, ast ) {
            return ast;
         }
         case .Uptodate( _ ) {
            return nil;
         }
      }
   }

   pub fn getModList() : &_List<str> {
      return self.mod2info.$keyList;
   }
   
   
   pub fn add( ast:&AstInfo.ASTInfo,
               moduleInfo:&frontInterface.ModuleInfo ) mut
   {
      let mod = moduleInfo.$fullName;
      // if self.loadedMetaMap[ mod ] {
      //    if mod == "lune.base.Testing" {
      //       // lune.base.Testing は テストケース解析時に自動で import される。
      //       // ここでエラーにするとテスト出来ないので、エラーにしない。
      //    } else {
      //       // meta を単独で読み込んだ後に AST 解析すると、
      //       // Ast.ProcessInfo に不整合が起るので、ここでエラーにする。
      //       Util.err( "the meta is already loaded -- %s" (mod) );
      //    }
      // }
      self.mod2info.add( mod, UptodateInfo.Update( moduleInfo, ast ), true );
      // self.loadedMetaMap[ mod ] = new frontInterface.ModuleMeta(
      //    ast.$streamName, .Module( moduleInfo ));
   }

   pub fn addMeta( mod:str, meta:frontInterface.ModuleMeta ) mut {
      if not self.get( mod ) {
         Log._log2( .Log, mod );
         self.mod2info.add( mod, UptodateInfo.Uptodate( meta ), false );
      }
      self.loadedMetaMap[ mod ] = meta;
   }

   pub fn getMeta( mod:str ) mut : frontInterface.ModuleMeta! {
      return self.loadedMetaMap[ mod ];
   }
}


pub class Front extend (frontInterface.frontInterface) {
   let mut option:&Option.Option;
   /** import 済みのモジュールと、その LoadInfoの紐付け。 */ 
   let mut loadedMap:Map<str,LoadInfo>;
   /** import 済みの Test ビルド用モジュールと、その LoadInfoの紐付け。 */ 
   let mut loadedMapTest:Map<str,LoadInfo>;
   /**
import 済みのモジュール → Lua コードのマップ。

regConvertedMap() メソッドを使用して登録する。
*/
   let convertedMap:Map<str,str>;
   let mut gomodMap:GoMod.ModInfo;

   let mut bindModuleSet:Set<str>;
   let moduleMgr:ModuleMgr;
   let targetSet:Set<str>;

   let mod2astCreate:Map<str,Converter.AstCreater>;
   let mod2loader:Map<str,frontInterface.ModuleLoader>;


   /**
front で import しているものは、
loadedMap で管理する前にシステムにロードされているため、
後で import すると多重ロードになってしまう。
多重ロードを防ぐため、 loadedMap で管理する前にロードされているモジュールを保持する。
*/
   let preloadedModMap:&Map<str,Luaval<&stem>>;

   let mut loadCount:int;

   let mut builtinFunc:&Builtin.BuiltinFuncType;

   fn regConvertedMap( mod:str, luaTxt:str, meta:frontInterface.ModuleMeta ) mut {
      self.moduleMgr.addMeta( mod, meta );
      self.convertedMap[ mod ] = luaTxt;
   }
   
   pub fn __init( option:&Option.Option, bindModuleList:&List<str>! ) __noasync {
      self.mod2loader = {};
      self.mod2astCreate = {};
      self.loadCount = 0;
      self.targetSet = (@);
      self.bindModuleSet = (@);
      when! bindModuleList {
         foreach mod in bindModuleList {
            self.bindModuleSet.add( mod );
         }
      }
      self.moduleMgr = new ModuleMgr();
      let gomodDir;
      if option.scriptPath ~= "" {
         gomodDir = Util.parentPath( option.scriptPath );
      } else {
         gomodDir = "";
      }
      self.gomodMap = GoMod.getGoMap( gomodDir );
      DependLuaOnLns.addGoModPath( self.gomodMap.getModPathList() );
      
      self.option = option;
      self.loadedMap = {};
      self.loadedMapTest = {};
      self.convertedMap = {};

      {
         let mut builtin = new Builtin.Builtin(
            self.option.targetLuaVer, option.transCtrlInfo );
         self.builtinFunc = builtin.registBuiltInScope();
      }
      


      let mut loadedMap:Map<str,Luaval<&stem>> = {};
      __luago {
         foreach modval, mod in Depend.getLoadedMod() {
            // pending:
            if mod == "lune.base.Testing" {
               loadedMap[ mod ] = modval;
            }
            if option.testing and modval.__enableTest or
               not option.testing and modval.__enableTest
            {
               loadedMap[ mod ] = modval;
            }
         }
      }
      self.preloadedModMap = loadedMap;
   }

   fn getLoadInfo( mod:str ) : LoadInfo! {
      if self.option.testing {
         return self.loadedMapTest[ mod ];
      }
      return self.loadedMap[ mod ];
   }

   fn setLoadInfo( mod:str, info:LoadInfo ) mut {
      if self.option.testing {
         self.loadedMapTest[ mod ] = info;
      }
      self.loadedMap[ mod ] = info;
   }
   

   pub fn loadModule( mod:str ) __async mut: Luaval<&stem>!, frontInterface.ModuleMeta;
   pub fn loadMeta(
      importModuleInfo:frontInterface.ImportModuleInfo,
      mod:str, orgMod:str, baseDir:str!,
      loader:frontInterface.ModuleLoader ) mut: frontInterface.ModuleMeta!;
   pub fn loadFromLnsTxt( importModuleInfo:frontInterface.ImportModuleInfo,
                          baseDir:str!, name:str, txt:str ) mut : Luaval<&stem>;
   pub fn getLuaModulePath( mod:str, baseDir:str! ) mut : str, str!, str;
   pub fn searchModule( mod:str, baseDir:str!, addSearchPath:str! ) mut: str!;
   pub fn error( message:str ) __async;
}

pub fn Front.error( message:str ) __async {
   Util.errorLog( message );
   Util.printStackTrace();
   os.exit( 1 );
}

fn Front.loadLua( path:str ):Luaval<&stem>! {
   let ret:Luaval<&stem>!;
   __luaLock {
      let chunk, err = loadfile( path );
      when! chunk {
         ret = unwrap chunk(##);
      } else {
         Util.errorLog( unwrap err default "load error -- %s." (path));
         ret = nil;
      }
   }
   return ret;
}

fn createPaser( baseDir:str!, path:str, mod:str, stdinFile:&Types.StdinFile! ): Tokenizer.Tokenizer
{
   return Tokenizer.StreamTokenizer.create(
      Types.TokenizerSrc.LnsPath( baseDir, path, mod, nil ), false, stdinFile, nil );
}

fn Front.scriptPath2Module( path:str, baseDir:str! ):str, str! {
   let mod = Util.scriptPath2ModuleFromProjDir( path, baseDir );
   return mod, baseDir;
}

fn Front.createPaser( scriptPath:str, baseDir:str! ): Tokenizer.Tokenizer
{
   let mod = self.scriptPath2Module( scriptPath, baseDir );
   return createPaser( baseDir, scriptPath, mod, self.option.$stdinFile );
}

fn Front.createAstSub(
   importModuleInfo:frontInterface.ImportModuleInfo,
   tokenizerSrc:&Types.TokenizerSrc,
   baseDir:str!, mod:str, moduleId:&frontInterface.ModuleId,
   analyzeModule:str!, analyzeMode:TransUnit.AnalyzeMode,
   pos:&Tokenizer.Position! ) mut : Converter.CreateAstResult
{
   if! self.moduleMgr.get( mod ) {
      match _exp {
         case .Update( _, ast ) {
            return Converter.CreateAstResult.Ast( ast );
         }
         case .Uptodate( _ ) {
            Util.err( "can't load the multiple module -- %s" (mod) ); // 要対応
         }
      }
   }
   
   // let mut transUnit = new TransUnit.TransUnit(
   //    moduleId, importModuleInfo, new convLua.MacroEvalImp( self.builtinFunc ),
   //    analyzeModule, analyzeMode, pos, self.option.targetLuaVer,
   //    self.option.transCtrlInfo, self.builtinFunc );
   // let mut ast = transUnit.createAST( tokenizerSrc, false, mod );

   if! let mut creater = self.mod2astCreate[ mod ] {
      let ast = creater.getAst();
      return Converter.CreateAstResult.Ast( ast );
   }

   let mut astCreater = new Converter.AstCreater(
      new frontInterface.FrontAccessor( self ),
      importModuleInfo, tokenizerSrc, mod, baseDir, moduleId, analyzeModule,
      analyzeMode, pos, self.builtinFunc, self.option );
   self.mod2astCreate[ mod ] = astCreater;
   return Converter.CreateAstResult.Creater( astCreater );
}

fn Front.applyAstResult( result:&Converter.CreateAstResult ) mut : &AstInfo.ASTInfo {
   _match result {
      case .Ast( ast ) {
         return ast;
      }
      case .Creater( astCreater ) {
         let ast, moduleInfo, mut meta = astCreater.getAst();
         Log._log2( .Log, "applyAstResult -- %s" ( ast.$exportInfo.$fullName ));
         self.moduleMgr.add( ast, moduleInfo );
         self.moduleMgr.addMeta( ast.$exportInfo.$fullName, meta );
         
         self.mod2loader[ ast.$exportInfo.$fullName ] = nil;
         self.mod2astCreate[ ast.$exportInfo.$fullName ] = nil;
         
         return ast;
      }
   }
}



fn Front.createAst(
   importModuleInfo:frontInterface.ImportModuleInfo,
   tokenizerSrc:&Types.TokenizerSrc,
   baseDir:str!, mod:str, moduleId:&frontInterface.ModuleId,
   analyzeModule:str!, analyzeMode:TransUnit.AnalyzeMode,
   pos:&Tokenizer.Position! ) mut : &AstInfo.ASTInfo
{
   let ast = self.applyAstResult( self.createAstSub(
      importModuleInfo, tokenizerSrc, baseDir, mod, 
      moduleId, analyzeModule, analyzeMode, pos ) );
   if self.option.dumpDebugAst {
      Util.println( "=== ast:%s ==========" (mod) );
      ast.$node.processFilter(
         dumpNode.createFilter(
            ast.$exportInfo.$moduleTypeInfo,
            ast.$exportInfo.$processInfo, io.stdout ),
         new dumpNode.Opt( "", 0 ) );
   }
   return ast;
}


fn ast2Lua(
   ast:&AstInfo.ASTInfo, streamName:str, stream:oStream, metaStream:oStream,
   convMode:convLua.ConvMode, inMacro:bool, option:&Option.Option )
{
   let mut conv = Converter.ast2LuaMain(
      ast, streamName, stream, metaStream, convMode, inMacro, option );
   conv.outputLuaAndMeta( unwrap ast.$node@@@Nodes.RootNode );
}

fn loadFromChunk( chunk:Luaval<form>!, err:str! ): Luaval<&stem>! {
   when! err {
      Util.errorLog( err );
   }
   let ret:Luaval<&stem>!;
   __luaLock {
      when! chunk {
         if! let mut work = chunk(##) {
            ret = work@@Luaval<stem>;
         } else {
            ret = nil;
         }
      } else {
         // chunk が nil はバグ
         Util.err( "failed to error" ); // バグ
      }
   }
   return ret;
}

pub fn loadFromLuaTxt( txt:str ): Luaval<&stem>! {
   //--print( txt )
   let chunk, err;
   __luaLock {
      chunk, err = _load( txt ## );
   }
   return loadFromChunk( chunk, err );
}

fn Front.convertFromAst(
   ast:&AstInfo.ASTInfo, streamName:str, mode:convLua.ConvMode ) : str, str
{
   let mut stream = new Util.memStream();
   let mut metaStream = new Util.memStream();

   ast2Lua( ast, streamName, stream, metaStream, mode, false, self.option );

   return metaStream.$txt, stream.$txt;
}

/**
マクロ解析用
*/
pub fn Front.loadFromLnsTxt(
   importModuleInfo:frontInterface.ImportModuleInfo,
   baseDir:str!, name:str, txt:str ) mut : Luaval<&stem>
{
   let mut transUnit = new TransUnit.TransUnitCtrl(
      new frontInterface.FrontAccessor( self ),
      frontInterface.ModuleId.tempId,
      importModuleInfo, new convLua.MacroEvalImp( self.builtinFunc ),
      false, nil, nil, nil,
      self.option.targetLuaVer, self.option.transCtrlInfo, self.builtinFunc );

   let mut ast = transUnit.createAST(
      Types.TokenizerSrc.LnsCode( txt, name, nil ), false, baseDir, self.option.$stdinFile,
      false, "$load%d" (self.loadCount), nil );
   self.loadCount = self.loadCount + 1;

   let _, luaTxt = self.convertFromAst( ast, name, .ConvMeta );
   return unwrap loadFromLuaTxt( luaTxt );
}

class DependMetaInfo extend (Mapping) {
   pub let use:bool;
   pub let buildId:str;
}

class MetaForBuildId extend (Mapping) {
   pub let __buildId:str;
   pub let __dependModuleMap: &Map<str,&DependMetaInfo>;
   pub let __subModuleMap: &List<str>;
   pub let __enableTest:bool;

   pub fn createModuleId(): &frontInterface.ModuleId {
      return frontInterface.ModuleId.createIdFromTxt( self.__buildId );
   }
}

pub static fn MetaForBuildId.LoadFromMeta( metaPath:str ): &MetaForBuildId!, str! {
   if! let mut fileObj = Util.openRd( metaPath ) {
      let luaCode = fileObj.read( "*a" );
      fileObj.close();
      when! luaCode {
         let meta;
         __luaDepend {
            meta = MetaForBuildId._fromStem(
               expandLuavalMap( loadFromLuaTxt( luaCode )) );
         }
         return meta, luaCode;
      }
   }
   return nil, nil;
}


fn getMetaInfo( lnsPath:str, mod:str, outdir:str! ): &MetaForBuildId!, str, str {
   let mut moduleMetaPath = lnsPath;
   when! outdir {
      moduleMetaPath = "%s/%s" ( outdir , (mod.gsub( "%.", "/" )) );
   }
   moduleMetaPath = moduleMetaPath.gsub( "%.lns$", ".meta" );
   if! let meta, metaCode = MetaForBuildId.LoadFromMeta( moduleMetaPath ) {
      return meta, moduleMetaPath, metaCode;
   }
   return nil, moduleMetaPath, "";
}

fn Front.searchModuleFile( mod:str, suffix:str, baseDir:str!, outputDir:str! ) mut : str!
{
   _match self.gomodMap.convLocalModulePath( mod, suffix, baseDir ) {
      case .NotGo {
      }
      case .NotFound {
         return nil;
      }
      case .Found( info ) {
         return info.$path;
      }
   }
   
   let mut lnsSearchPath = package.path;
   when! outputDir {
      lnsSearchPath = string.format( "%s/?%s;%s", outputDir, suffix, package.path );
   }
   when! baseDir {
      lnsSearchPath = string.format( "%s/?%s;%s", baseDir, suffix, package.path );
   }
   if! let projDir = self.option.$projDir {
      lnsSearchPath = "%s;%s" ( Util.pathJoin( projDir, "?%s" (suffix)), package.path );
   }
   lnsSearchPath = lnsSearchPath.gsub( "%.lua$", suffix );
   lnsSearchPath = lnsSearchPath.gsub( "%.lua;", suffix .. ";" );

   let! foundPath = Util.searchPath( mod, lnsSearchPath ) {
      // 通常パスで検索してない場合、
      // gomodMap でアクセスした最後の proj からの相対で見つける
      let! latestProjRoot = self.gomodMap.getLatestProjRoot() {
         return nil;
      };
      let latestProjSearchPath = Util.pathJoin( latestProjRoot, "?" .. suffix );
      if! Util.searchPath( mod, latestProjSearchPath ) {
         foundPath = _exp;
      } else {
         Log._log2( .Err,
                    "not found '%s' at %s" (mod,latestProjSearchPath) );
         return nil;
      }
   };
   return (foundPath.gsub( "^./", "" ));
}

/**
指定の .lns ファイルのパス lnsPath の、ModuleId を取得する。

@param lnsPath .lns ファイルのパス
@param mod .lns ファイルのモジュール名
@param outdir .meta ファイルの出力先ディレクトリ。 nil の場合は .lns ファイルと同じ。
@param metaInfo .lns ファイルのメタ情報。 nil の場合は、この関数内で読み込む。
@return &frontInterface.ModuleId

lnsPath が存在しない場合、 frontInterface.ModuleId.tempId を返す。
メタ情報が有効な場合、 そのメタ情報に記載されている buildCount の ModuleId を返す。
メタ情報が無効な場合、 buildCount 0 の ModuleId を返す。
*/
fn getModuleId( lnsPath:str, mod:str, outdir:str!, mut metaInfo:&MetaForBuildId! ):
&frontInterface.ModuleId
{
   let mut buildCount = 0;
   let! mut fileTime = Depend.getFileLastModifiedTime( lnsPath ) {
      return frontInterface.ModuleId.tempId;
   };
   if not metaInfo {
      metaInfo = getMetaInfo( lnsPath, mod, outdir );
   }
   when! metaInfo {
      let buildId = metaInfo.createModuleId();
      buildCount = buildId.$buildCount;
   }
   return frontInterface.ModuleId.createId( fileTime, buildCount );
}

alge ModuleUptodate {
   /** ファイルの更新が必要 */
   NeedUpdate,
   /** .meta ファイルの日付だけ更新が必要 */
   NeedTouch( metaCode:str, metaBuildId:&MetaForBuildId ),
   /** 最新で処理不要 */
   Uptodate( metaBuildId:&MetaForBuildId ),
}

/**
lnsPath で指定する lns ファイルを更新する必要があるかどうか確認する。

次の条件を全て満す時に uptodate として判断する。
- .lns ファイルに対応する .meta ファイルが存在し、更新日時が .meta の方が新しい
- .meta に記載の依存ファイルが存在し、更新日時に変更がない

@param lnsPath lns ファイルパス
@param mod lnsPath のモジュール
@return frontInterface.ModuleId lnsPath のモジュール ID
@return bool uptodate かどうか
@return &MetaForBuildId! lnsPath ファイルに対応するメタ情報
@return str メタ情報内容そのものの文字列
*/
fn Front.getModuleIdAndCheckUptodate( lnsPath:str, mod:str ) mut :
&frontInterface.ModuleId, ModuleUptodate
{
   let mut uptodate = ModuleUptodate.NeedUpdate;

   _match self.option.transCtrlInfo.uptodateMode {
      case .ForceAll {
         // 必ず NeedUpdate にする
         return frontInterface.ModuleId.tempId, uptodate;
      }
      case .Force1( forceMod ) {
         if mod == forceMod {
            return frontInterface.ModuleId.tempId, uptodate;
         }
      }
      case .Normal {
         // pass
      }
      case .Touch {
         // pass
      }
   }

   /**
dependModuleMap のモジュールのメタファイルが、 metaTime よりも古いかどうかを確認する。

metaTime
   */
   fn checkDependUptodate(
      metaTime:real, metaInfo:&MetaForBuildId, metaCode:str ): ModuleUptodate
   {
      foreach dependItem, depMod in metaInfo.__dependModuleMap {
         let! modMetaPath = self.searchModuleFile(
            depMod, ".meta", nil, self.option.outputDir )
         {
            // .meta ファイルがない場合、更新が必要
            Log._log( .Debug, `{ return "NeedUpdate"; } );
            return ModuleUptodate.NeedUpdate;
         };
         let! time = Depend.getFileLastModifiedTime( modMetaPath ) {
            // .meta ファイルの更新日時取得が出来ない場合、更新が必要
            Log._log( .Debug, `{ return "NeedUpdate"; } );
            return ModuleUptodate.NeedUpdate;
         };
         if time > metaTime {
            // インポート対象のモジュールのメタファイルの更新日時が
            // ビルド対象のモジュールのメタファイルよりも新しい場合、
            // .meta の内容を確認する。
            let! dependMeta = MetaForBuildId.LoadFromMeta( modMetaPath ) {
               Log._log( .Debug, `{ return "NeedUpdate"; } );
               return ModuleUptodate.NeedUpdate;
            };
            let orgMetaModuleId = frontInterface.ModuleId.createIdFromTxt(
               dependItem.buildId );
            let metaModuleId = dependMeta.createModuleId();
            if metaModuleId.$buildCount ~= 0 and
               metaModuleId.$buildCount ~= orgMetaModuleId.$buildCount
            {
               // buildCount が一致しない場合、更新する。
               Log._log( .Debug, `{
                  return "NeedUpdate: %s, %d, %d" ( modMetaPath,
                                                    metaModuleId.$buildCount,
                                                    orgMetaModuleId.$buildCount );
               } );
               return ModuleUptodate.NeedUpdate;
            }
         }
      }
      if self.option.transCtrlInfo.uptodateMode == .Touch {
         return ModuleUptodate.NeedTouch( metaCode, metaInfo );
      }
      return ModuleUptodate.Uptodate( metaInfo );
   }


   let metaInfo, metaPath, metaCode = getMetaInfo( lnsPath, mod, self.option.outputDir );

   when! metaInfo {
      // meta 情報があれば、 moduleId から更新済みかどうかを確認する
      if metaInfo.__enableTest == self.option.testing {
         let buildId = frontInterface.ModuleId.createIdFromTxt( metaInfo.__buildId );
         if buildId ~= frontInterface.ModuleId.tempId {
            let lnsTime = Depend.getFileLastModifiedTime( lnsPath );
            let metaTime = Depend.getFileLastModifiedTime( metaPath );
            when! lnsTime, metaTime {
               if lnsTime == buildId.$modTime {
                  // 更新済みならば、依存ファイルの状態を確認する
                  uptodate = checkDependUptodate( metaTime, metaInfo, metaCode );
               }
            }
         }
      }
      else {
         // テストコードを持つモジュールは、テストモードがあっていないものは更新が必要
      }
   }
   else {
      Log._log( .Debug, `{ return "not found meta"; } );
   }

   let moduleId = getModuleId( lnsPath, mod, self.option.outputDir, metaInfo );
   if moduleId == frontInterface.ModuleId.tempId {
      Util.err( "not found -- %s" ( lnsPath ) ); // 要対応
   }
   return moduleId, uptodate;
}

/**
指定 stream 内の LuneScript をコンパイルし、 Lua コードを取得する。
*/
pub fn Front.convertLns2LuaCode(
   importModuleInfo:frontInterface.ImportModuleInfo, analyzeMode:TransUnit.AnalyzeMode,
   tokenizerSrc:&Types.TokenizerSrc, baseDir:str!, stream:iStream, streamName:str ) mut : str
{
   let mod = self.scriptPath2Module( streamName, baseDir );
   let mut ast = self.createAst(
      importModuleInfo, tokenizerSrc, baseDir, mod,
      frontInterface.ModuleId.createId( 0.0, 0 ), nil, analyzeMode ## );

   let _, luaTxt = self.convertFromAst( ast, streamName, .ConvMeta );

   return luaTxt;
}

fn Front.getGoAppName(): str {
   let! appName = self.option.appName {
      appName = self.gomodMap.$name;
   };
   return appName;
}

fn Front.createGoOption( scriptPath:str ) : &convGo.Option {
   let packageName;
   if! self.option.packageName {
      packageName = _exp;
   } else {
      if not scriptPath.find( "/" ## ) {
         // "/" がない場合は main
         packageName = "main";
      }
      else {
         let parentPath = scriptPath.gsub( "/[^/]+$", "" ).gsub( ".*/", "" );
         if #parentPath == 0 {
            // root ファイルの場合
            packageName = "main";
         } elseif parentPath == "." {
            packageName = "main";
         } elseif parentPath == ".." {
            packageName = "main";
         } else {
            packageName = parentPath.gsub( "[^%w]", "" );
         }
      }
   }
   return new convGo.Option(
      packageName, self.getGoAppName(), self.option.mainModule,
      self.option.$addEnvArg, self.option.convGoRunnerNum,
      self.option.$sortGenerateCode );
}

fn Front.createPythonOption( scriptPath:str ) : &convPython.Option {
   let packageName;
   if! self.option.packageName {
      packageName = _exp;
   } else {
      if not scriptPath.find( "/" ## ) {
         // "/" がない場合は main
         packageName = "main";
      }
      else {
         let parentPath = scriptPath.gsub( "/[^/]+$", "" ).gsub( ".*/", "" );
         if #parentPath == 0 {
            // root ファイルの場合
            packageName = "main";
         } elseif parentPath == "." {
            packageName = "main";
         } elseif parentPath == ".." {
            packageName = "main";
         } else {
            packageName = parentPath.gsub( "[^%w]", "" );
         }
      }
   }
   return new convPython.Option(
      packageName, self.getGoAppName(), self.option.mainModule,
      false, self.option.convGoRunnerNum );
}


fn Front.convertToLanguage(ast:&AstInfo.ASTInfo, stream:oStream, path:str )
{
   switch self.option.convTo {
      case .Go {
         let mut conv = convGo.createFilter(
            self.option.testing, path, stream, ast, self.createGoOption( path ) );
         ast.$node.processFilter( conv, new convGo.Opt( ast.$node ) );
      }
      case .Python {
         let mut conv = convPython.createFilter(
            self.option.testing, path, stream, ast, self.createPythonOption( path ) );
         ast.$node.processFilter( conv, new convPython.Opt( ast.$node ) );
      }
   }
}

/**
tokenizer から Lns を AST 解析し、 meta 情報と変換後の Lua コード返す。

@return Luaval<&stem> meta 情報
@return str Lua コード
*/
fn Front.loadTokenizerToLuaCode(
   importModuleInfo:frontInterface.ImportModuleInfo, tokenizerSrc:&Types.TokenizerSrc,
   path:str, mod:str, baseDir:str! ) mut : frontInterface.ModuleMeta, str
{

   let moduleId = getModuleId( path, mod ## );
   let mut ast = self.createAst(
      importModuleInfo, tokenizerSrc, baseDir, mod, moduleId, nil, .Compile, nil );

   let mut metaTxt, luaTxt = self.convertFromAst( ast, path, .ConvMeta );
   Log._log2( .Trace, "Meta = %s" (metaTxt) );


   if self.option.updateOnLoad {
      fn saveFile( suffix:str, txt:str, byteCompile:bool,
                   stripDebugInfo:bool, checkUpdate:bool )
      {
         let mut newpath = "";
         if! let dir = self.option.outputDir {
            newpath = "%s/%s%s" ( dir, mod.gsub( "%.", "/" ), suffix );
         }
         else {       
            newpath = path.gsub( ".lns$", suffix );
         }
         let mut saveTxt = txt;
         if byteCompile {
            saveTxt = Converter.byteCompileFromLuaTxt( saveTxt, stripDebugInfo );
         }
         if not forceUpdateMeta and checkUpdate {
            if! let mut fileObj = Util.openRd( newpath ) {
               let oldTxt = fileObj.read( "*a" );
               fileObj.close();
               if saveTxt == oldTxt {
                  // 同じ場合はセーブしない
                  return;      
               }
            }
         }
         if! let mut fileObj = io.open( newpath, "w" ) {
            fileObj.write( saveTxt );
            fileObj.close();
         }
      }
      saveFile( ".lua", luaTxt, self.option.byteCompile,
                self.option.stripDebugInfo, false );
      if self.option.mode == .SaveMeta {
         saveFile( ".meta", metaTxt, self.option.byteCompile, true, true );
      }

      {
         let mut memStream = new Util.memStream();
         self.convertToLanguage( ast, memStream, path );
         if! let convTo = self.option.convTo {
            let suffix:str!;
            _switch convTo {
               case .Same, .Lua {
                  suffix = nil;
               }
               case .Go {
                  suffix = ".go";
               }
               case .Python {
                  suffix = ".py";
               }
               case .C {
                  suffix = ".c";
               }
            }
            when! suffix {
               saveFile( suffix, memStream.$txt, false, false, false );
            }
         }
      }
   }

   // let mut meta = new frontInterface.ModuleMeta(
   //    unwrap loadFromLuaTxt( metaTxt ), path, createModuleInfo( ast, mod, moduleId ) );
   // let mut meta = new frontInterface.ModuleMeta(
   //    path, .Module( createModuleInfo( ast, mod, moduleId ) ) );
   return unwrap self.moduleMgr.getMeta(mod), luaTxt;
}


/**
指定 path の LuneScript をロードし、
 meta 情報と変換した Lua コードをロードして実行した結果のオブジェクトを返す。

*/
fn Front.loadFile(
   importModuleInfo:frontInterface.ImportModuleInfo,
   baseDir:str!, path:str, mod:str ) mut : frontInterface.ModuleMeta, Luaval<&stem>
{
   Log._log2( .Info, "start %s:%s" ( __func__, mod ) );
   
   let mut meta, luaTxt = self.loadTokenizerToLuaCode(
      importModuleInfo,
      Types.TokenizerSrc.LnsPath( baseDir, path, mod, nil ), path, mod, baseDir )**;
   
   if! let mut preLoadInfo = self.preloadedModMap[ mod ] {
      return meta, preLoadInfo;
   }
   return meta, unwrap loadFromLuaTxt( luaTxt );
}



pub fn Front.searchModule( mod:str, baseDir:str!, addSearchPath:str! ) mut : str! {
   return self.searchModuleFile( mod, ".lns", baseDir, addSearchPath );
}

fn Front.searchLuaFile(
   moduleFullName:str, baseDir:str!, addSearchPath:str! ) mut : str!
{
   return self.searchModuleFile( moduleFullName, ".lua", baseDir, addSearchPath );
}

/**
指定のメタファイルが最新で更新が必要ないか調べる。

@param metaPath メタファイルのパス
@return stem! 最新の場合、ロードしたメタ情報。 最新でない場合は nil。
*/
fn Front.checkUptodateMeta(
   lnsPath:str, metaPath:str,
   baseDir:str!, addSearchPath:str! ) mut : frontInterface.ModuleMeta!
{
   let! metaObj = self.loadLua( metaPath ) {
      Log._log( .Warn, `{ return "load error -- %s" ( metaPath ); } );
      return nil;
   };

   let meta;
   let mut valid = true;
   __luaLock {
      meta = metaObj@@=Meta._MetaInfo;
      if meta.$__formatVersion ~= Ver.metaVersion {
         Log._log( .Warn, `{ return "unmatch meta version -- %s" ( metaPath ); } );
         valid = false;
      }
      if valid and meta.$__hasTest {
         // テストコードを持つモジュールは、テストモードがあっていないものは更新が必要
         if meta.$__enableTest ~= self.option.testing {
            Log._log( .Warn, `{ return "unmatch test setting -- %s" ( metaPath ); } );
            valid = false;
         }
      }
      if valid {
         foreach _, moduleFullName in meta.__dependModuleMap {
            if! let moduleLnsPath =
               self.searchModule( moduleFullName, baseDir, addSearchPath )
            {
               if! let moduleLuaPath = self.searchLuaFile(
                  moduleFullName, baseDir, addSearchPath ) {
                     if not Util.getReadyCode( moduleLnsPath, metaPath ) {
                        // 依存するモジュールが更新されている場合、
                        // 作成済みのメタファイルは使えないので nil を返す。
                        Log._log( .Warn, `{ return "not ready -- %s, %s"
                                            ( moduleLnsPath, metaPath ); } );
                        valid = false;
                        break;
                     }
                     let moduleMetaPath = moduleLuaPath.gsub( "%.lua$", ".meta" );
                     if Depend.existFile( moduleMetaPath ) and
                        not Util.getReadyCode( moduleMetaPath, metaPath )
                     {
                        Log._log( .Warn, `{ return "not ready -- %s, %s"
                                            ( moduleMetaPath, metaPath ); } );
                        valid = false;
                        break;
                     }
                  } else {
                     Log._log( .Warn, `{ return "not found .lua file for -- %s"
                                         ( moduleFullName ); } );
                     valid = false;
                     break;
                  }
            } else {
               Log._log( .Warn,
                         `{ return "not found .lns file -- %s" ( moduleFullName); } );
               valid = false;
               break;
            }
         }
      }
   }
   if not valid {
      return nil;
   }
   return new frontInterface.ModuleMeta( lnsPath, .MetaRaw( meta ) );
}



/**
mod のモジュールをロードする。

@return Luaval<&stem>! モジュール情報
@return Luaval<&stem> META 情報
*/
fn Front.loadModuleWithBaseDir( orgMod:str, baseDir:str! ) __async mut :
Luaval<&stem>!, frontInterface.ModuleMeta
{
   Log._log2( .Info, "loadModule  -- %s:%s" (orgMod, baseDir) );
   
   let _, _, mod = self.gomodMap.getLuaModulePath( orgMod, baseDir );
   
   if not self.getLoadInfo( mod ) {
      if! let luaTxt = self.convertedMap[ mod ] {
         // 変換済みの lua のコードがある場合
         if! let mut meta = self.moduleMgr.getMeta( mod ) {
            self.setLoadInfo(
               mod, new LoadInfo( unwrap loadFromLuaTxt( luaTxt ), meta ) );
         }
         else {
            // convertedMap に登録されていて getMeta() が失敗するのはバグ
            Util.err( "nothing meta -- %s" ( mod ) ); // バグ
         }
      }
      else {
         // 変換済みの lua のコードがない場合
         if! let lnsPath = self.searchModule( orgMod, baseDir, nil ) {
            let mut luaPath:str! = string.gsub( lnsPath, "%.lns$", ".lua" );

            if! let dir = self.option.outputDir {
               luaPath = self.searchLuaFile( orgMod, nil, dir );
            }

            let mut loadVal:Luaval<&stem>! = nil;
            when! luaPath {
               if Util.getReadyCode( lnsPath, luaPath ) {
	          let metaPath = string.gsub( luaPath, "%.lua$", ".meta" );
	          if Util.getReadyCode( lnsPath, metaPath ) {
                     if! let preLoadInfo = self.preloadedModMap[ mod ] {
                        loadVal = preLoadInfo;
                     }
                     else {
	                loadVal = self.loadLua( luaPath );
                     }
                     if! loadVal {
                        if! let mut meta = self.checkUptodateMeta(
                           lnsPath, metaPath, baseDir, self.option.outputDir )    
                        {
	                   self.setLoadInfo( mod, new LoadInfo( _exp, meta ) );
                        }
                        else {
                           loadVal = nil;
                        }
                     }
                  }
               }
            }
            if loadVal == nil {
	       let mut meta, mut workVal = self.loadFile(
                  new frontInterface.ImportModuleInfo(), baseDir, lnsPath, mod );
	       self.setLoadInfo( mod, new LoadInfo( workVal, meta ) );
            }
         } else {
            // lns ファイルがない場合、 binding からロードする。
            if self.bindModuleSet.has( mod ) {
               Log._log2( .Warn, "load from the binding -- %s" (mod) );
               // require( mod ) することで、 bind しているモジュールをロードする。
               let workMod;

               __luaLock {
                  workMod = require( mod );
               }
               // meta は使用しないのでダミーで生成する。
               // 将来 meta を利用することになった場合は、修正が必要。             
               let mut meta = new frontInterface.ModuleMeta(
                  mod.gsub( "%.", "/" ) .. ".lns",
                  .MetaRaw( unwrap loadFromLuaTxt( "return {}" ) ) );
	       self.setLoadInfo( mod, new LoadInfo( workMod, meta ) );
            }
         }
      }
   }
   if! self.getLoadInfo( mod ) {
      //TestCtrl.add( mod, _exp.mod );
      return _exp.mod, _exp.meta;
   }
   // ここにくるのはバグ
   Util.err( "load error, %s" ( mod ) ); // バグ
}

/**
mod のモジュールをロードする。

@return Luaval<&stem>! モジュール情報
@return Luaval<&stem> META 情報
*/
pub fn Front.loadModule( mut mod:str ) __async mut :
Luaval<&stem>!, frontInterface.ModuleMeta
{
   return self.loadModuleWithBaseDir( mod, nil )**;
}


pub fn Front.getLuaModulePath( mod:str, baseDir:str! ) mut : str, str!, str {
   return self.gomodMap.getLuaModulePath( mod, baseDir )**;
}

pub fn Front.loadMeta(
   importModuleInfo:frontInterface.ImportModuleInfo, mod:str, orgMod:str,
   baseDir:str!, loader:frontInterface.ModuleLoader ) mut : frontInterface.ModuleMeta!
{
   if! let mut creater = self.mod2astCreate[ orgMod ] {
      let! exportInfo = creater.getExportInfo() {
         return nil;
      };
      let mut meta = new frontInterface.ModuleMeta(
         exportInfo.$streamName, .Export( exportInfo ));
      self.moduleMgr.addMeta( orgMod, meta );
   }

   if! let mut workLoader = self.mod2loader[ orgMod ] {
      let! exportInfo = workLoader.getExportInfo() {
         return nil;
      };
      let mut meta = new frontInterface.ModuleMeta(
         exportInfo.$streamName, .Export( exportInfo ));
      self.moduleMgr.addMeta( orgMod, meta );

      // // self.mod2loader をクリアするのは self.moduleMgr.addMeta() の後にする。
      // // こうしないと、self.moduleMgr.getMeta() に反映されないので、
      // // 再度 .meta から読み込んでしまう。
      // self.mod2loader[ orgMod ] = nil;
      return meta;
   }

   
   if not self.moduleMgr.getMeta( orgMod ) {
      self.mod2loader[ orgMod ] = loader;
      
      if! self.getLoadInfo( orgMod ) {
         // ロード済みのものを使用する
         self.moduleMgr.addMeta( orgMod, _exp.meta );
      } else {
         if! let lnsPath = self.searchModule( mod, baseDir, nil ) {
            let mut meta:frontInterface.ModuleMeta! = nil;
            let mut luaPath:str! = string.gsub( lnsPath, "%.lns$", ".lua" );

            if not self.targetSet.has( orgMod ) {
               luaPath = string.gsub( lnsPath, "%.lns$", ".lua" );
               if not baseDir {
                  if! let dir = self.option.outputDir {
                     luaPath = self.searchLuaFile( orgMod, nil, dir );
                  }
               }
               when! luaPath {
                  // .lua, .meta ファイルが更新済みか調べ
                  // 更新済みならそれをロードする
                  
                  let forceFlag;
                  _match self.option.transCtrlInfo.uptodateMode {
                     case .ForceAll {
                        forceFlag = true;
                     }
                     case .Force1( forceMod ) {
                        forceFlag = orgMod == forceMod;
                     }
                     case .Normal {
                        forceFlag = false;
                     }
                     case .Touch {
                        forceFlag = false;
                     }
                  }
                  if not forceFlag {
                     if Util.getReadyCode( lnsPath, luaPath ) {
	                let metaPath = string.gsub( luaPath, "%.lua$", ".meta" );
	                if Util.getReadyCode( lnsPath, metaPath ) {
                           meta = self.checkUptodateMeta(
                              lnsPath, metaPath, baseDir, self.option.outputDir );
                        } else {
                           Log._log( .Warn, `{ return "%s not ready meta %s, %s"
                                               ( orgMod, lnsPath, metaPath ); } );
                        }
                     } else {
                        Log._log( .Warn, `{ return "%s not ready lua %s, %s"
                                            ( orgMod, lnsPath, luaPath ); } );
                     }
                  } else {
                     Log._log2( .Warn, "force analyze -- %s" ( orgMod ) );
                  }
               }
               else {
                  Log._log( .Warn, `{ return "%s not found lua in %s"
                                      ( orgMod, self.option.outputDir ); } );
               }
            }

            when! meta {
	       self.moduleMgr.addMeta( orgMod, meta );
               switch self.option.mode {
                  case .Exec, .Shebang {
                     // self.regConvertedMap 時間短縮のため、
                     // 実行のときのみ luaCode を登録する。
                     when! luaPath {
                        if! let luaCode = Util.readFile( luaPath ) {
                           self.regConvertedMap( orgMod, luaCode, meta );
                        }
                     }
                  }
               }
            }
            else {
	       let mut metawork, luaTxt = self.loadTokenizerToLuaCode(
                  importModuleInfo,
                  Types.TokenizerSrc.LnsPath( nil, lnsPath, orgMod, nil ),
                  lnsPath, orgMod, baseDir );
               self.regConvertedMap( orgMod, luaTxt, metawork );
	       // self.moduleMgr.addMeta( orgMod, metawork );
               // self.convertedMap[ orgMod ] = luaTxt;
            }
         } else {
            if! let lnsCode = Depend.getBindLns( orgMod ) {
               let path = mod.gsub( "%.", "/" ) .. ".lns";
               let mut meta, luaTxt = self.loadTokenizerToLuaCode(
                  importModuleInfo, 
                  Types.TokenizerSrc.LnsCode( lnsCode, orgMod, nil ),
                  path, orgMod, baseDir );
               self.regConvertedMap( orgMod, luaTxt, meta );
	       // self.moduleMgr.addMeta( orgMod, meta );
               // self.convertedMap[ orgMod ] = luaTxt;
            }
         }
      }
   }

   if! let mut meta = self.moduleMgr.getMeta( orgMod ) {
      return meta;
   }
   return nil;
}

pub fn Front.dumpTokenize( scriptPath:str, baseDir:str! ) mut {
   //frontInterface.setFront( self );

   let mut tokenizer = self.createPaser( scriptPath, baseDir );
   while true {
      let! token = tokenizer.getToken() {
         break;
      };
      Util.println( token.kind.$_txt, token.consecutive,
                    token.pos.lineNo, token.pos.column, token.txt );
   }
}

//pub fn Front.dumpAst( scriptPath:str, baseDir:str! ) mut {
pub fn Front.dumpAst( tokenizerSrc:&Types.TokenizerSrc, mod:str,
                      moduleId:&frontInterface.ModuleId, baseDir:str! ) mut
{
   //frontInterface.setFront( self );

   Depend.profile(
      self.option.validProf,
      fn() {
	 let mut ast = self.createAst(
            new frontInterface.ImportModuleInfo(),
            tokenizerSrc, baseDir, mod, moduleId,
            nil, .Compile ## );
	 ast.$node.processFilter(
            dumpNode.createFilter(
               ast.$exportInfo.$moduleTypeInfo,
               ast.$exportInfo.$processInfo, io.stdout ),
            new dumpNode.Opt( "", 0 ) );
      }, mod .. ".profi" );
}

//pub fn Front.format( scriptPath:str, baseDir:str! ) mut {
pub fn Front.format( tokenizerSrc:&Types.TokenizerSrc, mod:str,
                     moduleId:&frontInterface.ModuleId, baseDir:str! ) mut
{
   let mut ast = self.createAst(
      new frontInterface.ImportModuleInfo(),
      tokenizerSrc, baseDir, mod, moduleId,
      nil, .Compile ## );
   ast.$node.processFilter(
      Formatter.createFilter(
         ast.$exportInfo.$moduleTypeInfo, io.stdout, false ),
      new Formatter.Opt( ast.$node ) );
}

pub fn Front.checkDiag( tokenizerSrc:&Types.TokenizerSrc, mod:str,
                        moduleId:&frontInterface.ModuleId, baseDir:str! ) mut
{
   Util.setErrorCode( 0 );
   self.createAst( new frontInterface.ImportModuleInfo(),
                   tokenizerSrc, baseDir, mod, moduleId, nil, .Diag ## );
}

fn Front.complete( tokenizerSrc:&Types.TokenizerSrc, mod:str,
                   moduleId:&frontInterface.ModuleId, baseDir:str! ) mut
{
   self.createAst( new frontInterface.ImportModuleInfo(),
                   tokenizerSrc, baseDir, mod, moduleId,
                   self.option.analyzeModule, .Complete, self.option.analyzePos );
}

pub fn Front.completeFromCode( lnsCode:str, mod:str, baseDir:str! ) mut {
   self.complete( .LnsCode( lnsCode, mod, nil ), mod,
                  frontInterface.ModuleId.createId( 0.0, 0 ), baseDir );
}


pub fn Front.inquire( tokenizerSrc:&Types.TokenizerSrc, mod:str,
                      moduleId:&frontInterface.ModuleId, baseDir:str! ) mut
{
   self.createAst( new frontInterface.ImportModuleInfo(),
                   tokenizerSrc, baseDir, mod, moduleId,
                   self.option.analyzeModule, .Inquire, self.option.analyzePos );
}


pub fn Front.createGlue( tokenizerSrc:&Types.TokenizerSrc, mod:str,
                         moduleId:&frontInterface.ModuleId, baseDir:str! ) mut
{
   let mut ast = self.createAst(
      new frontInterface.ImportModuleInfo(),
      tokenizerSrc, baseDir, mod, moduleId, nil, .Compile ## );
   let mut filter = glueFilter.createFilter( self.option.outputDir );
   ast.$node.processFilter( filter, 0 );
}

fn outputDependInfo( stream:oStream!, metaInfo:&MetaForBuildId, mod:str ) {
   when! stream {
      let mut dependInfo = new OutputDepend.DependInfo( mod );
      foreach _, dependMod in metaInfo.__dependModuleMap {
         dependInfo.addImpotModule( dependMod );
      }
      foreach subMod in metaInfo.__subModuleMap {
         dependInfo.addSubMod( subMod );
      }
      dependInfo.output( stream );
   }
}

fn Front.convertToLua(
   scriptPath:str, baseDir:str!, convMode:convLua.ConvMode,
   streamLua:oStream, streamMeta:oStream ) mut : &AstInfo.ASTInfo!
{
   let mod = self.scriptPath2Module( scriptPath, baseDir );

   let moduleId = getModuleId( scriptPath, mod ## );
   let mut ast = self.createAst(
      new frontInterface.ImportModuleInfo(),
      Types.TokenizerSrc.LnsPath( baseDir, scriptPath, mod, nil ), baseDir,
      mod, moduleId, nil, .Compile, nil );
   let mut metaTxt, luaTxt = self.convertFromAst( ast, scriptPath, convMode );
   streamLua.write( luaTxt );
   streamMeta.write( metaTxt );
   
   self.convertToLanguage( ast, streamLua, scriptPath );

   return ast;
}

/**
Go に変換しファイルに書き込む
*/
local fn Front.saveToGo(
   scriptPath:str, astResult:&Converter.CreateAstResult, mod:str ) mut :
Converter.GoConverter!
{
   return new Converter.GoConverter(
      scriptPath, astResult, mod, self.option, self.createGoOption( scriptPath ) );
}

/**
Python に変換しファイルに書き込む
*/
local fn Front.saveToPython(
   scriptPath:str, astResult:&Converter.CreateAstResult, mod:str ) mut :
Converter.PythonConverter!
{
   return new Converter.PythonConverter(
      scriptPath, astResult, mod, self.option, self.createPythonOption( scriptPath ) );
}


/**
C に変換しファイルに書き込む
*/
pub fn Front.saveToC( scriptPath:str, ast:&AstInfo.ASTInfo ) mut {
   let mut cPath = scriptPath.gsub( "%.lns$", ".c" );

   let! mut file = io.open( cPath, "w" ) {
      return;
   };

   let mut hPath = scriptPath.gsub( "%.lns$", ".h" );
   let! mut hFile = io.open( hPath, "w" ) {
      return;
   };

   file.close();
   hFile.close();
}

pub fn Front.outputBuiltin( scriptPath:str ) mut {
   let mod, baseDir = self.scriptPath2Module( "lns_builtin", nil );

   let mut ast = self.createAst(
      new frontInterface.ImportModuleInfo(),
      Types.TokenizerSrc.LnsCode( "", mod, nil ), baseDir, mod,
      frontInterface.ModuleId.createId( 0.0, 0 ), nil, .Compile ## );

   self.saveToC( scriptPath, ast );
}

class UpdateInfo {
   let scriptPath:str {pub};
   let dependsPath:str! {pub};
   //let mut tokenizer:Tokenizer.Tokenizer! {pub};
   let moduleId:&frontInterface.ModuleId {pub};
   let uptodate: ModuleUptodate {pub};
}

/**
Lua に変換しファイルに書き込む
*/
fn Front.saveToLua( updateInfo:UpdateInfo, baseDir:str! ) mut : Converter.ConverterFunc!
{
   let scriptPath = updateInfo.$scriptPath;
   let dependsPath = updateInfo.$dependsPath;
   //let mut tokenizer = updateInfo.$tokenizer;
   let moduleId = updateInfo.$moduleId;
   let uptodate = updateInfo.$uptodate;
   

   let mod = self.scriptPath2Module( scriptPath, baseDir );
   let mut luaPath = scriptPath.gsub( "%.lns$", ".lua" );
   let mut metaPath = scriptPath.gsub( "%.lns$", ".meta" );
   if self.option.outputDir {
      let filename = mod.gsub( "%.", "/" );
      luaPath = "%s/%s.lua" ( self.option.outputDir, filename );
      metaPath = "%s/%s.meta" ( self.option.outputDir, filename );
   }

   // Meta 出力モードで変換する。
   // Meta は memStream 上に出力し、不要な場合は保存せずに破棄する。
   let convMode = convLua.ConvMode.ConvMeta;



   if luaPath == scriptPath {
      Util.errorLog( "%s is illegal filename." (luaPath) );
      return nil;
   }
   
   // .meta ファイルを更新すると、このモジュールを import している
   // モジュール全てを更新する必要がある。
   // しかし、この更新処理は無駄になることが多い。
   // 例えば、モジュール内の local な関数の挙動を変更しただけならば、
   // このモジュールを import しているモジュールには影響がないので、
   // 更新の必要はない。
   // このような無駄な更新処理をスキップできるように、
   // .meta 情報に変更がない場合は、外部モジュールの更新が行なわれないように
   // 制御を行なう。


   _match uptodate {
      case .NeedUpdate {
         let mut result = self.createAstSub(
            new frontInterface.ImportModuleInfo(),
            Types.TokenizerSrc.LnsPath( baseDir, scriptPath, mod, nil ), baseDir,
            mod, moduleId, nil, .Compile, ## );

         let luaConv:Converter.LuaConverter!;
         if self.option.noLua {
            luaConv = nil;
         } else {
            luaConv = new Converter.LuaConverter(
               luaPath, metaPath, dependsPath,
               result, convMode, scriptPath, self.option.byteCompile,
               self.option.stripDebugInfo, self.option );
         }

         let mut goConv:Converter.GoConverter! = nil;
         let mut pyConv:Converter.PythonConverter! = nil;
         switch self.option.convTo {
            // case .C {
            //    self.saveToC( scriptPath,  );
            // }
            case .Python {
               pyConv = self.saveToPython( scriptPath, result, mod );
            }
            case .Go {
               goConv = self.saveToGo( scriptPath, result, mod );
            }
         }
         return fn () __noasync {
            luaConv$.saveLua$();
            goConv$.saveGo$();
            pyConv$.savePython$();
         };
      }
      case .Uptodate( metaInfo ) {
         Util.errorLog( "uptodate -- " .. scriptPath );

         let mut dependsStream = self.option.openDepend( dependsPath );
         outputDependInfo( dependsStream, metaInfo, mod );
         Converter.closeStreams( nil, nil, dependsStream, metaPath, false );

         return nil;
      }
      case .NeedTouch( metaCode, metaInfo ) {
         // Lns は解析せずにメタファイルの更新日時だけ更新する。
         Util.errorLog( "touch -- " .. scriptPath );

         let mut dependsStream = self.option.openDepend( dependsPath );
         let mut metaMemStream = new Util.memStream();
         if self.option.mode == .SaveMeta {
            metaMemStream.write( metaCode );
         }
         outputDependInfo( dependsStream, metaInfo, mod );
         Converter.closeStreams( nil, metaMemStream, dependsStream,
                                 metaPath, self.option.mode == .SaveMeta );
         return nil;
      }
   }
}


fn Front.outputBootC( scriptPath:str )
{
   // let mut stream:oStream;
   // if! let path = self.option.bootPath {
   //    let cPath = path.gsub( "%.lns$", ".c" );
   //    let! mut file = io.open( cPath, "w" ) {
   //       print( "failed to open file -- %s" (cPath) );
   //       return;
   //    };
   //    stream = file;
   // }
   // else {
   //    stream = io.stdout;
   // }
   // let initModule = scriptPath2Module( scriptPath );
   // convCC.outputBootcode( stream, initModule );
}

pub fn Front.convertLnsCode2LuaCodeWithOpt(
   lnsCode:str, path:str, baseDir:str! ) mut : str
{
   return self.convertLns2LuaCode(
      new frontInterface.ImportModuleInfo(), .Compile,
      Types.TokenizerSrc.LnsCode( lnsCode, path, nil ), baseDir,
      new Tokenizer.TxtStream( lnsCode ), path );
}

pub fn convertLnsCode2LuaCode( lnsCode:str, path:str, baseDir:str! ) __noasync : str
{
   let mut option = new Option.Option();
   option.scriptPath = path;
   option.useLuneModule = Option.getRuntimeModule();
   option.useIpairs = true;

   let mut front = new Front( option ## );
   return front.convertLnsCode2LuaCodeWithOpt( lnsCode, path, baseDir );
}

fn getBaseDir( path:str, userProjDir:str! ) : str, str! {
   let projDir:str;
   when! userProjDir {
      projDir = userProjDir;
   } else {
      if path.find( "^/" ## ) or path.find( "^%.%./" ## ) {
         // userProjDir が指定されていない場合、かつ path が絶対パスの場合、
         // path から見つける。
         let parentPath = Util.parentPath( path );
         if! let workDir = Util.searchProjDir( parentPath ) {
            projDir = workDir;
         } else {
            projDir = parentPath;
         }
      } else {
         // userProjDir が指定されていない場合、かつ path が相対パスの場合、
         // カレントが projDir として扱う。       
         return path, nil;
      }
   }
   let scriptPath;
   if #projDir == 1 {
      // "/" の場合
      scriptPath = path.sub( 2## );
   } else {
      // "/" 以外の場合、
      scriptPath = path.sub( #projDir + 2## );
   }
   return scriptPath, projDir;
}

fn getParseSrcAndBaseDir( path:str, userProjDir:str! ) :
Types.TokenizerSrc, str, &frontInterface.ModuleId, str!
{
   let workPath, projDir = getBaseDir( path, userProjDir );
   let mod = Util.scriptPath2ModuleFromProjDir( workPath, projDir );
   let moduleId = getModuleId( path, mod ## );
   return Types.TokenizerSrc.LnsPath( projDir, workPath, mod, nil ), mod, moduleId, projDir;
}

pub alge BuildMode {
   Save,
   CreateAst,
   Output(streamLua:oStream, streamMeta:oStream),
}

pub fn Front.build( buildMode:BuildMode, astCallback:AstCallback! ) mut {

   fn createUpdateInfo( scriptPath:str, dependsPath:str!, baseDir:str! ) : UpdateInfo {
      let mod = self.scriptPath2Module( scriptPath, baseDir );
      let moduleId, uptodate = self.getModuleIdAndCheckUptodate( scriptPath, mod );
      return new UpdateInfo( scriptPath, dependsPath, moduleId, uptodate );
   }

   fn process( oneShot:bool, updateInfo:UpdateInfo,
               baseDir:str! ) __trans : Converter.ConverterFunc!
   {
      let mod = self.scriptPath2Module( updateInfo.$scriptPath, baseDir );
      
      _match buildMode {
         case .Save {
            return self.saveToLua( updateInfo, baseDir );
         }
         case .Output( streamLua, streamMeta ) {
            self.convertToLua(
               updateInfo.$scriptPath, baseDir, .ConvMeta, streamLua, streamMeta );       
         }
         case .CreateAst {
            if not self.mod2astCreate[ mod ] and not self.moduleMgr.getAst( mod ) {     
               let mut result = self.createAstSub(
                  new frontInterface.ImportModuleInfo(),
                  Types.TokenizerSrc.LnsPath( baseDir, updateInfo.$scriptPath, mod, nil ),
                  baseDir, mod, updateInfo.$moduleId, nil, .Compile, ## );
               return fn () __noasync {
                  self.applyAstResult( result );
               };
            }
         }
      }
      return nil;
   }

   Depend.profile(
      self.option.validProf,
      fn () {
         if self.option.scriptPath == "@-" {
            let baseDir = self.option.$projDir;
            // pending: batch モードの場合は forceAll にする。
            foreach path in self.option.batchList {
               self.targetSet.add( (self.scriptPath2Module( path, baseDir )) );
            }

            let postProcessMap:Map<int,Converter.ConverterFunc> = {};
            foreach path, index in self.option.batchList {
               let mut updateInfo =
                  createUpdateInfo( path, (path.gsub( ".lns$", ".d" )), baseDir );
               Util.println( "%s: start..." ( updateInfo.$scriptPath));
               if! process( false, updateInfo, nil ) {
                  if self.option.$validPostBuild {
                     postProcessMap[ index ] = _exp;
                  } else {
                     _exp();
                  }
               }
            }

            forsort postProcess, index in postProcessMap {
               let prev = os.clock();
               let path = self.option.batchList[ index ];
               Util.println( "%s: waiting..." (path) );
               postProcess();
               Util.println( "%s: done %g msec" ( path, (os.clock() - prev) * 1000));
            }
         } else {
            let _, baseDir = getBaseDir( self.option.scriptPath, self.option.$projDir );
            if! let postProcess = process(
               true, createUpdateInfo( self.option.scriptPath, nil, baseDir ), baseDir )
            {
               postProcess();
            }
         }

         when! astCallback {
            foreach mod in self.moduleMgr.getModList() {
               if! self.moduleMgr.getAst( mod ) {
                  astCallback( _exp );
               } else {
                  Log._log2( .Err, "not found AST -- %s" (mod) );
               }
            }
         }
         __lns.runtime.log( "end profile" );
      }, self.option.scriptPath .. ".profi" );
}

pub fn buildWithBuildMode(
   option:Option.Option, buildMode:BuildMode, astCallback:AstCallback! ) mut
{
   let mut front;
   __asyncLock {
      front = new Front( option ## );
   }
   front.build( buildMode, astCallback );
}

pub fn build( option:Option.Option, astCallback:AstCallback! ) mut {
   buildWithBuildMode( option, .CreateAst, astCallback );
}


pub fn Front.setupPreloadWithImportedModules( asyncFlag:bool ) {
   macro _setupPreload( block:__block ) {
      {}
      if asyncFlag {
         __luaDepend {
            ,,block;
         }
      } else {
         __luaLock {
            ,,block;
         }
      }
   }

   _setupPreload( {
      // import( submod ) の処理で、変換済みの submod の lua をロードするように
      // package.preload を設定する。
      let subModPreLoad = ```
return function( submod2Code, dumpCode )
   local preloadFunc = function( mod )
      code = submod2Code[ mod ]
      local loadFunc = loadstring or load -- lua5.1 and lua5.2
      local loaded, mess = loadFunc( code )
      if not loaded then
         error( mess )
      end
      return loaded()
   end
   for mod, code in pairs( submod2Code ) do
      if dumpCode then
         print( string.format( "mod: %s %s", mod, code ) )
      end
      package.preload[ mod ] = preloadFunc
   end
end
```;
      let! loaded = _load( subModPreLoad ## ) {
         Util.err( "failed to subModPreLoad" ); // バグ
      };
      let! preloadFunc = loaded(##) {
         Util.err( "failed to preloadFunc" ); // バグ
      };
          (preloadFunc@@form)( self.convertedMap, Log.getLevel() >= Log.Level.Debug );
   } );
}

fn Front.executeLns( path:str, baseDir:str! ) mut : Luaval<&stem>!, str {
   // // LuneScript の runtime をロードするために runLuaOnLns() を実行。
   // DependLuaOnLns.runLuaOnLns( "", nil, false );

   let mod = Util.scriptPath2ModuleFromProjDir( path, baseDir );

   // 指定の path の Lns コードを Lua コードに変換する。
   // この時に path が import している submod の lua への変換を行なう。
   let tokenizerSrc = Types.TokenizerSrc.LnsPath( baseDir, path, mod, nil );
   let _, luaCode = self.loadTokenizerToLuaCode(
      new frontInterface.ImportModuleInfo(), tokenizerSrc, path, mod, baseDir )**;
   Log._log2( .Debug, "luacode: " .. luaCode );

   self.setupPreloadWithImportedModules( false );
   
   // path の luacode を実行する。
   // preload を設定しているので 変換済みの submod の lua がロードされる。
   return loadFromLuaTxt( luaCode ), mod;
}

fn Front.executeLnsAndTest( path:str, baseDir:str! ) mut {
   let _, mod = self.executeLns( path, baseDir );
   
   if self.option.testing {
      let code = ```
local Testing = require( "lune.base.Testing" )
return function( path )
  Testing.run( path );
  Testing.outputAllResult( io.stdout );
end
```;
      __luaLock {
         let loaded, mess = _load( code ## );
         when! loaded {
            if! let testFunc = loaded(##) {
               (testFunc@@form)( mod );
            }
         } else {
            Util.println( mess );
         }
      }
   }
}

pub fn Front.exec() mut
{
   Log._log( .Trace, `{ return self.option.mode.$_txt; } );

   switch self.option.mode {
      case .Token {
         self.dumpTokenize(
            getBaseDir( self.option.scriptPath, self.option.$projDir )** );
      }
      case .Ast {
         self.dumpAst( getParseSrcAndBaseDir(
            self.option.scriptPath, self.option.$projDir )** );
      }
      case .Format {
         self.format( getParseSrcAndBaseDir(
            self.option.scriptPath, self.option.$projDir )** );
      }
      case .Diag {
         self.checkDiag( getParseSrcAndBaseDir(
            self.option.scriptPath, self.option.$projDir )** );
      }
      case .Complete {
         self.complete( getParseSrcAndBaseDir(
            self.option.scriptPath, self.option.$projDir )** );
      }
      case .Inquire {
         self.inquire( getParseSrcAndBaseDir(
            self.option.scriptPath, self.option.$projDir )** );
      }
      case .Glue {
         self.createGlue( getParseSrcAndBaseDir(
            self.option.scriptPath, self.option.$projDir )** );
      }
      case .Lua, .LuaMeta {
         let convMode:convLua.ConvMode;
         if self.option.mode == .Lua {
            convMode = .Convert;
         } else {
            convMode = .ConvMeta;
         }
         let scriptPath, baseDir =
            getBaseDir( self.option.scriptPath, self.option.$projDir );
         self.convertToLua(
            scriptPath, baseDir, convMode, io.stdout, io.stdout );     
      }
      case .Save, .SaveMeta {
         self.build( .Save, nil );
      }
      case .BuildAst {
         self.build(
            .CreateAst,
            fn ( ast: &AstInfo.ASTInfo ) {
               Util.println( ast.$streamName );
            });
      }
      case .Shebang {
         Depend.setupShebang();
         __luaLock {
            let! modObj = self.executeLns(
               getBaseDir( self.option.scriptPath, self.option.$projDir )** )
            {
               os.exit( 1 );
            };
            let code = Depend.runMain( modObj.__main, self.option.shebangArgList );
            os.exit( code );
         }
         
         // __luaLock {
         //    let scriptPath, baseDir =
         //       getBaseDir( self.option.scriptPath, self.option.$projDir );
         //    if! let modObj =
         //       self.loadModuleWithBaseDir(
         //          self.scriptPath2Module( scriptPath, baseDir ), baseDir )
         //    {
         //       let code = Depend.runMain( modObj.__main, self.option.shebangArgList );
         //       os.exit( code );
         //    }
         // }
      }
      case .GoMod {
         foreach path in self.gomodMap.getModPathList() {
            Util.println( path );
         }
      }
      case .Exec {
         self.executeLnsAndTest(
            getBaseDir( self.option.scriptPath, self.option.$projDir )** );
      }
      case .BootC {
         self.outputBootC( self.option.scriptPath );
      }
      case .Builtin {
         self.outputBuiltin( self.option.scriptPath );
      }
      case .MkMain {
         let mod = self.scriptPath2Module( self.option.scriptPath, self.option.$projDir );
         if! let mess = convGo.outputGoMain(
            self.getGoAppName(), mod, self.option.testing,
            self.option.outputDir, self.option.$runtimeOpt )
         {
            Util.errorLog( mess );
         }
      }
      case .Indexer {
         self.build(
            .CreateAst,
            fn ( ast: &AstInfo.ASTInfo ) {
               let mut indexer = new NodeIndexer.Indexer( ast.$exportInfo.$processInfo );
               indexer.start(
                  ast.$node,
                  (@
                    Nodes.NodeKind.$Switch,
                    Nodes.NodeKind.$Match,
                    Nodes.NodeKind.$For,
                    Nodes.NodeKind.$Apply
                  ) );
               indexer.dump();
            });
      }
      default {
         Util.println( "illegal mode" );
      }
   }
}

pub fn exec( args: &List<str> ) __noasync {
   let version =
      unwrap tonumber( Depend.getLuaVersion().gsub( "^[^%d]+", "" ), nil ) default 0.0;

   if version < 5.1 {
      Util.errorLog(
         string.format( "LuneScript doesn't support this lua version(%s). %s\n",
        	        version, "please use the version >= 5.1.") );
      os.exit( 1 );
   }

   let mut option = Option.analyze( args );
   let mut front = new Front( option ## );

   front.exec();

   if option.validProf {
      // 終了時のランタイムログを有効にする
      Depend.setRuntimeLog( true );
   }
}

pub fn __main( argList:&_List<str> ) __noasync : int {
   let list:List<str> = [];
   foreach arg, index in argList {
      if index > 1 {
         list.insert( arg );
      }
   }

   exec( list );

   return 0;
}

__test case1(ctrl) {
   let luaCode = convertLnsCode2LuaCode( convLua.getTestLnsCode(), "test.lns", nil );
   convLua.runTestCode( ctrl, luaCode );

   exec( [ "lune/base/Ver.lns", "lua" ] );
}
