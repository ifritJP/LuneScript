/*
MIT License

Copyright (c) 2018,2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

pub enum Conv {
   C,
   Go,
}

/** meta ファイルの更新必要性チェックモード */
pub enum CheckingUptodateMode {
   /** uptodate チェックせずに必ずビルドしなおす */
   Force = "force",
   /** uptodate チェックし、 uptodate だった場合なにもしない */
   Normal = "none",
   /** uptodate チェックし、 uptodate だった場合 touch だけ行なう */
   Touch = "touch",
}

pub class TransCtrlInfo {
   /** shadowing をワーニングにする */
   pub let mut warningShadowing:bool;
   /** コメントを従来互換の処理する */
   pub let mut compatComment:bool;
   /** ## を明示していない時の warning を出力するかどうか。 trueの場合出力する。*/
   pub let mut checkingDefineAbbr:bool;
   /** warning 発生した場合、 AST 解析を続けるかどうか。 true の場合止める。*/
   pub let mut stopByWarning:bool;
   pub let mut uptodateMode:CheckingUptodateMode;
   pub let mut validLuaval:bool;
   /** 指定しない場合のモードを lazy にする */
   pub let mut defaultLazy:bool;
}

pub static fn TransCtrlInfo.create_normal(): TransCtrlInfo {
   return new TransCtrlInfo( false, false, true, false, .Touch, false, false );
}


pub class Position extend (Mapping) {
   pub let lineNo: int;
   pub let column: int;
   pub let streamName: str;
}

pub enum TokenKind {
   Cmnt,
   Str,
   Int,
   Real,
   Char,
   Symb,
   Dlmt,
   Kywd,
   Ope,
   Type,
   Eof,
}

pub class Token extend (Mapping) {
   pub let kind: TokenKind;
   pub let txt: str;
   pub let pos: &Position;
   /** 直前のトークンと連続しているトークンかどうか。 true の場合連続。 */
   pub let consecutive: bool;
   pri let allmut commentList: &List<&Token> { pub& };

   pub fn __init( kind: TokenKind, txt: str, pos: &Position,
                  consecutive:bool, commentList: Token[]! )
   {
      self.kind = kind;
      self.txt = txt;
      self.pos = pos;
      self.consecutive = consecutive;
      self.commentList = unwrap commentList default [];
   }

   pub fn getExcludedDelimitTxt() : str {
      if self.kind ~= .Str {
         return self.txt;
      }
      switch self.txt[1] {
         case ?\', ?\" {
            return self.txt.sub( 2, #self.txt - 1 );
         }
         case ?` {
            return self.txt.sub( 1 + 3, #self.txt - 3 );
         }
      }
      error( "illegal delimit -- %s" (self.txt) );
   }

   pub fn set_commentList( commentList: &List<&Token> ) {
      self.commentList = commentList;
   }

   pub fn getLineCount():int {
      let mut count = 1;
      apply _ of self.txt.gmatch( "\n" ) {
         count = count + 1;
      }
      return count;
   }
}

pub let noneToken = new Token( .Eof, "", new Position( 0, -1, "eof" ), false, [] );
