/*
MIT License

Copyright (c) 2018 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

_lune_control default_async_all;


import lune.base.Ast;
import lune.base.Nodes;
//import lune.base.Parser;
import lune.base.LuneControl;
import lune.base.Util;

pub class Opt {
   let prefix: str;
   let depth: int;
   let mut next: Opt!;

   pub fn __init( prefix:str, depth:int ) {
      self.prefix = prefix;
      self.depth = depth;
      self.next = nil;
   }
   pub fn get(): str, int {
      return self.prefix, self.depth;
   }
   pub fn nextOpt() mut : Opt {
      if! self.next {
         return _exp;
      }
      let mut opt = new Opt( self.prefix .. "  ", self.depth + 1 );
      self.next = opt;
      return opt;
   }
}

class dumpFilter extend Nodes.Filter<Opt> {
   let mut stream:oStream;
   let mut processInfo:&Ast.ProcessInfo;

   fn writeln( opt:&Opt, txt:str ) mut {
      let prefix = opt.get();
      self.stream.write( "%s%s\n" ( prefix, (txt.gsub( " *$", "" )) ) );
   }
   fn dump( opt:&Opt, node: &Nodes.Node, txt: str ) mut {
      let mut typeStr = "";
      let expType = node.get_expType();
      if expType.equals( self.processInfo, Ast.builtinTypeNone ##) {
         typeStr = "(%d:%s:%s)" ( expType.$typeId.id,
                                  expType.getTxt(##), expType.$kind );
      }

      let comment;
      if! let commentList = node.$commentList {
         comment = "comment:%d,%d" (#commentList, node.$tailComment and 1 or 0);
      }
      else {
         if node.$tailComment {
            comment = "comment:0,1";
         }
         else {
            comment = "";
         }
      }

      let mut attrib = "";
      if node.hasNilAccess() {
         attrib = "%s %s" (attrib, "nilacc" );
      }
      if #attrib ~= 0 {
         attrib = "[%s]" (attrib);
      }

      self.writeln( opt,
                    ": %s:%d(%d:%d) %s %s %s %s"     
                    ( Nodes.getNodeKindName( node.get_kind() ), node.$id,
                      node.$effectivePos.lineNo, node.$effectivePos.column,
                      attrib, txt, typeStr, comment ) );
   }
}

pub fn createFilter( moduleTypeInfo:&Ast.TypeInfo, processInfo:&Ast.ProcessInfo,
                     stream:oStream ): Nodes.Filter<Opt>
{
   return new dumpFilter( true, moduleTypeInfo, moduleTypeInfo.$scope,
                          stream, processInfo );                  
}

fn filter( node: &Nodes.Node, filter: dumpFilter, opt:Opt ) {
   node.processFilter( filter, opt );
}

pub override fn dumpFilter.processNone(
   node: &Nodes.NoneNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
};
pub override fn dumpFilter.processShebang(
   node: &Nodes.ShebangNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$cmd );
};
pub override fn dumpFilter.processLuneControl(
   node: &Nodes.LuneControlNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$pragma.$_txt );
};
pub override fn dumpFilter.processBlankLine(
   node: &Nodes.BlankLineNode, opt:Opt ) mut
{
   self.dump( opt, node, "%d" (node.$lineNum) );
};
pub override fn dumpFilter.processLuneKind(
   node: &Nodes.LuneKindNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.$exp, self, opt.nextOpt() );
};
pub override fn dumpFilter.processImport(
   node: &Nodes.ImportNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$info.$modulePath );
};
pub override fn dumpFilter.processRoot(
   node: &Nodes.RootNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   foreach child in node.get_children() {
      filter( child, self, opt.nextOpt() );
   }	
};
pub override fn dumpFilter.processSubfile(
   node: &Nodes.SubfileNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
}

pub override fn dumpFilter.processAsyncLock(
   node: &Nodes.AsyncLockNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.$block, self, opt.nextOpt() );
};

pub override fn dumpFilter.processBlockSub(
   node: &Nodes.BlockNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   foreach statement in node.get_stmtList() {
      filter( statement, self, opt.nextOpt() );
   }	
};

pub override fn dumpFilter.processScope(
   node: &Nodes.ScopeNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$scopeKind.$_txt );
   filter( node.$block, self, opt.nextOpt() );
}

pub override fn dumpFilter.processStmtExp(
   node: &Nodes.StmtExpNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.get_exp(), self, opt.nextOpt() );
};

pub override fn dumpFilter.processDeclEnum(
   node: &Nodes.DeclEnumNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$name.txt );
   let enumTypeInfo = unwrap (node.$expType@@@Ast.EnumTypeInfo);
   foreach name in node.$valueNameList {
      let valInfo = unwrap enumTypeInfo.getEnumValInfo( name.txt );
      let val:stem;
      _match valInfo.$val {
         case .Int( x ) {
            val = x;
         }
         case .Real( x ) {
            val = x;
         }
         case .Str( x ) {
            val = x;
         }
      }
      self.writeln( opt, "  %s: %s, %s" ( name.txt, valInfo.$val.$_txt, val ) );
   }
}

pub override fn dumpFilter.processDeclAlge(
   node: &Nodes.DeclAlgeNode, opt:Opt ) mut
{
   let algeTypeInfo = node.$algeType;
   self.dump( opt, node, algeTypeInfo.$rawTxt );
   forsort valInfo in algeTypeInfo.$valInfoMap {
      self.writeln( opt, "  %s: %s" ( algeTypeInfo.$rawTxt, valInfo.$name ) );
   }
}

pub override fn dumpFilter.processNewAlgeVal(
   node: &Nodes.NewAlgeValNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$name.txt );
   foreach exp in node.$paramList {
      filter( exp, self, opt.nextOpt() );
   }
}

pub override fn dumpFilter.processProtoClass(
   node: &Nodes.ProtoClassNode, opt:Opt ) mut
{
   self.dump( opt, node, node.get_name().txt );
};

pub override fn dumpFilter.processDeclClass(
   node: &Nodes.DeclClassNode, opt:Opt ) mut
{
   self.dump(
      opt, node,
      "%s (%s)" ( node.get_name().txt, self.getFull( node.$expType, false ) ) );
   foreach field in node.get_fieldList() {
      filter( field, self, opt.nextOpt() );
   }	
};
pub override fn dumpFilter.processDeclMember(
   node: &Nodes.DeclMemberNode, opt:Opt ) mut
{
   self.dump( opt, node, node.get_name().txt );
   filter( node.get_refType(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processExpMacroExp(
   node: &Nodes.ExpMacroExpNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   let stmtList = node.get_stmtList();
   foreach stmt in stmtList {
      filter( stmt, self,  opt.nextOpt() );
   }
};
pub override fn dumpFilter.processDeclMacro(
   node: &Nodes.DeclMacroNode, opt:Opt ) mut
{
   self.dump( opt, node, node.get_expType().getTxt(##) );
};
pub override fn dumpFilter.processExpMacroStat(
   node: &Nodes.ExpMacroStatNode, opt:Opt ) mut
{
   self.dump( opt, node, node.get_expType().getTxt(##) );
   foreach expStr in node.get_expStrList() {
      filter( expStr, self, opt.nextOpt() );
   }
};


pub override fn dumpFilter.processUnwrapSet(
   node: &Nodes.UnwrapSetNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.$dstExpList, self, opt.nextOpt() );
   filter( node.$srcExpList, self, opt.nextOpt() );

   if node.$unwrapBlock {
      filter( unwrap node.$unwrapBlock, self, opt.nextOpt() );
   }
}

pub override fn dumpFilter.processIfUnwrap(
   node: &Nodes.IfUnwrapNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   foreach expNode in node.$expList.$expList {
      filter( expNode, self, opt.nextOpt() );
   }
   filter( node.$block, self, opt.nextOpt() );
   if node.$nilBlock {
      filter( unwrap node.$nilBlock, self, opt.nextOpt() );
   }
}

pub override fn dumpFilter.processWhen(
   node: &Nodes.WhenNode, opt:Opt ) mut
{
   let mut symTxt = "";
   foreach symPair in node.$symPairList {
      symTxt = "%s %s" (symTxt, symPair.$src.$name );
   }
   
   self.dump( opt, node, symTxt );
   filter( node.$block, self, opt.nextOpt() );
   if! node.$elseBlock {
      filter( _exp, self, opt.nextOpt() );
   }
}


pub override fn dumpFilter.processDeclVar(
   node: &Nodes.DeclVarNode, opt:Opt ) mut
{
   let mut varName = "";
   foreach var, index in node.get_varList() {
      if index > 1 {
	 varName = varName .. ",";
      }
      varName = "%s %s" (varName, var.get_name().txt );
   }
   if node.$unwrapBlock {
      varName = "!" .. varName;
   }
   varName = "%s %s" ( node.$mode, varName );

   self.dump( opt, node, varName );
   foreach var in node.get_varList() {
      if! var.$refType {
         filter( _exp, self, opt.nextOpt() );
      }
   }
   if! node.get_expList() {
      filter( _exp, self, opt.nextOpt() );
   }
   if! node.$unwrapBlock {
      filter( _exp, self, opt.nextOpt() );
   }
   if! node.$thenBlock {
      filter( _exp, self, opt.nextOpt() );
   }
   // foreach var in node.$syncVarList {
   //    if! var.$refType {
   //       filter( _exp, self, opt.nextOpt() );
   //    }
   // }
   if! node.$syncBlock {
      filter( _exp, self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processDeclArg(
   node: &Nodes.DeclArgNode, opt:Opt ) mut
{
   self.dump( opt, node, "%s:%s" (node.get_name().txt, node.$expType.getTxt(##) ));
   //filter( node.get_argType(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processDeclArgDDD(
   node: &Nodes.DeclArgDDDNode, opt:Opt ) mut
{
   self.dump( opt, node, "..." );
};
pub override fn dumpFilter.processExpSubDDD(
   node: &Nodes.ExpSubDDDNode, opt:Opt ) mut
{
   self.dump( opt, node, "... (%d)" (node.$remainIndex) );
};


pub override fn dumpFilter.processDeclForm( node: &Nodes.DeclFormNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$expType.getTxt( self.$typeNameCtrl  ## ) );
}

fn dumpFilter.processDeclFuncInfo(
   node: &Nodes.Node, declInfo: &Nodes.DeclFuncInfo, opt:Opt ) mut
{
   let! mut name = declInfo.$name$.txt {
      name = "<anonymous>";
   };
   name = node.$expType.get_display_stirng_with( name ## );
   if Ast.TypeInfo.isMut( node.$expType ) {
      name = name .. " mut";
   }
   if node.$expType.$scope$.$hasClosureAccess {
      name = name .. " closure";
   }
   self.dump( opt, node, name );
   let argList = declInfo.get_argList();
   foreach arg in argList {
      filter( arg, self, opt.nextOpt() );
   }
   if! declInfo.get_body() {
      filter( _exp, self, opt.nextOpt() );
   }
}
pub override fn dumpFilter.processDeclFunc(
   node: &Nodes.DeclFuncNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.get_declInfo(), opt );
};	
pub override fn dumpFilter.processDeclMethod(
   node: &Nodes.DeclMethodNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.get_declInfo(), opt );
};	
pub override fn dumpFilter.processProtoMethod(
   node: &Nodes.ProtoMethodNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.get_declInfo(), opt );
};	
pub override fn dumpFilter.processDeclConstr(
   node: &Nodes.DeclConstrNode, opt:Opt ) mut
{
   self.processDeclFuncInfo( node, node.get_declInfo(), opt );
};

pub override fn dumpFilter.processDeclDestr(
   node: &Nodes.DeclDestrNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
};

pub override fn dumpFilter.processExpCallSuperCtor(
   node: &Nodes.ExpCallSuperCtorNode, opt:Opt ) mut
{
   let typeInfo:&Ast.TypeInfo = node.get_superType();
   self.dump( opt, node, typeInfo.getTxt(##) );
};
pub override fn dumpFilter.processExpCallSuper(
   node: &Nodes.ExpCallSuperNode, opt:Opt ) mut
{
   let typeInfo:&Ast.TypeInfo = node.get_superType();
   self.dump( opt, node, typeInfo.getTxt(##) );
};
pub override fn dumpFilter.processRefType(
   node: &Nodes.RefTypeNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.get_name(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processIf(
   node: &Nodes.IfNode, opt:Opt ) mut
{
   self.dump( opt, node, "");
   let stmtList = node.get_stmtList();
   foreach stmt in stmtList {
      if stmt.$exp.$kind ~= Nodes.nodeKindEnum.None {
	 filter( stmt.$exp, self, opt.nextOpt() );
      }   	
      filter( stmt.$block, self, opt.nextOpt() );
   }	
};
pub override fn dumpFilter.processSwitch(
   node: &Nodes.SwitchNode, opt:Opt ) mut
{
   self.dump( opt, node, "");
   filter( node.get_exp(), self, opt.nextOpt() );
   let caseList = node.$caseList;
   foreach caseInfo in caseList {
      filter( caseInfo.$expList, self, opt.nextOpt() );
      filter( caseInfo.$block, self, opt.nextOpt() );
   }
   if! node.get_default() {
      filter( _exp, self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processMatch(
   node: &Nodes.MatchNode, opt:Opt ) mut
{
   let prefix, depth = opt.get();
   self.dump( opt, node, "");
   filter( node.$val, self, opt.nextOpt() );
   let caseList = node.$caseList;
   foreach caseInfo in caseList {
      filter( caseInfo.$valExpRef, self, opt.nextOpt() );
      filter( caseInfo.$block, self,
              new Opt( prefix .. "  " .. caseInfo.$valInfo.$name, depth + 1 ) );
   }
   if! node.$defaultBlock {
      filter( _exp, self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processWhile(
   node: &Nodes.WhileNode, opt:Opt ) mut
{
   self.dump( opt, node, "");
   filter( node.get_exp(), self, opt.nextOpt() );
   filter( node.get_block(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processRepeat(
   node: &Nodes.RepeatNode, opt:Opt ) mut
{
   self.dump( opt, node, "");
   filter( node.get_block(), self, opt.nextOpt() );
   filter( node.get_exp(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processFor(
   node: &Nodes.ForNode, opt:Opt ) mut
{
   self.dump( opt, node, node.get_val().$name );
   filter( node.get_init(), self, opt.nextOpt() );
   filter( node.get_to(), self, opt.nextOpt() );
   if! node.get_delta() {
      filter( _exp, self, opt.nextOpt() );
   }	
   filter( node.get_block(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processApply(
   node: &Nodes.ApplyNode, opt:Opt ) mut
{
   let mut varNames = "";
   let varList = node.get_varList();
   foreach var in varList {
      varNames = varNames .. var.$name .. " ";
   }	
   self.dump( opt, node, varNames );
   filter( node.$expList, self, opt.nextOpt() );
   filter( node.$block, self, opt.nextOpt() );
};
pub override fn dumpFilter.processForeach(
   node: &Nodes.ForeachNode, opt:Opt ) mut
{
   let mut index = "";
   if! node.$key {
      index = _exp.$name;
   }
   self.dump( opt, node, node.$val.$name .. " " .. index );
   filter( node.get_exp(), self, opt.nextOpt() );
   filter( node.get_block(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processForsort(
   node: &Nodes.ForsortNode, opt:Opt ) mut
{
   let mut index = "";
   if! node.get_key() {
      index = _exp.$name;
   }
   self.dump( opt, node, node.get_val().$name .. " " .. index );
   filter( node.get_exp(), self, opt.nextOpt() );
   filter( node.get_block(), self, opt.nextOpt() );
};

pub override fn dumpFilter.processExpUnwrap(
   node: &Nodes.ExpUnwrapNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.$exp, self, opt.nextOpt() );
   if! node.$default {
      filter( _exp, self, opt.nextOpt() );
   }
}

fn getTypeListTxt( typeList:&List<&Ast.TypeInfo> ): str {
   let mut txt = "";
   foreach typeInfo, index in typeList {
      if index > 1 {
         txt = txt .. ", ";
      }
      txt = txt .. typeInfo.getTxt( ## );
   }
   return txt;
}

pub override fn dumpFilter.processExpCall(
   node: &Nodes.ExpCallNode, opt:Opt ) mut
{
   let mess = getTypeListTxt( node.$expTypeList );
   self.dump( opt, node, mess );
   filter( node.get_func(), self, opt.nextOpt() );
   if! node.get_argList() {
      filter( _exp, self, opt.nextOpt() );
   }	
};

pub override fn dumpFilter.processExpList(
   node: &Nodes.ExpListNode, opt:Opt ) mut
{
   let mut mess;
   if! let mRetExp = node.$mRetExp {
      mess = "hasMRetExp (%d): " (mRetExp.$index);
   }
   else {
      mess = "noMRetExp: ";
   }
   foreach expType in node.$expTypeList {
      mess = "%s %s" (mess, expType.getTxt(##) );
   }
   
   self.dump( opt, node, mess );
   let expList = node.get_expList();
   foreach exp in expList {
      filter( exp, self, opt.nextOpt() );
   }	
};
pub override fn dumpFilter.processExpMRet(
   node: &Nodes.ExpMRetNode, opt:Opt ) mut

{
   self.dump( opt, node, "" );
   filter( node.$mRet, self, opt.nextOpt() );
};
pub override fn dumpFilter.processExpAccessMRet(
   node: &Nodes.ExpAccessMRetNode, opt:Opt ) mut

{
   self.dump( opt, node, "%d" (node.$index) );
};
pub override fn dumpFilter.processExpOp1(
   node: &Nodes.ExpOp1Node, opt:Opt ) mut
{
   self.dump( opt, node, node.get_op().txt );
   filter( node.get_exp(), self, opt.nextOpt() );
};

pub override fn dumpFilter.processExpToDDD(
   node: &Nodes.ExpToDDDNode, opt: Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.$expList, self, opt.nextOpt() );
}

pub override fn dumpFilter.processExpMultiTo1(
   node: &Nodes.ExpMultiTo1Node, opt: Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.$exp, self, opt.nextOpt() );
}

pub override fn dumpFilter.processExpCast(
   node: &Nodes.ExpCastNode, opt:Opt ) mut
{
   self.dump(
      opt, node,
      "%s(%d) -> %s(%d)" ( node.$exp.$expType.getTxt( self.$typeNameCtrl ##),
                           node.$exp.$expType.$typeId.id,
                           node.$castType.getTxt( self.$typeNameCtrl ## ),
                           node.$castType.$typeId.id) );
   filter( node.get_exp(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processExpParen(
   node: &Nodes.ExpParenNode, opt:Opt ) mut
{
   self.dump( opt, node, "()" );
   filter( node.get_exp(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processExpSetVal(
   node: &Nodes.ExpSetValNode, opt: Opt ) mut
{
   self.dump( opt, node, "= %s" (node.$expType.getTxt( self.$typeNameCtrl## )) );
   filter( node.get_exp1(), self, opt.nextOpt() );
   filter( node.get_exp2(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processExpSetItem(
   node: &Nodes.ExpSetItemNode, opt:Opt ) mut
{
   let mut indexSym = "";
   let mut indexNode:&Nodes.Node! = nil;
   _match node.$index {
      case .NodeIdx( index ) {
         indexNode = index;
      }
      case .SymIdx( index ) {
         indexSym = index;
      }
   }
   self.dump( opt, node, indexSym );
   filter( node.$val, self, opt.nextOpt() );
   when! indexNode {
      filter( indexNode, self, opt.nextOpt() );
   }
   filter( node.$exp2, self, opt.nextOpt() );
};
pub override fn dumpFilter.processExpOp2(
   node: &Nodes.ExpOp2Node, opt:Opt ) mut
{
   self.dump( opt, node,
         "%s -> %s" (node.get_op().txt, node.$expType.getTxt( self.$typeNameCtrl## )) );
   filter( node.get_exp1(), self, opt.nextOpt() );
   filter( node.get_exp2(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processExpNew(
   node: &Nodes.ExpNewNode, opt:Opt ) mut

{
   self.dump( opt, node, "" );
   filter( node.get_symbol(), self, opt.nextOpt() );
   if! node.get_argList() {
      filter( _exp, self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processExpRef(
   node: &Nodes.ExpRefNode, opt:Opt ) mut
{
   self.dump( opt, node, "%s:%s" (node.$symbolInfo.$name,
                                        node.$expType.getTxt(##)));
};
pub override fn dumpFilter.processExpRefItem(
   node: &Nodes.ExpRefItemNode, opt:Opt ) mut
{
   self.dump( opt, node, "seq[exp] " .. node.get_expType().getTxt(##) );
   filter( node.$val, self, opt.nextOpt() );
   if! node.$index {
      filter( _exp, self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processRefField(
   node: &Nodes.RefFieldNode, opt:Opt ) mut
{
   self.dump( opt, node,
         "%s:%s:%s" (node.$field.txt,
                      node.$symbolInfo$.$mutable and "mut" or "imut",
                      node.$expType.getTxt(##)));
   filter( node.get_prefix(), self, opt.nextOpt() );
};
pub override fn dumpFilter.processExpOmitEnum(
   node: &Nodes.ExpOmitEnumNode, opt:Opt ) mut
{
   self.dump( opt, node,
         "%s.%s" (node.$expType.getTxt(##), node.$valToken.txt ) );
};

pub override fn dumpFilter.processGetField(
   node: &Nodes.GetFieldNode, opt:Opt ) mut
{
   self.dump( opt, node,
         "get_%s:%s" ( node.get_field().txt, node.$expType.getTxt(##)) );
   filter( node.get_prefix(), self, opt.nextOpt() );
};

pub override fn dumpFilter.processReturn(
   node: &Nodes.ReturnNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   if! node.get_expList() {
      filter( _exp, self, opt.nextOpt() );
   }
};

pub override fn dumpFilter.processProvide(
   node: &Nodes.ProvideNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$symbol.$name );
}

pub override fn dumpFilter.processAlias(
   node: &Nodes.AliasNode, opt:Opt ) mut
{
   self.dump( opt, node, "%s = %s" (node.$newSymbol.$name, node.$typeInfo.getTxt(##) ) );
}

pub override fn dumpFilter.processTestCase(
   node: &Nodes.TestCaseNode, opt:Opt ) mut
{
   self.dump( opt, node, node.$name.txt );
   filter( node.$block, self, opt.nextOpt() );
}

pub override fn dumpFilter.processTestBlock(
   node: &Nodes.TestBlockNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   foreach statement in node.$stmtList {
      filter( statement, self, opt.nextOpt() );
   }
}

pub override fn dumpFilter.processBoxing(
   node: &Nodes.BoxingNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.$src, self, opt.nextOpt() );
}

pub override fn dumpFilter.processUnboxing(
   node: &Nodes.UnboxingNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
   filter( node.$src, self, opt.nextOpt() );
}

pub override fn dumpFilter.processLiteralList(
   node: &Nodes.LiteralListNode, opt:Opt ) mut
{
   self.dump( opt, node, "[]" );
   if! node.get_expList() {
      filter( _exp, self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processLiteralSet(
   node: &Nodes.LiteralSetNode, opt:Opt ) mut
{
   self.dump( opt, node, "(@)" );
   if! node.get_expList() {
      filter( _exp, self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processLiteralMap(
   node: &Nodes.LiteralMapNode, opt:Opt ) mut

{
   self.dump( opt, node, "{}" );
   let pairList = node.get_pairList();
   foreach pair in pairList {
      filter( pair.get_key(), self, opt.nextOpt() );
      filter( pair.get_val(), self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processLiteralArray(
   node: &Nodes.LiteralArrayNode, opt:Opt ) mut
{
   self.dump( opt, node, "[@]" );
   if! node.get_expList() {
      filter( _exp, self, opt.nextOpt() );
   }
};
pub override fn dumpFilter.processLiteralChar(
   node: &Nodes.LiteralCharNode, opt:Opt ) mut
{
   self.dump( opt, node,
	 string.format( "%s(%s)", node.get_num(), node.get_token().txt ) );
};
pub override fn dumpFilter.processLiteralInt(
   node: &Nodes.LiteralIntNode, opt:Opt ) mut
{
   self.dump( opt, node,
	 string.format( "%s(%s)", node.get_num(), node.get_token().txt ) );
};
pub override fn dumpFilter.processLiteralReal(
   node: &Nodes.LiteralRealNode, opt:Opt ) mut
{
   self.dump( opt, node,
	 string.format( "%s(%s)", node.get_num(), node.get_token().txt ) );
};
pub override fn dumpFilter.processLiteralString(
   node: &Nodes.LiteralStringNode, opt:Opt ) mut
{
   self.dump( opt, node, node.get_token().txt );
   if! let expList = node.$orgParam {
      foreach param in expList.$expList {
         filter( param, self, opt.nextOpt() );
      }
   }
};
pub override fn dumpFilter.processLiteralBool(
   node: &Nodes.LiteralBoolNode, opt:Opt ) mut
{
   self.dump( opt, node,
         node.get_token().txt == "true" and "true" or "false" );
};
pub override fn dumpFilter.processLiteralNil(
   node: &Nodes.LiteralNilNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
};
pub override fn dumpFilter.processBreak(
   node: &Nodes.BreakNode, opt:Opt ) mut
{
   self.dump( opt, node, "" );
};
pub override fn dumpFilter.processLiteralSymbol(
   node: &Nodes.LiteralSymbolNode, opt:Opt ) mut
{
   self.dump( opt, node, node.get_token().txt );
};

pub override fn dumpFilter.processAbbr(
   node: &Nodes.AbbrNode, opt: Opt ) mut
{
   self.dump( opt, node, "##" );
};


__test {
   import lune.base.convLua;
   import lune.base.AstInfo;

   fn Ast2Dump( ast:AstInfo.ASTInfo ) : str
   {
      let mut stream = new Util.memStream();

      let mut conv = createFilter(
         ast.$exportInfo.$moduleTypeInfo, ast.$exportInfo.$processInfo, stream );

      ast.$node.processFilter( conv, new Opt( "", 0 ));

      return stream.$txt;
   }
}

__test case1(ctrl) {
   import lune.base.LuaVer;
   import lune.base.Option;
   
   LuaVer.setCurVer( 53 );

   let scriptPath = "test.lns";
   let option = Option.createDefaultOption( [scriptPath], nil );
   let mut ast = convLua.createAst( scriptPath, convLua.getTestLnsCode(), option );
   let dump = Ast2Dump( ast );
   print( dump );
}
