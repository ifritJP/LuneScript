/*
MIT License

Copyright (c) 2018,2020 ifritJP

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import lune.base.Ver;
import lune.base.Ast;
import lune.base.Nodes;
import lune.base.Util;
import lune.base.TransUnit;
import lune.base.LuaMod;
import lune.base.LuaVer;
import lune.base.Parser;
import lune.base.LuneControl;

pub class Opt {
   pub let node:&Nodes.Node;
}

/** 変換プロセス */
enum ProcessMode {
   /** クロージャではない関数定義 */
   NonClosureFuncDecl,
   /** 通常処理 */
   Main,
}

class convFilter extend Nodes.Filter<Opt> {
   pri let mut stream:Util.SimpleSourceOStream;
   let mut processMode:ProcessMode;
   let mut processModeStack:List<ProcessMode>;

   pub fn __init( enableTest:bool, streamName: str, stream: oStream,
                  ast:&TransUnit.ASTInfo )
   {
      super(true, ast.$moduleTypeInfo, ast.$moduleTypeInfo.$scope);

      self.stream = new Util.SimpleSourceOStream( stream, nil, 4 );
      self.processMode = .Main;
      self.processModeStack = [];
   }

   fn pushProcessMode( mode:ProcessMode ) mut {
      self.processModeStack.insert( self.processMode );
      self.processMode = mode;
   }
   fn popProcessMode() mut {
      self.processMode = self.processModeStack[ #self.processModeStack ];
      self.processModeStack.remove(##);
   }

   advertise stream;
}


fn filter( node: &Nodes.Node, filter: convFilter,
           parent: &Nodes.Node )
{
   node.processFilter( filter, new Opt( parent ) );
}

fn isAnyType( typeInfo:&Ast.TypeInfo ): bool {
   let work = typeInfo.$srcTypeInfo;
   return typeInfo.$nilable or work == Ast.builtinTypeStem;
}

fn isClosure( typeInfo:&Ast.TypeInfo ): bool {
   let! scope = typeInfo.$scope {
      return false;
   };
   return #scope.$closureSymList > 0;
}

let golanKeywordSet =
    (@
      "func", "select",
      "defer", "go",
      "chan", "package",
      "const", "fallthrough",
      "range", "continue",
      "var"
    );

alge SymbolKind {
   // 公開変数
   PubVar,
   // メンバ
   Member( external:bool ),
   // 関数・メソッド
   Func( &Ast.TypeInfo ),
   // クラス
   Class( &Ast.TypeInfo ),
   // その他
   Normal,
}

fn concatGLSym( name:str, external:bool ) : str {
   return (external and "G" or "l") .. name;
}

fn concatSymWithType( name:str, typeInfo:&Ast.TypeInfo ) : str {
   return concatGLSym( "%s_" ((typeInfo.getModule().$rawTxt.gsub( "@", "" ))) .. name,
                       Ast.isPubToExternal( typeInfo.$accessMode ) );
}

fn convFilter.getSymbol( kind:SymbolKind, name:str ) : str {
   let mut symbolName;
   if golanKeywordSet.has( name ) {
      symbolName = "%s_" (name);
   }
   else {
      symbolName = name;
   }

   _match kind {
      case .PubVar {
         symbolName = concatGLSym( symbolName, true );
      }
      case .Member( external ) {
         symbolName = concatGLSym( symbolName, external );
      }
      case .Func( typeInfo ) {
         if typeInfo.$kind == .Method {
            symbolName = concatGLSym(
               symbolName, Ast.isPubToExternal( typeInfo.$accessMode ) );
         }
         else {
            if typeInfo.$parentInfo.$kind ~= .Module or
               typeInfo.$scope$.$parent$.$ownerTypeInfo == nil
            {
               // inner 関数定義の場合、クロージャかどうか判定し、
               // クロージャでない場合は、関数として定義する。
               if not isClosure( typeInfo ) {
                  let parentName = typeInfo.getParentFullName(
                     self.$typeNameCtrl, self.$moduleInfoManager, true );
                  symbolName = "%s_%s_%d_" (parentName.gsub( "[%.@]", "_" ), symbolName,
                                             typeInfo.$typeId );
               }
            }
            symbolName = concatSymWithType( symbolName, typeInfo );
         }
      }
      case .Class( typeInfo ) {
         symbolName = concatSymWithType( symbolName, typeInfo );
      }
      case .Normal {
      }
   }
   return symbolName;
}


fn convFilter.outputSymbol( kind:SymbolKind, name:str ) {
   self.write( self.getSymbol( kind, name ) );
}

/**
区切り記号で囲んでいる文字列を C の文字列に変換する。
*/
fn str2gostr( txt:str ) : str {
   let mut work = txt;
   if string.find( work, '^```' ## ) {
      work = ("%q" ( work.sub( 4, -4 ) )).gsub( "\\\n", "\\n" );
   }
   elseif string.find( work, "^'" ## ) {
      work = '"%s"' ((("%s" ( work.sub( 2, -2 )) ).gsub( '"', '\\"' )));
   }
   work = work.gsub( "\\9", "\\t" );
   return work;
}

let type2gotypeMap:&Map<&Ast.TypeInfo,str> = {
   Ast.builtinTypeInt : "LnsInt",
   Ast.builtinTypeReal : "LnsReal",
   Ast.builtinTypeStem : "LnsAny",
   Ast.builtinTypeString : "string",
};

fn getOrgTypeInfo( typeInfo:&Ast.TypeInfo ) : &Ast.TypeInfo {
   if! let enumType = typeInfo.$srcTypeInfo.$nonnilableType@@@Ast.EnumTypeInfo {
      return enumType.$valTypeInfo;
   }
   return typeInfo.$srcTypeInfo.$nonnilableType;
}

fn convFilter.type2gotype( typeInfo:&Ast.TypeInfo ) : str {
   if typeInfo.$kind == .DDD {
      return "[]LnsAny";
   }
   if isAnyType( typeInfo ) {
      return "LnsAny";
   }
   let orgType = getOrgTypeInfo( typeInfo );
   if! let goType = type2gotypeMap[ orgType ] {
      return goType;
   }
   switch orgType.$kind {
      case .List {
         return "*LnsList";
      }
      case .Map {
         return "map[LnsAny]LnsAny";
      }
      case .Class {
         return "*" .. self.getSymbol( .Class( typeInfo ), typeInfo.$rawTxt );
      }
      case .IF {
         return self.getSymbol( .Class( typeInfo ), typeInfo.$rawTxt );
      }
   }
   Util.err( "not support yet -- %s" (typeInfo.getTxt(##) ) );
}

fn getExpType( expListNode:&Nodes.ExpListNode, index:int ) : &Ast.TypeInfo {
   let list = expListNode.$expTypeList;
   if #list >= index {
      return list[ index ];
   }
   Util.err( "not support yet -- %s, %d: %d" (__func__, expListNode.$pos.lineNo, index ) );
}

fn convFilter.outputConv( srcType:&Ast.TypeInfo, dstType:&Ast.TypeInfo ) {
   if not isAnyType( dstType ) {
      self.write( ".(%s)" (self.type2gotype( dstType )) );
   }
}

macro _declIgnoreNode( name:sym )
{
   {
      let methodName = "process%s" (,,,,name);
      let nodeName = "%sNode" (,,,,name);
   }
   pub override fn convFilter.,,,methodName (
      node: Nodes.,,,nodeName, opt: Opt ) mut
   {
   }
}

_declIgnoreNode( BlankLine );
_declIgnoreNode( None );

pub override fn convFilter.processImport(
   node: Nodes.ImportNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

// ExpList を Go に展開する時のパターン
enum ExpListKind {
   // ExpList をそのまま展開する
   Direct,
   // []LnsAny として展開する
   Slice,
   // 変換関数が必要
   Conv,
}

fn getExpListKind( dstTypeList:&List<&Ast.TypeInfo>,
                   node:&Nodes.ExpListNode ): ExpListKind
{
   let mut lastExp = node.$expList[ #node.$expList ];
   let hasAbbr;
   if lastExp.$expType.$kind == .Abbr {
      hasAbbr = true;
      if #node.$expList < 2 {
         return .Direct;
      }
      lastExp = node.$expList[ #node.$expList - 1 ];
   }
   else {
      hasAbbr = false;
   }
   if lastExp@@@Nodes.ExpToDDDNode {
      // 仮引数に ... がある場合
      let! mRetExp = node.$mRetExp {
         return .Slice;
      };
      if mRetExp.$index == 1 and dstTypeList[ mRetExp.$index ].$kind == .DDD {
         return .Slice;
      }
      return .Conv;
   }

   // 仮引数に ... がない場合
   if lastExp.$expType.$kind == .DDD {
      // 実引数に ... がある場合
      let! mRetExp = node.$mRetExp {
         return .Slice;
      };
      if mRetExp.$index == 1 and dstTypeList[ mRetExp.$index ].$kind == .DDD {
         return .Direct;
      }
   }
   else {
      // 実引数に ... がない場合
      let! mRetExp = node.$mRetExp {
         // 実引数に多値がない場合
         return .Direct;
      };
      // 実引数に多値がある場合
      if not hasAbbr and mRetExp.$index == 1 {
         // 引数に省略がなく、実引数が多値だけの場合
         return .Direct;
      }
   }
   return .Conv;
}

fn getConvExpName( nodeId:int, argListNode:&Nodes.ExpListNode ): str {
   return "_convExp%d_%d"  (nodeId, argListNode.$id);
}

fn convFilter.processConvExp( nodeId:int, dstTypeList:&List<&Ast.TypeInfo>,
                              argListNode:&Nodes.ExpListNode! ) mut
{
   let! argList = argListNode {
      return;
   };
   
   if getExpListKind( dstTypeList, argList ) ~= .Conv {
      return;
   };
   
   self.write( "func %s(" (getConvExpName( nodeId, argList )) );
   let! mRetIndex = argList.$mRetExp$.$index {
      return;
   };
   foreach argExp, index in argList.$expList {
      if! let exp2ddd = argExp@@@Nodes.ExpToDDDNode {
         foreach exp in exp2ddd.$expList.$expList {
            if index ~= 1 {
               self.write( ", " );
            }
            self.write( "arg%d " (index) );
            self.write( self.type2gotype( exp.$expType ) );
         }
      }
      else {
         if index ~= 1 {
            self.write( ", " );
         }
         if mRetIndex == index {
            self.write( "arg%d []LnsAny" (index) );
            break;
         }
         else {
            self.write( "arg%d " (index) );
            self.write( self.type2gotype( argExp.$expType ) );
         }
      }
   }
   self.write( ")" );
   // 関数戻り値の型宣言
   if #dstTypeList >= 2 {
      self.write( ")" );
      foreach argType, index in dstTypeList {
         if index ~= 1 {
            self.write( ", " );
         }
         self.write( self.type2gotype( argType ) );
      }
      self.writeln( ") {" );
   }
   elseif #dstTypeList == 1 {
      self.writeln( " %s {" (self.type2gotype( dstTypeList[ 1 ] )) );
   }
   else {
      self.writeln( "{" );
   }

   // 変換コード
   self.write( "return " );

   let mut restIndex:int! = nil;
   foreach dstType, index in dstTypeList {
      if index ~= 1 {
         self.write( ", " );
      }
      if dstType.$kind == .DDD {
         restIndex = index;
         break;
      }
      if index >= mRetIndex {
         self.write( "arg%d[%d].(%s)"
            (mRetIndex, index - mRetIndex, self.type2gotype(dstType)) );
      }
      else {
         self.write( "arg%d" (index ) );
      }
   }
   when! restIndex {
      self.write( "[]LnsAny{ " );
      foreach _, index in argList.$expList {
         if index >= #dstTypeList {
            self.write( "arg%d" (index));
         }
      }
      self.writeln( "}" );
   }
   else {
      self.writeln( "" );
   }

   
   self.writeln( "}" );
}


pub override fn convFilter.processRoot(
   node: Nodes.RootNode, opt: Opt ) mut
{
   Ast.pushProcessInfo( node.$processInfo );

   
   self.writeln( "package main" );

   foreach workNode in node.$nodeManager.getExpCallNodeList() {
      self.processConvExp( workNode.$id, workNode.$func.$expType.$argTypeInfoList,
                           workNode.$argList );
   }
   foreach workNode in node.$nodeManager.getDeclVarNodeList() {
      self.processConvExp( workNode.$id, workNode.$typeInfoList,
                           workNode.$expList );
   }
   

   self.pushProcessMode( .NonClosureFuncDecl );
   foreach declFuncNode in node.$nodeManager.getDeclFuncNodeList() {
      filter( declFuncNode, self, node );
      self.writeln( "" );
   }
   self.popProcessMode();

   foreach declFuncNode in node.$nodeManager.getDeclClassNodeList()
   {
      filter( declFuncNode, self, node );
      self.writeln( "" );
   }

   
   self.writeln( "func Lns_init() {" );
   self.pushIndent( ## );
   
   foreach child in node.$children {
      switch child.$kind {
         case Nodes.NodeKind.$DeclAlge,
              Nodes.NodeKind.$DeclClass,
              //Nodes.NodeKind.$DeclFunc,
              Nodes.NodeKind.$DeclMacro,
              Nodes.NodeKind.$TestBlock

         {
            //filter( child, self, node );
            //self.writeln( "" );
         }
         default {
            filter( child, self, node );
            self.writeln( "" );
         }
      }
   }

   self.popIndent();
   self.writeln( "}" );


   Ast.popProcessInfo();
}

pub override fn convFilter.processSubfile(
   node: Nodes.SubfileNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processBlockSub(
   node: Nodes.BlockNode, opt: Opt ) mut
{
   if node.$blockKind == .Block {
      self.writeln( "{" );
   }

   self.pushProcessMode( .Main );
   self.pushIndent(##);
   foreach child in node.$stmtList {
      switch child.$kind {
         case Nodes.NodeKind.$DeclAlge,
              Nodes.NodeKind.$DeclClass,
              //Nodes.NodeKind.$DeclFunc,
              Nodes.NodeKind.$DeclMacro,
              Nodes.NodeKind.$TestBlock

         {
            //filter( child, self, node );
            //self.writeln( "" );
         }
         default {
            filter( child, self, node );
            self.writeln( "" );
         }
      }
   }
   self.popIndent();
   self.popProcessMode();

   if node.$blockKind == .Block {
      self.write( "}" );
   }
}

fn convFilter.expList2Slice( subList:&Nodes.ExpListNode ) mut {
   let mRetIndex = subList.$mRetExp$.$index;
   if mRetIndex and mRetIndex == 1 {
      let subExp = subList.$expList[ 1 ];
      if subExp.$expType.$kind ~= .DDD {
         self.write( "Lns_2DDD(" );
         filter( subExp, self, subList );
         self.write( ")" );
      }
      else {
         filter( subExp, self, subList );
      }
   }
   else {
      if mRetIndex and mRetIndex ~= 1 {
         self.write( "append( " );
      }
      self.write( "[]LnsAny{" );
      foreach subExp, subIndex in subList.$expList {
         if mRetIndex == subIndex {
            if mRetIndex ~= 1 {
               self.write( "}, " );
            }
            if subExp.$expType.$kind ~= .DDD {
               self.write( "Lns_2DDD(" );
               filter( subExp, self, subList );
               self.write( ")" );
            }
            else {
               filter( subExp, self, subList );
            }
            self.write( "..." );
            break;
         }
         if subIndex ~= 1 {
            self.write( ', ' );
         }
         filter( subExp, self, subList );
      }
      if mRetIndex and mRetIndex ~= 1 {
         self.write( ")" );
      }
      else {
         self.write( "}" );
      }
   }
}

/**
expListNode の式を go で扱える型に変換する。


processRoot() で、processConvExp() を実行しておく。
*/
fn convFilter.processSetFromExpList(
   convArgFuncName:str,
   dstTypeList:&List<&Ast.TypeInfo>, expListNode:&Nodes.ExpListNode ) mut
{
   switch getExpListKind( dstTypeList, expListNode ) {
      case .Conv {
         self.write( "%s(" ( convArgFuncName ) );
         let mRetIndex = expListNode.$mRetExp$.$index;

         foreach exp, index in expListNode.$expList {
            if index ~= 1 {
               self.write( ', ' );
            }
            if mRetIndex == index {
               self.write( "Lns_2DDD(" );
               filter( exp, self, expListNode );
               self.write( ")" );
               break;
            }
            filter( exp, self, expListNode );
            if expListNode.$mRetExp$.$index == index {
               break;
            }
         }
         self.write( ")" );
      }
      case .Slice {
         foreach argType, index in dstTypeList {
            if index ~= 1 {
               self.write( ', ' );
            }
            if #expListNode.$expList >= index {
               let argExp = expListNode.$expList[ index ];

               if! let exp2ddd = argExp@@@Nodes.ExpToDDDNode {
                  self.expList2Slice( exp2ddd.$expList );
               }
               else {
                  if argExp.$expType.$kind == .Abbr {
                     if argType.$kind == .DDD {
                        self.write( "[]LnsAny{}" );
                     }
                     else {
                        self.write( "nil" );
                     }
                  }
                  else {
                     filter( argExp, self, expListNode );
                  }
               }
            }
            else {
               self.write( "[]LnsAny{}" );
            }
         }
      }
      case .Direct {
         let mRetIndex = expListNode.$mRetExp$.$index;
         foreach funcArgType, index in dstTypeList {
            if mRetIndex == index - 1 {
               break;
            }
            if index ~= 1 {
               self.write( ', ' );
            }
            if index == #dstTypeList and
               funcArgType.$kind == .DDD 
            {
               // 関数の最終仮引数が DDD の場合、
               // []LnsAny に変換する
               if #expListNode.$expList < index or
                  expListNode.$expList[ index ].$expType.$kind == .Abbr
               {
                  self.write( "[]LnsAny{}" );
               }
               else {
                  filter( expListNode.$expList[ index ], self, expListNode );
               }
            }
            else {
               // 最終仮引数より前
               if #expListNode.$expList < index or
                  expListNode.$expList[ index ].$expType.$kind == .Abbr
               {
                  // 最終実引数より後は、引数を省略している
                  self.write( "nil" );
               }
               else {
                  filter( expListNode.$expList[ index ], self, expListNode );
               }
            }
         }
      }
   }
}

pub override fn convFilter.processStmtExp(
   node: Nodes.StmtExpNode, opt: Opt ) mut
{
   filter( node.$exp, self, node );
}

pub override fn convFilter.processDeclEnum(
   node: Nodes.DeclEnumNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processDeclAlge(
   node: Nodes.DeclAlgeNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processNewAlgeVal(
   node: Nodes.NewAlgeValNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processDeclMember(
   node: Nodes.DeclMemberNode, opt: Opt ) mut
{
   self.outputSymbol( .Member( Ast.isPubToExternal( node.$accessMode ) ),
                      node.$name.txt );
   self.write( " %s" ( self.type2gotype( node.$refType.$expType ) ) );
}

pub override fn convFilter.processExpMacroExp(
   node: Nodes.ExpMacroExpNode, opt: Opt ) mut
{
   foreach stmt in node.$stmtList {
      filter( stmt, self, node );
      self.writeln( "" );
   }
}

pub override fn convFilter.processDeclMacro(
   node: Nodes.DeclMacroNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processExpMacroStat(
   node: Nodes.ExpMacroStatNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processDeclConstr(
   node: Nodes.DeclConstrNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processDeclDestr(
   node: Nodes.DeclDestrNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processExpCallSuper(
   node: Nodes.ExpCallSuperNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

fn convFilter.outputRetType(retTypeList:&List<&Ast.TypeInfo>) mut {
   switch #retTypeList {
      case 0 {
         self.write( "" );
      }
      case 1 {
         self.write( " " .. self.type2gotype( retTypeList[1] ) );
      }
      default {
         // 多値返却
         self.write( "(" );
         foreach retType, index in retTypeList {
            if index ~= 1 {
               self.write( ", " );
            }
            self.write( self.type2gotype( retType ) );
         }
         self.write( ")" );
      }
   }
   
}

pub fn convFilter.outputDeclFuncInfo(
   node: Nodes.Node, declInfo:&Nodes.DeclFuncInfo ) mut
{

   if isClosure( node.$expType ) {
      if! let name = declInfo.$name {
         self.outputSymbol( .Func( node.$expType ), name.txt );
         self.write( " := " );
      }
      self.write( "func" );
   }
   else {
      if declInfo.$kind == .Mtd {
         self.write( "func " );
         self.write( "(self *" );
         self.outputSymbol( .Class( unwrap declInfo.$classTypeInfo ),
                            unwrap declInfo.$classTypeInfo$.$rawTxt );  
         self.write( ") " );
      }
      else {
         self.write( "func " );
      }
      
      if! let name = declInfo.$name {
         self.outputSymbol( .Func( node.$expType ), name.txt );
      }
   }

   self.write( "(" );

   foreach arg, index in declInfo.$argList {
      if index ~= 1 {
         self.write( "," );
      }
      filter( arg, self, node );
   }
   self.write( ")" );

   self.outputRetType( declInfo.$retTypeInfoList );

   self.writeln( " {" );

   if! let body = declInfo.$body {
      filter( body, self, node );
   }
   self.write( "}" );
}


pub override fn convFilter.processDeclMethod(
   node: Nodes.DeclMethodNode, opt: Opt ) mut
{
   self.outputDeclFuncInfo( node, node.$declInfo );                    
}

pub override fn convFilter.processProtoMethod(
   node: Nodes.ProtoMethodNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}


pub override fn convFilter.processUnwrapSet(
   node: Nodes.UnwrapSetNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processIfUnwrap(
   node: Nodes.IfUnwrapNode, opt: Opt ) mut
{
   self.writeln( "{" );
   self.pushIndent( ## );

   // 一旦 nil かどうかを確認するために、テンポラリ変数にセット
   foreach varSym, index in node.$varSymList {
      if index > 1 {
         self.write( ", " );
      }
      self.write( "_" .. varSym.$name );
   }
   self.write( " := " );
   self.processSetFromExpList(
      getConvExpName( node.$id, node.$expList ),
      node.$expList.$expTypeList, node.$expList );
   self.writeln( "" );

   // テンポラリ変数が nil かどうかを確認
   self.write( "if " );
   foreach varSym, index in node.$varSymList {
      if index > 1 {
         self.write( " && " );
      }
      self.write( "_%s != nil" ( varSym.$name ) );
   }
   self.writeln( " {" );

   // nil でなければ値を入れなおす
   self.pushIndent( ## );
   foreach varSym, index in node.$varSymList {
      self.write( "%s := _%s" (varSym.$name, varSym.$name) );
      self.outputConv( getExpType( node.$expList, index ), varSym.$typeInfo );
      self.writeln( "" );
   }
   self.popIndent();
   
   filter( node.$block, self, node );

   if! let nilBlock = node.$nilBlock {
      self.writeln( "} else {" );

      filter( nilBlock, self, node );
      
      self.writeln("}" );
   }
   else {
      self.writeln("}" );
   }
   
   self.popIndent();
   self.write( "}" );
}


pub override fn convFilter.processDeclVar(
   node: Nodes.DeclVarNode, opt: Opt ) mut
{
   self.write( "var" );

   let mut prevType = "";

   fn declVar() {
      foreach varInfo, index in node.$varList {
         let goType = self.type2gotype( varInfo.$actualType );
         if goType ~= prevType {
            self.write( " %s" ( prevType ) );
         }
         if index ~= 1 {
            self.write( ", " );
         }
         self.write( "%s" ( varInfo.$name.txt ) );
         prevType = goType;
      }
      self.write( " %s" ( prevType ) );
   }
   
   if node.$unwrapFlag {
      if! let expList, unwrapBlock = node.$expList, node.$unwrapBlock {
         declVar();

         // 一旦テンポラリに入れる
         self.writeln( "" );
         self.writeln( "{" );
         self.pushIndent(##);
         foreach varInfo, index in node.$varList {
            if index ~= 1 {
               self.write( ", " );
            }
            self.write( "_%s" ( varInfo.$name.txt ) );
         }
         self.write( " := " );
         self.processSetFromExpList(
            getConvExpName( node.$id, expList ), 
            node.$typeInfoList, expList );
         self.writeln( "" );

         // テンポラリに nil が含まれるか確認する
         self.write( "if " );
         foreach varInfo, index in node.$varList {
            if index ~= 1 {
               self.write( " || " );
            }
            self.write( "_%s == nil" ( varInfo.$name.txt ) );
         }
         self.writeln( "{" );
         
         filter( unwrapBlock, self, node );

         if! let thenBlock = node.$thenBlock {
            self.writeln( "} else {" );
            self.pushIndent(##);
            foreach varInfo, index in node.$varList {
               self.write( "%s = _%s" (varInfo.$name.txt, varInfo.$name.txt) );
               self.outputConv( getExpType( expList, index ), varInfo.$actualType );
               self.writeln( "" );
            }
            self.popIndent();
            filter( thenBlock, self, node );
            self.writeln( "}" );
         }
         else {
            self.writeln( "}" );
         }
         
         
         self.popIndent();
         self.write( "}" );
      }
   }
   else {
      if! let expList = node.$expList {
         foreach exp, index in expList.$expList {
            let goType;
            let varName;
            if #node.$varList >= index {
               let varInfo = node.$varList[ index ];
               goType = self.type2gotype( varInfo.$actualType );
               varName = varInfo.$name.txt;
            }
            else {
               goType = self.type2gotype( exp.$expType );
               varName = "_";
            }
            if goType ~= prevType {
               self.write( " %s" ( prevType ) );
            }
            if index ~= 1 {
               self.write( ", " );
            }
            self.write( varName );
            prevType = goType;
         }
         self.write( " %s" ( prevType ) );
         
         self.write( " = " );
         self.processSetFromExpList(
            getConvExpName( node.$id, expList ), 
            node.$typeInfoList, expList );
      }
      else {
         declVar();
      }
   }
}


pub override fn convFilter.processWhen(
   node: Nodes.WhenNode, opt: Opt ) mut
{
   self.write( "if " );
   foreach symPair, index in node.$symPairList {
      if index > 1 {
         self.write( " && " );
      }
      self.write( "%s != nil" (symPair.$src.$name) );
      symPair.$dst.set_convModuleParam( true );
   }
   self.writeln( "{" );
   self.pushIndent(##);
   foreach symPair in node.$symPairList {
      self.write( "%s_%d := %s" (symPair.$dst.$name, symPair.$dst.$symbolId,
                                  symPair.$src.$name) );
      self.outputConv( symPair.$src.$typeInfo, symPair.$dst.$typeInfo );
      self.writeln( "" );
      symPair.$dst.set_convModuleParam( true );
   }
   self.popIndent();

   
   filter( node.$block, self, node );

   if! let elseBlock = node.$elseBlock {
      self.writeln( "} else {" );
      filter( elseBlock, self, node );
      self.write( "}" );
   }
   else {
      self.write( "}" );
   }
}

pub override fn convFilter.processDeclArg(
   node: Nodes.DeclArgNode, opt: Opt ) mut
{
   self.write( "%s " (node.$name.txt) );
   filter( unwrap node.$argType, self, node );
}

pub override fn convFilter.processDeclArgDDD(
   node: Nodes.DeclArgDDDNode, opt: Opt ) mut
{
   self.write( "ddd []LnsAny" );
}

pub override fn convFilter.processExpDDD(
   node: Nodes.ExpDDDNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processExpSubDDD(
   node: Nodes.ExpSubDDDNode, opt:Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}


pub override fn convFilter.processDeclForm(
   node: Nodes.DeclFormNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processDeclFunc(
   node: Nodes.DeclFuncNode, opt: Opt ) mut
{
   if ( self.processMode == .NonClosureFuncDecl ) == isClosure( node.$expType ) {
      return;
   }

   self.outputDeclFuncInfo( node, node.$declInfo );
}

pub override fn convFilter.processRefType(
   node: Nodes.RefTypeNode, opt: Opt ) mut
{
   self.write( self.type2gotype( node.$expType ) );
}

pub override fn convFilter.processIf(
   node: Nodes.IfNode, opt: Opt ) mut
{
   foreach stmt in node.$stmtList {
      switch stmt.$kind {
         case .If {
            self.write( "if " );
            filter( stmt.$exp, self, node );
            self.writeln( "{" );
            filter( stmt.$block, self, node );
         }
         case .ElseIf {
            self.write( "} else if " );
            filter( stmt.$exp, self, node );
            self.writeln( "{" );
            filter( stmt.$block, self, node );
         }
         case .Else {
            self.writeln( "} else { " );
            filter( stmt.$block, self, node );
         }
      }
   }
   self.write( "}" );
}

pub override fn convFilter.processSwitch(
   node: Nodes.SwitchNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}


pub override fn convFilter.processMatch(
   node: Nodes.MatchNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}


pub override fn convFilter.processWhile(
   node: Nodes.WhileNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processRepeat(
   node: Nodes.RepeatNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processFor(
   node: Nodes.ForNode, opt: Opt ) mut
{
   self.writeln( "{" );
   self.pushIndent( ## );
   let fromSym = "_from%d" (node.$id);
   let toSym = "_to%d" (node.$id);
   let deltaSym = "_delta%d" (node.$id);
   let workSym = "_work%d" (node.$id);
   self.write( "%s := " (fromSym) );
   filter( node.$init, self, node );
   self.writeln( "" );

   self.write( "%s := " (toSym));
   filter( node.$to, self, node );
   self.writeln( "" );

   if! let delta = node.$delta {
      self.write( "%s := " (deltaSym) );
      filter( delta, self, node );
      self.writeln( "" );
   }
   else {
      self.writeln( "var %s LnsInt" (deltaSym) );
      self.writeln(
         "if %s <= %s { %s = 1 } else { %s = -1 }"
         ( fromSym, toSym, deltaSym, deltaSym ) );
   }

   self.writeln(
      "for %s := %s; %s <= %s; %s += %s {"
      (workSym, fromSym, workSym, toSym, workSym, deltaSym ) );

   self.pushIndent(##);
   self.writeln( "%s := %s" (node.$val.$name, workSym ) );
   self.popIndent();

   filter( node.$block, self, node );

   self.writeln( "}" );


   self.popIndent();
   self.writeln( "}" );
}

pub override fn convFilter.processApply(
   node: Nodes.ApplyNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processForeach(
   node: Nodes.ForeachNode, opt: Opt ) mut
{
   macro _keyItemDecl( typeSym:sym, typeName:__exp ) {
      if not isAnyType( ,,typeSym ) {
         self.write( "_%s" (,,typeName) );
      }
      else {
         self.write( "%s" (,,typeName) );
      }
   }
   macro _keyItemSet( typeSym:sym, typeName:__exp ) {
      if not isAnyType( ,,typeSym ) {
         self.write( "%s := _%s" (,,typeName, ,,typeName) );
         self.outputConv( Ast.builtinTypeStem_, ,,typeSym );
         self.writeln( "" );
      }
   }
   
   self.write( "for " );
   let loopExpType = node.$exp.$expType;
   switch loopExpType.$kind {
      case .List {
         if! let key = node.$key {
            self.write( "_%s, " (key.$name) );
         }
         else {
            self.write( "_, " );
         }
         
         let valName = node.$val.$name;
         let itemType = loopExpType.$itemTypeInfoList[ 1 ];
         _keyItemDecl( itemType, valName );
         self.write( " := range( " );
         filter( node.$exp, self, node );
         self.writeln( ".Items ) {" );
         self.pushIndent( ## );
         if! let key = node.$key {
            self.writeln( "%s := _%s + 1" (key.$name, key.$name) );
         }
         _keyItemSet( itemType, valName );
         self.popIndent();
      }
      case .Map {
         let keyType = loopExpType.$itemTypeInfoList[ 1 ];
         if! let key = node.$key {
            _keyItemDecl( keyType, key.$name );
            self.write( ", " );
         }
         else {
            self.write( "_, " );
         }
         
         let valName = node.$val.$name;
         let itemType = loopExpType.$itemTypeInfoList[ 2 ];
         _keyItemDecl( itemType, valName );
         self.write( " := range( " );
         filter( node.$exp, self, node );
         self.writeln( ") {" );
         self.pushIndent( ## );
         if! let key = node.$key {
            _keyItemSet( keyType, key.$name );
         }
         _keyItemSet( itemType, valName );
         self.popIndent();
      }
      default {
         Util.err( "not support -- %s" (__func__) );
      }
   }
   filter( node.$block, self, node );
   self.write( "}" );
}

pub override fn convFilter.processForsort(
   node: Nodes.ForsortNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processExpUnwrap(
   node: Nodes.ExpUnwrapNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processExpToDDD( node: Nodes.ExpToDDDNode, opt: Opt ) mut
{
   if! let mRetExp = node.$expList.$mRetExp {
      filter( node.$expList, self, node );
   }
   else {
      self.write ( "[]LnsAny{ " );
      filter( node.$expList, self, node );
      self.write ( "}" );
   }
}

pub override fn convFilter.processExpNew(
   node: Nodes.ExpNewNode, opt: Opt ) mut
{
   let className = self.getSymbol( .Class( node.$expType ), node.$expType.$rawTxt );
   self.write( "New%s(" ( className ) );
   if! let argList = node.$argList {
      let scope = unwrap node.$expType.$scope;
      let initFuncType = unwrap scope.getTypeInfoField( "__init", true, scope, .Normal );
      
      self.processSetFromExpList(
         getConvExpName( node.$id, argList ), 
         initFuncType.$argTypeInfoList, argList );
   }
   self.write( ")" );
}

fn convFilter.outputIFMethods( node: Nodes.DeclClassNode ) mut {
   self.pushIndent(##);

   let mut name2MtdType:Map<str,&Ast.TypeInfo> = {};
   let scope = unwrap node.$expType.$scope;
   scope.filterTypeInfoField(
      true, scope, .Normal, fn ( symbolInfo:&Ast.SymbolInfo ): bool {
         if symbolInfo.$kind == .Mtd and symbolInfo.$name ~= "__init" {
            name2MtdType[ symbolInfo.$name ] = symbolInfo.$typeInfo;
         }
         return true;
      });
   forsort typeInfo, name in name2MtdType {
      self.write( "%s(" (self.getSymbol( .Func( typeInfo ), name) ));
      foreach argType, index in typeInfo.$argTypeInfoList {
         if index ~= 1 {
            self.write( ", " );
         }
         self.write( "arg%d %s" (index, self.type2gotype(argType) ) );
      }
      self.write( ")" );
      self.outputRetType( typeInfo.$retTypeInfoList );
      self.writeln( "" );
   }
   
   self.popIndent();
}

fn convFilter.outputMethodIF( node: Nodes.DeclClassNode ) mut {
   self.write( "type " );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.writeln( "Mtd interface {" );

   self.outputIFMethods( node );
   
   self.writeln( "}" );
}

fn convFilter.outputInterfaceType( node: Nodes.DeclClassNode ) mut {
   self.writeln(
      "type %s interface {"
      (self.getSymbol( .Class( node.$expType ), node.$name.txt ) ) );

   self.pushIndent(##);

   self.outputIFMethods( node );
   
   self.popIndent();

   self.writeln( "}" );
}



fn convFilter.outputClassType( node: Nodes.DeclClassNode ) mut {
// type Parent struct {
//     val1 int
//     FP ParentMtd
// }
   
   self.write( "type " );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.writeln( " struct {" );

   self.pushIndent(##);

   if node.$expType.hasBase() {
      let superClassType = node.$expType.$baseTypeInfo;
      self.writeln( self.getSymbol( .Class( superClassType ), superClassType.$rawTxt ) );
   }
   
   foreach memberNode in node.$memberList {
      filter( memberNode, self, node );
      self.writeln( "" );
   }
   self.write( "FP " );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.writeln( "Mtd" );

   self.popIndent();

   self.writeln( "}" );
}

fn convFilter.outputDownCast( node: Nodes.DeclClassNode ) mut {
   let symbol = self.getSymbol( .Class( node.$expType ), node.$name.txt );
   self.write( "type " );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.writeln( "DownCast interface {" );
   self.pushIndent( ## );
   self.write( "To" );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.write( "() *" );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.writeln( "" );
   self.popIndent();
   self.writeln( "}" );

   self.writeln( "func %sDownCastF( obj LnsAny ) LnsAny {" (symbol ));
   self.pushIndent( ## );
   self.writeln( "work, ok := obj.(%sDownCast)" (symbol) );
   self.writeln( "if ok { return work.To%s() }" (symbol) );
   self.writeln( "return nil" );
   self.popIndent();
   self.writeln( "}" );
}

fn convFilter.outputCastReceiver( node: Nodes.DeclClassNode ) mut {
   self.write( "func (obj *" );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.write( ") To" );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.write( "() *" );
   self.outputSymbol( .Class( node.$expType ), node.$name.txt );
   self.writeln( " {" );
   self.pushIndent(##);
   self.writeln( "return obj" );
   self.popIndent();
   self.writeln( "}" );
}

fn convFilter.outputDeclFuncArg(funcType:&Ast.TypeInfo) mut {
   foreach argType, index in funcType.$argTypeInfoList {
      if index ~= 1 {
         self.write( ", " );
      }
      self.write( "arg%d " ( index ));
      self.write( self.type2gotype( argType ) );
   }
}

fn convFilter.outputConstructor( node: Nodes.DeclClassNode ) mut
{
   let scope = unwrap node.$expType.$scope;
   let initFuncType = unwrap scope.getTypeInfoField( "__init", true, scope, .Normal );
   
   let className = self.getSymbol( .Class( node.$expType ), node.$expType.$rawTxt );
   self.write( "func New%s(" ( className ) );
   self.outputDeclFuncArg( initFuncType );
   self.writeln( ") *%s {" (className) );
   self.pushIndent(##);
   self.writeln( "obj := &%s{}" (className) );
   self.writeln( "obj.FP = obj" );

   {
      let mut workType = node.$expType;
      while workType.hasBase() {
         workType = workType.$baseTypeInfo;
         
         let superName = self.getSymbol( .Class( workType ), workType.$rawTxt );
         self.writeln( "obj.%s.FP = obj" (superName) );
      }
   }
   self.write( "obj.Init%s(" (className));
   foreach _, index in initFuncType.$argTypeInfoList {
      if index ~= 1 {
         self.write( ", " );
      }
      self.write( "arg%d" ( index ));
   }
   self.writeln( ")" );
   self.writeln( "return obj" );
   self.popIndent();

   self.writeln( "}" );

   
   if not node.hasUserInit() {
      // default constructor
      self.write( "func (self *%s) Init%s(" (className, className) );

      self.outputDeclFuncArg( initFuncType );
      self.writeln( ") {" );
      self.pushIndent(##);


      let superArgNum;
      if node.$expType.hasBase() {
         let superType = node.$expType.$baseTypeInfo;
         let baseScope = unwrap superType.$scope;
         let baseInitFuncType = unwrap baseScope.getTypeInfoField(
            "__init", true, baseScope, .Normal );
         superArgNum = #baseInitFuncType.$argTypeInfoList;
         let superName = self.getSymbol( .Class( superType ), superType.$rawTxt );
         self.write( "self.%s.Init%s( " (superName, superName) );
         for index = 1, superArgNum {
            if index ~= 1 {
               self.write( "," );
            }
            self.write( "arg%d" (index) );
         }
         self.writeln( ")" );
      }
      else {
         superArgNum = 0;
      }


      foreach _, index in initFuncType.$argTypeInfoList {
         if superArgNum < index {
            let sIndex = index - superArgNum;
            let memberNode = node.$memberList[ sIndex ];
            self.writeln(
               "self.%s = arg%d"
               ( self.getSymbol(
                  .Member( Ast.isPubToExternal( memberNode.$accessMode ) ),
                  memberNode.$name.txt ), index ));
         }
      }
      
      self.popIndent();
      self.writeln( "}" );
   }
}

pub override fn convFilter.processDeclClass(
   node: Nodes.DeclClassNode, opt: Opt ) mut
{
   switch node.$expType.$kind {
      case .Class {
         self.writeln( "// declaration Class -- %s" (node.$expType.$rawTxt) );
         self.outputMethodIF( node );
         self.outputClassType( node );
         self.outputDownCast( node );
         self.outputCastReceiver( node );
         self.outputConstructor( node );

         
         foreach fieldNode in node.$fieldList {
            if! let methodNode = fieldNode@@@Nodes.DeclMethodNode {
               filter( methodNode, self, node );
               self.writeln( "" );
            }
         }
      }
      case .IF {
         self.outputInterfaceType( node );
      }
      default {
         Util.err( "%s: not support -- %s" (__func__, node.$expType.$kind.$_txt ) );
      }
   }
}

pub override fn convFilter.processExpCall(
   node: Nodes.ExpCallNode, opt: Opt ) mut
{
   let funcType = node.$func.$expType;
   if Ast.isBuiltin( funcType.$typeId ) {
      let builtinFuncs = TransUnit.getBuiltinFunc();
      switch funcType {
         case builtinFuncs.lns_print {
            self.write( "Lns_print" );
         }
         default {
            filter( node.$func, self, node );
         }
      }
   }
   else {
      //self.outputSymbol( .Func( funcType ), funcType.$rawTxt );
      filter( node.$func, self, node );
   }
   self.write( "(" );
   

   if! let argList = node.$argList {
      self.processSetFromExpList(
         getConvExpName( node.$id, argList ), 
         funcType.$argTypeInfoList, argList );
   }
   
   self.write( ")" );
}

pub override fn convFilter.processExpAccessMRet(
   node: Nodes.ExpAccessMRetNode, opt:Opt ) mut

{
   //Util.err( "not support -- %s" (__func__) );
}


pub override fn convFilter.processExpList(
   node: Nodes.ExpListNode, opt: Opt ) mut
{
   foreach exp, index in node.$expList {
      if index ~= 1 {
         self.write( ", " );
      }
      if! let mRetExp = node.$mRetExp {
         if mRetExp.$index == index {
            self.write( "Lns_2DDD(" );
            filter( exp, self, node );
            self.write( ")" );
            break;
         }
      }
      filter( exp, self, node );
   }
}

pub override fn convFilter.processExpOp1(
   node: Nodes.ExpOp1Node, opt: Opt ) mut
{
   switch node.$op.txt {
      case "~" {
         self.write( "^" );
         filter( node.$exp, self, node );
      }
      case "+", "-" {
         self.write( node.$op.txt );
         filter( node.$exp, self, node );
      }
      case "not" {
         self.write( "Lns_op_not(" );
         filter( node.$exp, self, node );
         self.write( ")" );
      }
      default {
         Util.err( "%s: not support -- %s" (__func__, node.$op.txt) );
      }
   }
}

pub override fn convFilter.processExpMultiTo1(
   node: Nodes.ExpMultiTo1Node, opt: Opt ) mut
{
   self.write( "Lns_car(" );
   filter( node.$exp, self, node );
   self.write( ")" );
   self.outputConv( Ast.builtinTypeStem_, node.$expType );
}

pub override fn convFilter.processExpCast(
   node: Nodes.ExpCastNode, opt: Opt ) mut
{
   switch node.$castKind {
      case .Force {
         filter( node.$exp, self, node );
      }
      case .Implicit {
         switch node.$castType.$kind {
            case .Class {
               self.write( "&" );
               filter( node.$exp, self, node );
               self.write( ".%s" (self.getSymbol( .Class( node.$castType ),
                                                  node.$castType.$rawTxt ) ) );
            }
            case .IF {
               filter( node.$exp, self, node );
            }
            default {
               filter( node.$exp, self, node );
               if node.$exp.$expType.$kind == .Class {
                  self.write( ".FP" );
               }
            }
         }
      }
      case .Normal {
         let typeName = self.getSymbol( .Class( node.$castType ),
                                        node.$castType.$rawTxt );
         self.write( "%sDownCastF(" (typeName) );
         filter( node.$exp, self, node );
         if node.$exp.$expType.$kind == .Class {
            self.write( ".FP" );
         }
         self.write( ")" );
      }
   }
}


pub override fn convFilter.processExpParen(
   node: Nodes.ExpParenNode, opt: Opt ) mut
{
   if #node.$exp.$expTypeList >= 2 {
      self.write( "Lns_car(" );
      filter( node.$exp, self, node );
      self.write( ")" );
      self.outputConv( Ast.builtinTypeStem_, node.$expType );
   }
   else {
      self.write( "(" );
      filter( node.$exp, self, node );
      self.write( ")" );
   }
}


pub override fn convFilter.processExpSetVal(
   node: Nodes.ExpSetValNode, opt: Opt ) mut
{
   filter( node.$exp1, self, node );
   self.write( " = " );
   filter( node.$exp2, self, node );
}


fn convFilter.processAndOr( node: Nodes.ExpOp2Node,
                            opTxt: str, parent: &Nodes.Node ) mut
{
   fn isAndOr( exp:&Nodes.Node ) : bool {
      if! let parentNode = exp@@@Nodes.ExpOp2Node {
         switch parentNode.$op.txt {
            case "and", "or" {
               return true;
            }
         }
      }
      return false;
   }
   
   let mut firstFlag = not isAndOr( parent );
   if firstFlag {
      self.writeln( "Lns_popVal( Lns_incStack() ||" );
      self.pushIndent( ## );
   }

   let opCC;
   if opTxt == "and" {
      opCC = "&&";
   }
   else {
      opCC = "||";
   }
   
   if isAndOr( node.$exp1 ) {
      filter( node.$exp1, self, node );
   }
   else {
      self.write( "Lns_setStackVal( " );
      filter( node.$exp1, self, node );
      self.write( ") " );
   }
   self.writeln( opCC );
   if isAndOr( node.$exp2 ) {
      filter( node.$exp2, self, node );
   }
   else {
      self.write( "Lns_setStackVal( " );
      filter( node.$exp2, self, node );
      self.write( ") " );
   }

   if firstFlag {
      self.write( ")" );

      self.outputConv( Ast.builtinTypeStem_, node.$expType );
      self.popIndent();
   }
}


pub override fn convFilter.processExpOp2(
   node: Nodes.ExpOp2Node, opt: Opt ) mut
{
   let mut opTxt = node.$op.txt;

   switch opTxt {
      case "and", "or" {
         self.processAndOr( node, opTxt, opt.node );
      }
      case ".." {
         filter( node.$exp1, self, node );
         self.write( " + " );
         filter( node.$exp2, self, node );
      }
      default {
         if! Ast.bitBinOpMap[ opTxt ] {
            // ビット演算の処理
            switch _exp {
               case .LShift {
                  opTxt = "<<";
               }
               case .RShift {
                  opTxt = ">>";
               }
            }
            //self.accessPrimVal( node.$exp1, node );
            filter( node.$exp1, self, node );
            self.write( " " .. opTxt .. " " );
            //self.accessPrimVal( node.$exp2, node );
            filter( node.$exp2, self, node );
         }
         else {
            filter( node.$exp1, self, node );
            self.write( " " .. opTxt .. " " );
            //self.accessPrimVal( node.$exp2, node );
            filter( node.$exp2, self, node );
         }
      }
   }
}

pub override fn convFilter.processExpRef(
   node: Nodes.ExpRefNode, opt: Opt ) mut
{
   if node.$expType.$kind == .DDD {
      self.write( "ddd" );
   }
   else {
      if! let param = node.$symbolInfo.$convModuleParam {
         self.write( "%s_%d" (node.$symbolInfo.$name, node.$symbolInfo.$symbolId ) );
      }
      else {
         switch node.$symbolInfo.$kind {
            case .Var {  
               if Ast.isPubToExternal( node.$symbolInfo.$accessMode ) {
                  self.write( self.getSymbol( .PubVar, node.$symbolInfo.$name ) );
               }
               else {
                  self.write( self.getSymbol( .Normal, node.$symbolInfo.$name ) );
               }
            }
            case .Fun {
               self.write( self.getSymbol( .Func( node.$expType ),
                                           node.$symbolInfo.$name ) );
            }
            case .Typ {
               self.write( self.getSymbol( .Class( node.$expType ),
                                           node.$symbolInfo.$name ) );
            }
            default {
               self.write( node.$symbolInfo.$name );
            }
         }
      }
   }
}

pub override fn convFilter.processExpRefItem(
   node: Nodes.ExpRefItemNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processRefField(
   node: Nodes.RefFieldNode, opt: Opt ) mut
{
   filter( node.$prefix, self, node );

   if node.$expType.$kind == .Method and Ast.isBuiltin( node.$expType.$typeId )
   {
      let builtinFuncs = TransUnit.getBuiltinFunc();
      switch node.$expType {
         case builtinFuncs.list_insert {
            self.write( ".Insert" );
         }
         case builtinFuncs.list_remove {
            self.write( ".Remove" );
         }
         default {
            Util.err( "%s: not support -- %s" (__func__, node.$expType.getTxt(##)) );
         }
      }
   }
   else {
      self.write( "." );
      if! let symbol = node.$symbolInfo {
         if node.$expType.$kind == .Method and node.$prefix.$expType.$kind == .Class {
            self.write( "FP." );
         }
         self.outputSymbol(
            .Member( Ast.isPubToExternal( symbol.$accessMode ) ), node.$field.txt );
      }
   }
}

pub override fn convFilter.processExpOmitEnum(
   node: &Nodes.ExpOmitEnumNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processGetField(
   node: Nodes.GetFieldNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}


pub override fn convFilter.processReturn(
   node: Nodes.ReturnNode, opt: Opt ) mut
{
   self.write( "return " );
   if! let expList = node.$expList {
      filter( expList, self, node );
   }
}

pub override fn convFilter.processTestBlock( node: Nodes.TestBlockNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processProvide(
   node: Nodes.ProvideNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processAlias(
   node: &Nodes.AliasNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processBoxing(
   node: Nodes.BoxingNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processUnboxing(
   node: Nodes.UnboxingNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processLiteralList(
   node: Nodes.LiteralListNode, opt: Opt ) mut
{
   self.write( "NewLnsList(" );
   if! let expList = node.$expList {
      self.expList2Slice( expList );
   }
   else {
      self.write( "[]LnsAny{}" );
   }
   self.write( ")" );
}

pub override fn convFilter.processLiteralSet(
   node: Nodes.LiteralSetNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}


pub override fn convFilter.processLiteralMap(
   node: Nodes.LiteralMapNode, opt: Opt ) mut
{
   self.write( "map[LnsAny]LnsAny{" );
   foreach pair in node.$pairList {
      filter( pair.$key, self, node );
      self.write( ":" );
      filter( pair.$val, self, node );
      self.write( "," );
   }
   self.write( "}" );
}

pub override fn convFilter.processLiteralArray(
   node: Nodes.LiteralArrayNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processLiteralChar(
   node: Nodes.LiteralCharNode, opt: Opt ) mut
{
   self.write( string.format( "%d", node.$num ) );
}

pub override fn convFilter.processLiteralInt(
   node: Nodes.LiteralIntNode, opt: Opt ) mut
{
   self.write( node.$token.txt );
}

pub override fn convFilter.processLiteralReal(
   node: Nodes.LiteralRealNode, opt: Opt ) mut
{
   self.write( node.$token.txt );
}

pub override fn convFilter.processLiteralString(
   node: Nodes.LiteralStringNode, opt: Opt ) mut
{
   let txt = node.$token.txt;
   self.write( '%s' (str2gostr(txt)) );
}

pub override fn convFilter.processLiteralBool(
   node: Nodes.LiteralBoolNode, opt: Opt ) mut
{
   self.write( node.$token.txt );
}

pub override fn convFilter.processLiteralNil(
   node: Nodes.LiteralNilNode, opt: Opt ) mut
{
   self.write( "nil" );
}

pub override fn convFilter.processBreak(
   node: Nodes.BreakNode, opt: Opt ) mut
{
   self.write( "break" );
}

pub override fn convFilter.processLiteralSymbol(
   node: Nodes.LiteralSymbolNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}

pub override fn convFilter.processAbbr(
   node: Nodes.AbbrNode, opt: Opt ) mut
{
   Util.err( "not support -- %s" (__func__) );
}


pub fn createFilter(
   enableTest:bool, streamName: str,
   stream: oStream, ast:&TransUnit.ASTInfo ) : Nodes.Filter<Opt>
{
   return new convFilter( enableTest, streamName, stream, ast );
}
