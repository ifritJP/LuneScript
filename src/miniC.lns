{
   class Sub extend (Mapping) {
      let val1:int {pub};
      let val2:str {pub};
   }
   class Test extend (Mapping){
      let val3:Sub {pub};
   }
   let test = new Test( new Sub( 1, "abc" ) );
   let map = test._toMap();
   print( (unwrap map.val3).val1, (unwrap map.val3).val2 ); // 1 abc
   let test_2;
   {
      test_2 = unwrap Test._fromMap( map );
   }
   print( test_2.$val3.$val1, test_2.$val3.$val2 ); // 1 abc
   print( Test._fromMap( {} )** );
   print( Test._fromMap( { "val3": {} } )** );
}
{
   class Sub extend (Mapping) {
      let val1:int {pub};
      let val2:str! {pub};
   }
   class Test extend (Mapping){
      let val3:Sub {pub};
   }
   let test = new Test( new Sub( 1, nil ) );
   let map = test._toMap();
   print( (unwrap map.val3).val1, (unwrap map.val3).val2 ); // 1 abc
   let test_2;
   {
      test_2 = unwrap Test._fromMap( map );
   }
   print( test_2.$val3.$val1, test_2.$val3.$val2 ); // 1 abc
   print( Test._fromMap( {} )** );
   print( Test._fromMap( { "val3": {} } )** );
}
// {
//    class Test extend (Mapping) {
//       let val1:int {pub};
//       let val2:real {pub};
//       let val3:bool {pub};
//       let val4:str {pub};
//    }
//    let test = new Test( 1, 2.0, true, "abc", "aaa" );
// }