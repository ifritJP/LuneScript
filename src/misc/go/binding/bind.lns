import lune.base.Ver;

class BindInfo {
   let src:str {pub};
   let modPath:str {pub};
   let bytePath:str {pub};
   let embedPath:str {pub};
   let varSym:str {pub};
   pub fn __init( dir:str, path:str, enableByteCompile:bool, legacyFlag:bool ) {
      let mod = path.gsub( "/", "." );
      self.src = "%s/lune/base/%s.lua" (dir,path);
      self.modPath = "lune.base.%s" (mod);
      self.bytePath = "%s/lune/base/%s.luac" (dir,path);
      let embedPath;
      if enableByteCompile {
         embedPath = "%s.luac" (path);
      } else {
         embedPath = "%s.lua" (path);
      }
      let embParent;
      if legacyFlag {
         embParent = dir.gsub( "^%./", "" ) .. "/";
      } else {
         embParent = "";
      }
      self.embedPath = "%s%s" (embParent,embedPath);
      self.varSym = "lune_base_%s" ( (mod.gsub( "%.", "_" )) );
   }
}

/**
path で指定されている makefile から 'LNS_SRCS +=' のパターンを見つけて
lns を構成するファイルリストを取得する。
*/
fn getSrcList( dir:str, basaDir:str, enableByteCompile:bool ): &List<BindInfo>! {
   let path = dir .. "/Makefile";
   let legacyFlag = dir ~= basaDir;
   let! mut mkstream = io.open( path ## ) {
      return nil;
   };
   let mut list:List<BindInfo> = [];
   while true {
      let! line = mkstream.read( '*l' ) {
         break;
      };
      if line.find( "^LNS_SRCS%s*%+=%s*" ## ) {
         let src = line.gsub( ".*= base/" , "" ).gsub( "%s", "" );
         list.insert( new BindInfo(basaDir,src,enableByteCompile, legacyFlag) );
      }
   }
   mkstream.close();

   list.insert( new BindInfo( basaDir, "runtime%d" (Ver.luaModVersion ),
                              enableByteCompile, legacyFlag ) );
   return list;
}

/**
指定の path のファイルを読み取り、内容を返す。
*/
fn readFile( path:str ): str! {
   let! mut stream = io.open( path ## ) {
      print( "failed to open -- ", path );
      return nil;
   };
   let! code = stream.read( "*a" ) {
      print( "failed to read -- ", path );
      return nil;
   };
   stream.close();
   return code;
}

/**
"lune/%s.lua" (src) のファイルを byte compile した結果を返す。
*/
fn compile( src:str ): str! {
   let! code = readFile( src ) {
      return nil; 
   };
   let byteCode:str!;
   __luago {
      let loaded, err = _load( code, nil );
      when! loaded {
         byteCode = string.dump( loaded, true );
      } else {
         print( "failed to load -- ", src, err );
         byteCode = nil;
      }
   }
   return byteCode;
}


/**
stream で指定した出力先に、 code を key に紐付けて出力する。
*/
fn output( stream:oStream, key:str ) : bool {
   let varName = key.gsub( "%.", "_" );
   stream.write( 'AddlnsSrcInfo( "%s", %s )\n' (key,varName) );

   return true;
}

/**
指定した LuneScript の Makefile の情報をもとに、
LuneScript を構成する .lua ファイルをバンドルするための .go を生成する。
*/
pub fn createBinding( makeDir:str, baseDir:str, enableByteCompile:bool ) : bool {

   if! let list = getSrcList( makeDir, baseDir, enableByteCompile ) {
      if! let mut ostream = io.open( "output.go", "w" ) {
         if makeDir == baseDir {
            ostream.write( "// +build !gopherlua\n" );
         } else {
            ostream.write( "// +build gopherlua\n" );
         }
         ostream.write( "package lnsc\n" );
         ostream.write(
            'import . "github.com/ifritJP/LuneScript/src/lune/base/runtime_go"\n' );
         ostream.write( 'import _ "embed"\n' );
         //ostream.write( 'import "C"\n' );

         let lnsBindSet = (@ "Testing" );
         let mut lnsBindSym2Mod:Map<str,str> = {};
         
         let mut total = 0;
         foreach path in list {
            ostream.write( "//go:embed %s\n" ( path.$embedPath ) );
            ostream.write( "var %s []byte\n" (path.$varSym) );
            if lnsBindSet.has( (path.$modPath.gsub( ".*%.", "" )) ) {
               ostream.write(
                  "//go:embed %s\n" (( path.$embedPath.gsub( "%.lua", ".lns" ) )) );
               let bindSymbol = "lns_%s" (path.$varSym);
               ostream.write( "var %s string\n" (bindSymbol) );
               lnsBindSym2Mod[ path.$modPath ] = bindSymbol;
            }
         }

         
         ostream.write( "func init() {\n" );
         foreach path in list {
            print( path.$src );
            if enableByteCompile {
               if! let bytecode = compile( path.$src ) {
                  let! mut bytefile = io.open( path.$bytePath, "w" ) {
                     print( "failed to open file -- %s" (path.$bytePath) );
                     return false;
                  };
                  bytefile.write( bytecode );
                  total = total + #bytecode;
                  print( "size = ", #bytecode, total );
               } else {
                  print( "failed to bytecompile -- %s" (path.$src) );
                  return false;
               }
            }
            output( ostream, path.$modPath );
         }
         // Testing モジュールが使えるように、 Testing の Meta を入れておく
         foreach bindSym, modPath in lnsBindSym2Mod {
            ostream.write( 'AddlnsLnsInfo( "%s", %s )' (modPath,bindSym) );
         }
         ostream.write( "}\n" );
         ostream.close();
         return true;
      }
   }
   return false;
}

pub fn __main(args:&List<str> ):int {
   if #args == 1 {
      print( "usage: %s [-b] [-l] makefile_dir" ( args[1] ) );
      print( "  -b: byte compile" );
      print( "  -l: legacy (lua51)" );
      return 1;
   }
   let mut enableByteCompile = false;
   let mut enableLegacy = false;
   let mut dir = "";
   foreach arg, index in args {
      if index > 1 {
         switch arg {
            case "-b" {
               enableByteCompile = true;
            }
            case "-l" {
               enableLegacy = true;
            }
            default {
               dir = arg;
            }
         }
      }
   }
   if dir == "" {
      print( "dir is empty" );
      return 1;
   }
   let baseDir;
   if enableLegacy {
      baseDir = "legacy/lua51";
   } else {
      baseDir = dir;
   }
   if not createBinding( dir, baseDir, enableByteCompile ) {
      return 1;
   }
   return 0;
}
