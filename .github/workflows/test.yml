# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # ubuntu の環境でビルドテスト
    runs-on: ubuntu-latest

    timeout-minutes: 15 # 15分で強制停止
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.20
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install hererocks
        hererocks here --lua=5.3 -r latest
        pwd
        source here/bin/activate
        luarocks install luacheck
        sudo apt-get install -y liblua5.3-dev lua5.3
    - name: Test
      run: |
        source here/bin/activate
        make -C src -j6 test-comp LUA=lua5.3 LUA51= SKIP_CHECKING_TESTING=y \
                        SKIP_PROJ_TEST=y
        make -C src go-build LUA=lua5.3 LUA51=
        make -C src LUACHECK=luacheck test-global
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: test-result
        path: src/work/test*.result
        retention-days: 5

  docker-linux:
    runs-on: ubuntu-latest

    timeout-minutes: 8 # 8分で強制停止

    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: |
        docker build src/test/docker/compose/linux/build --tag linux_lns
        mkdir -p export
        docker run --rm -v $(pwd)/export:/export \
                        --name linux_lns linux_lns \
                        cp /usr/bin/lnsc /export/lnsc_linux
        docker image rm linux_lns



  docker-alpine:
    runs-on: ubuntu-latest

    timeout-minutes: 8 # 8分で強制停止

    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: |
        docker build src/test/docker/compose/alpine/build --tag alpine_lns
        mkdir -p export
        docker run --rm -v $(pwd)/export:/export \
                        --name alpine_lns alpine_lns \
                        cp /usr/bin/lnsc /export/lnsc_alpine
        docker image rm alpine_lns
 
# #    - name: Upload to Google Drive
# #      uses: satackey/action-google-drive@v1
# #      with:
# #        skicka-tokencache-json: ${{ secrets.SKICKA_TOKENCACHE_JSON }}
# #        upload-from: export/lnsc_alpine
# #        upload-to: /lns_release/
# #
# #        # For those who set up Google Drive API client ID and secret themselves
# #        google-client-id: ${{ secrets.GOOGLE_CLIENT_ID }}
# #        google-client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}


#   docker-cent8:
#     runs-on: ubuntu-latest
# 
#     timeout-minutes: 8 # 8分で強制停止
#     
#     steps:
#     - uses: actions/checkout@v2
#     - name: Build the Docker image
#       run: |
#         docker build src/test/docker/compose/centos8/build --tag cent8_lns
#         mkdir -p export
#         docker run --rm -v $(pwd)/export:/export \
#                         --name cent8_lns cent8_lns \
#                         cp /usr/bin/lnsc /export/lnsc_cent8
#         docker image rm cent8_lns
# 
# #    - name: Upload to Google Drive
# #      uses: satackey/action-google-drive@v1
# #      with:
# #        skicka-tokencache-json: ${{ secrets.SKICKA_TOKENCACHE_JSON }}
# #        upload-from: export/lnsc_cent8
# #        upload-to: /lns_release/
# #
# #        # For those who set up Google Drive API client ID and secret themselves
# #        google-client-id: ${{ secrets.GOOGLE_CLIENT_ID }}
# #        google-client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      


#  go 1.16 以降がないと embed がなくてビルドできない。
#  今は cent7 の go が古いままなので、 cent7 のテストは skip。
#  docker-cent7:
#    runs-on: ubuntu-latest
#
#    timeout-minutes: 8 # 8分で強制停止
#    
#    steps:
#    - uses: actions/checkout@v2
#    - name: Build the Docker image
#      run: |
#        docker build src/test/docker/compose/centos7/test --tag cent7_lns
#        mkdir -p export
#        docker run --rm -v $(pwd)/export:/export \
#                        --name cent7_lns cent7_lns \
#                        cp /usr/bin/lnsc /export/lnsc_cent7
#        docker image rm cent7_lns
